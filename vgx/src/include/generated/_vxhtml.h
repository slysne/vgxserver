/*
#########################################
#
# File: _vxhtml.h
# Time: Fri Sep 26 11:25:06 2025
#
#
# Automatically generated from input sources:
#
#    src/resources/WEB-ROOT/artifacts/admin.html
#    src/resources/WEB-ROOT/artifacts/console.html
#    src/resources/WEB-ROOT/artifacts/footer.html
#    src/resources/WEB-ROOT/artifacts/header.html
#    src/resources/WEB-ROOT/artifacts/index.html
#    src/resources/WEB-ROOT/artifacts/plugin.html
#    src/resources/WEB-ROOT/artifacts/search.html
#    src/resources/WEB-ROOT/artifacts/status.html
#    src/resources/WEB-ROOT/artifacts/system.html
#    src/resources/WEB-ROOT/artifacts/vgx.css
#    src/resources/WEB-ROOT/artifacts/boxstate.js
#    src/resources/WEB-ROOT/artifacts/clock.js
#    src/resources/WEB-ROOT/artifacts/digest.js
#    src/resources/WEB-ROOT/artifacts/header.js
#    src/resources/WEB-ROOT/artifacts/jquery-3.6.0.min.js
#    src/resources/WEB-ROOT/artifacts/uptime.js
#    src/resources/WEB-ROOT/artifacts/favicon.ico
#    src/resources/WEB-ROOT/artifacts/loader.gif
#    src/resources/WEB-ROOT/artifacts/logo_b-w.png
#    src/resources/WEB-ROOT/artifacts/logo_b-x.png
#    src/resources/WEB-ROOT/artifacts/logo_w-b.png
#    src/resources/WEB-ROOT/artifacts/logo_w-x.png
#    src/resources/WEB-ROOT/artifacts/unlocked.png
#
#
#########################################
*/

#ifndef _VXHTML_H
#define _VXHTML_H



const char *VGX_BUILTIN_HTML_admin[] = {
    "<!DOCTYPE html>",
    "<!--",
    "",
    "  VGX Server",
    "  Distributed engine for plugin-based graph and vector search",
    "",
    "  Module:  vgx",
    "  File:    admin.html",
    "  Author:  Stian Lysne <...>",
    "",
    "  Copyright Â© 2025 Rakuten, Inc.",
    "",
    "  Licensed under the Apache License, Version 2.0 (the \"License\");",
    "  you may not use this file except in compliance with the License.",
    "  You may obtain a copy of the License at",
    "",
    "      http://www.apache.org/licenses/LICENSE-2.0",
    "",
    "  Unless required by applicable law or agreed to in writing, software",
    "  distributed under the License is distributed on an \"AS IS\" BASIS,",
    "  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
    "  See the License for the specific language governing permissions and",
    "  limitations under the License.",
    "",
    "-->",
    "",
    "<html>",
    "<head>",
    "    <title>VGX Admin</title>",
    "    <script src=\"jquery.js\"></script>",
    "    <script src=\"header.js\"></script>",
    "    <script src=\"uptime.js\"></script>",
    "    <script src=\"boxstate.js\"></script>",
    "    <script src=\"digest.js\"></script>",
    "    <link rel=\"stylesheet\" href=\"vgx.css\">",
    "</head>",
    "<body class=\"disable_select\">",
    "    <div>",
    "        <div id=\"commonHeaderDiv\"></div>",
    "",
    "        <div class=\"container\" id=\"mainBody\">",
    "            <div id=\"templateArea\" style=\"visibility: hidden\">",
    "                <table>",
    "                    <tr id=\"subscriber_template\">",
    "                        <td class=\"substat\"><input type=\"text\" value=\"\"></td>",
    "                        <td class=\"subdgst\"></td>",
    "                        <td class=\"subslct\"><input type=\"radio\" class=\"select_subscriber\" name=\"subscriber_radio\"></td>",
    "                        <!--td class=\"subschm\"></td-->",
    "                        <td class=\"subhost\"><input class=\"highlightable subinput\" type=\"text\" placeholder=\"hostname\" value=\"\"></td>",
    "                        <td class=\"subcoln\"></td>",
    "                        <td class=\"subport\"><input class=\"highlightable subinput\" type=\"text\" placeholder=\"tport\" value=\"\"></td>",
    "                        <td class=\"subactn\"><button type=\"button\" class=\"disabled\"></button></td>",
    "                    </tr>",
    "                </table>",
    "",
    "            </div>",
    "",
    "            <div class=\"nodeStateArea\">",
    "                <!--h3>Local</h3-->",
    "                <table id=\"nodeState\">",
    "                    <tr>",
    "                        <th class=\"nodeState_double\">Service</th>",
    "                        <th class=\"nodeState_single\">Request</th>",
    "                        <th class=\"nodeState_single\">Durability</th>",
    "                        <th class=\"nodeState_single\">Mutability</th>",
    "                        <th class=\"nodeState_single\">TX I/O kiB/s</th>",
    "                    </tr>",
    "                    <tr>",
    "                        <td class=\"nodeState_double box\" ><input id=\"nodeStateIdentity\"></td>",
    "                        <td class=\"nodeState_single box\" ><input id=\"nodeStateRequestRate\"></td>",
    "                        <td class=\"nodeState_single box\" ><input id=\"nodeStatePersistenceMode\"></td>",
    "                        <td class=\"nodeState_single box\" ><input id=\"nodeStateExecutionMode\"></td>",
    "                        <td class=\"nodeState_single box\" ><input id=\"nodeStateTxInRate\"></td>",
    "                    </tr>",
    "                    <tr>",
    "                        <td class=\"nodeState_double box\" >",
    "                            <input id=\"nodeStateIdentityStatus\">",
    "                            <input id=\"nodeStateUptime\">",
    "                        </td>",
    "                        <td class=\"nodeState_single box\" ><input id=\"nodeStateQueryLatency\"></td>",
    "                        <td class=\"nodeState_single box\" ><input id=\"nodeStatePersistActivity\"><img id=\"busyPersisting\" src=\"loader.gif\"></td>",
    "                        <td class=\"nodeState_single box\" ><input id=\"nodeStateMutableMode\"></td>",
    "                        <td class=\"nodeState_single box\" ><input id=\"nodeStateTxOutRate\"></td>",
    "                    </tr>",
    "                    <tr>",
    "                        <td class=\"nodeState_double\">",
    "                            <input class=\"nodeStateObjectCount objLabel\" value=\"Order\" >",
    "                            <input class=\"nodeStateObjectCount objLabel\" value=\"Size\" >",
    "                        </td>",
    "                        <td class=\"nodeState_single box\"><button id=\"forceShutdown\" type=\"button\" class=\"localactn disabled\">Shutdown</button></td>",
    "                        <td class=\"nodeState_single box\"><button id=\"createSnapshot\" type=\"button\" class=\"localactn disabled\">Snapshot</button></td>",
    "                        <td class=\"nodeState_single box\"><button id=\"toggleBind\" type=\"button\" class=\"localactn disabled\">-</button></td>",
    "                        <td class=\"nodeState_single box\"><button id=\"toggleStreamTxInput\" type=\"button\" class=\"localactn disabled\">-</button></td>",
    "                    </tr>",
    "                    <tr>",
    "                        <td class=\"nodeState_double box\">",
    "                            <input class=\"nodeStateObjectCount memWarn\" id=\"nodeStateOrder\">",
    "                            <input class=\"nodeStateObjectCount memWarn\" id=\"nodeStateSize\">",
    "                        </td>",
    "                        <td class=\"nodeState_single box\"><button id=\"toggleServiceOut\" type=\"button\" class=\"localactn disabled\">-</button></td>",
    "                        <td class=\"nodeState_single box\"><button id=\"syncSubscribers\" type=\"button\" class=\"localactn disabled\">Sync</button></td>",
    "                        <td class=\"nodeState_single box\"><button id=\"toggleTTL\" type=\"button\" class=\"localactn disabled\">-</button></td>",
    "                        <td class=\"nodeState_single box\"><button id=\"toggleStreamTxOutput\" type=\"button\" class=\"localactn disabled\">-</button></td>",
    "                    </tr>",
    "                    <tr>",
    "                        <td class=\"nodeState_double box\">",
    "                            <input class=\"memWarn\" id=\"nodeStateMemory\" value=\"-\">",
    "                        </td>",
    "                        <td class=\"nodeState_single box\"><button id=\"resetMetrics\" type=\"button\" class=\"localactn disabled\">Reset</button></td>",
    "                        <td class=\"nodeState_single box\"><button id=\"truncateAll\" type=\"button\" class=\"localactn disabled\">Truncate</button></td>",
    "                        <td class=\"nodeState_single box\"><button id=\"toggleReadonly\" type=\"button\" class=\"localactn disabled\">-</button></td>",
    "                        <td class=\"nodeState_single box\"><button id=\"detachAll\" type=\"button\" class=\"localactn disabled\">Detach All</button></td>",
    "                    </tr>",
    "                    <tr>",
    "                        <td class=\"message\" colspan=\"5\"><input type=\"text\" id=\"message\"></input><pre id=\"longmessage\"></pre></td>",
    "                    </tr>",
    "                </table>",
    "",
    "            </div>",
    "",
    "            <div id=\"armArea\">",
    "                <hr>",
    "                <h4>Local</h4>",
    "                <span id=\"localStatus\" class=\"substat hostlist\"><input type=\"text\" value=\"\"></span>",
    "                <span id=\"localDigest\"></span>",
    "                <span id=\"masterSerial\"><input type=\"text\" value=\"\" disabled/></span>",
    "                <span id=\"lockArea\" style=\"display: inline-block\">",
    "                    <div id=\"lock\" style=\"display: inline-block\">",
    "                        <img id=\"lockStateLocked\" class=\"lockState\" src=\"lock.png\"/>",
    "                        <img id=\"lockStateUnlocked\" class=\"lockState\" src=\"unlocked.png\" style=\"display: none\"/>",
    "                    </div>",
    "                    <input id=\"armRemain\" type=\"button\" class=\"armstate disable_select\" style=\"visibility: hidden; display: inline-block\"></input>",
    "                </span>",
    "                <span style=\"display: none\">",
    "                        <input id=\"safebox\" type=\"button\" class=\"armstate armaction safe disable_select\" value=\"SAFE\">",
    "                        <input id=\"armedbox\" type=\"button\" class=\"armstate armaction armed   disable_select\" value=\"UNLOCKED\">",
    "                </span>",
    "                <div>",
    "                    <label for=\"armAction\">",
    "                        <input type=\"range\" id=\"armAction\" name=\"armAction\" style=\"visibility: hidden\">",
    "                    </label>",
    "                </div>",
    "                <div id=\"authTokenArea\"><span id=\"authToken\" class=\"enable_select\"></span></div>",
    "            </div>",
    "",
    "",
    "            <div id=\"providerArea\">",
    "                <hr>",
    "                <table id=\"provider\" class=\"hostlist\">",
    "                    <tbody>",
    "                        <tr class=\"hostlistHeader\">",
    "                            <th class=\"substat\">Provider</th>",
    "                            <th class=\"subdgst\"></th>",
    "                            <th class=\"subslct\"></th>",
    "                            <!--th class=\"subschm\"></th-->",
    "                            <th class=\"subhost\"></th>",
    "                            <th></th>",
    "                            <th class=\"subport\"></th>",
    "                            <th class=\"subactn\"></th>",
    "                        </tr>",
    "                    </tbody>",
    "                </table>",
    "            </div>",
    "",
    "            <div id=\"subscribersArea\">",
    "                <hr>",
    "                <table id=\"subscribers\" class=\"hostlist\">",
    "                    <tbody>",
    "                        <tr class=\"hostlistHeader\">",
    "                            <th class=\"substat\">Subscriber</th>",
    "                            <th class=\"subdgst\"></th>",
    "                            <th class=\"subslct\"></th>",
    "                            <!--th class=\"subschm\"></th-->",
    "                            <th class=\"subhost\"></th>",
    "                            <th></th>",
    "                            <th class=\"subport\"></th>",
    "                            <th class=\"subactn\"></th>",
    "                        </tr>",
    "                    </tbody>",
    "                </table>",
    "            </div>",
    "",
    "            <div id=\"pluginTemplateArea\" style=\"visibility: hidden\">",
    "                <table id=\"pluginTemplate\">",
    "                    <tbody>",
    "                        <tr id=\"plugin_template\">",
    "                            <td class=\"nodeState_double box\"><input class=\"pluginPath\" ></td>",
    "                            <td class=\"nodeState_single box\"><input class=\"pluginLocation\" ></td>",
    "                            <td class=\"nodeState_quad box\"><input class=\"pluginDesc\" ></td>",
    "                        </tr>",
    "                    </tbody>",
    "                </table>",
    "            </div>",
    "",
    "            <div class=\"nodeStateArea\">",
    "                <hr>",
    "                <table id=\"plugins\">",
    "                    <tbody>",
    "                        <tr>",
    "                            <th class=\"nodeState_double\">Plugin</th>",
    "                            <th class=\"nodeState_single\">Location</th>",
    "                            <th class=\"nodeState_quad\">Description</th>",
    "                        </tr>",
    "                    </tbody>",
    "                </table>",
    "            </div>",
    "",
    "            <div>",
    "                <div class=\"modal\"><span id=\"busymsg\"></span></div>",
    "            </div>",
    "",
    "        </div>",
    "",
    "        <div id=\"commonFooterDiv\"></div>",
    "    </div>",
    "</body>",
    "",
    "<style>",
    "",
    "    #mainBody.loading .modal {",
    "        display: block;",
    "    }",
    "",
    "    .container {",
    "        width: 900px;",
    "    }",
    "",
    "    body {",
    "        overflow: auto;",
    "    }",
    "",
    "    input[disabled] {",
    "        pointer-events: none;",
    "    }",
    "",
    "    #templateArea {",
    "        height: 0px;",
    "    }",
    "",
    "    #plugins input {",
    "        background-color: #F8F8F8;",
    "        /*background-color: transparent;*/",
    "        padding: 0;",
    "        margin: 0;",
    "        padding-left: 8px;",
    "    }",
    "",
    "    #localStatus {",
    "        position: relative;",
    "        left: 1px;",
    "    }",
    "",
    "    #localDigest {",
    "        position: relative;",
    "        left: 17px;",
    "        font-size: 16px;",
    "    }",
    "",
    "    #masterSerial {",
    "        position: relative;",
    "        left: 42px;",
    "    }",
    "",
    "    #masterSerial input {",
    "        width: 200px;",
    "        font-family: Consolas, Menlo, courier;",
    "        font-weight: bold;",
    "        font-size: 14px;",
    "        color: #AAAAAA;",
    "        background: transparent;",
    "        border: none;",
    "    }",
    "",
    "    #lockArea {",
    "        position: relative;",
    "        left: 60px;",
    "        vertical-align: middle;",
    "    }",
    "",
    "    #lock {",
    "        position: relative;",
    "        top: -4px;",
    "        padding: 16px 32px;",
    "        cursor: pointer;",
    "    }",
    "",
    "    .lockState {",
    "        /*position: absolute;*/",
    "        cursor: pointer;",
    "        opacity: 0.6;",
    "        height: 26px;",
    "        vertical-align: middle;",
    "    }",
    "",
    "    #armAction {",
    "        vertical-align: middle;",
    "        opacity: 0.25;",
    "    }",
    "",
    "    #armAction:hover {",
    "        cursor: pointer;",
    "        opacity: 0.5;",
    "    }",
    "",
    "",
    "    #armArea {",
    "        padding-top: 0px;",
    "        padding-bottom: 5px;",
    "        margin-top: 0px;",
    "        margin-bottom: 5px;",
    "    }",
    "",
    "    #armArea label .text {",
    "        font-weight: bold;",
    "        padding-right: 10px;",
    "        padding-left: 10px;",
    "    }",
    "",
    "    #armArea > div {",
    "        margin-bottom: 5px;",
    "    }",
    "",
    "",
    "    #armedbox {",
    "        position: relative;",
    "        background-color: #cb4335;",
    "        color: #fdedec;",
    "        left: 100px;",
    "        width: 100px;",
    "    }",
    "",
    "    #armRemain {",
    "        position: relative;",
    "        top: -2px;",
    "        left: 10px;",
    "        max-width: 40px;",
    "        margin-top: 0px;",
    "        background: transparent;",
    "    }",
    "",
    "    #safebox {",
    "        position: relative;",
    "        background-color: #239b56;",
    "        color: #eafaf1;",
    "        left: 100px;",
    "        width: 100px;",
    "    }",
    "",
    "    .arm_x {",
    "        z-index: 500;",
    "        background-color: black; /* #4d5656; */",
    "        width: 20px;",
    "    }",
    "",
    "    input.arm_x {",
    "        visibility: hidden;",
    "        font-size: 14px;",
    "        text-align: left;",
    "        vertical-align: top;",
    "        padding-bottom: 4px;",
    "        padding-left: 3px;",
    "        transform: rotate(180deg);",
    "    }",
    "",
    "",
    "    .lamp_off {",
    "        background-color: #C0C0C0 !important;",
    "        opacity: 0.5;",
    "    }",
    "",
    "    .armstate {",
    "        font-family: Consolas, Menlo, courier;",
    "        position: relative;",
    "        font-weight: bold;",
    "        font-size: 16px;",
    "        text-align: center;",
    "        vertical-align: middle;",
    "        border: none;",
    "        border-radius: 3px;",
    "        height: 25px;",
    "        transition: opacity 200ms;",
    "    }",
    "",
    "    .armaction:hover {",
    "        font-size: 110%;",
    "        opacity: 0.8;",
    "        cursor: pointer;",
    "    }",
    "",
    "    .armaction:active {",
    "        transform: translateX(2px) translateY(2px);",
    "    }",
    "",
    "    #authTokenArea {",
    "        font-size: 20%;",
    "        color: #CCCCCC;",
    "        margin-top: 5px;",
    "        margin-bottom: 5px;",
    "        visibility: hidden;",
    "    }",
    "",
    "    .nodeStateArea input {",
    "        font-weight: bold;",
    "        font-size: 100%;",
    "        vertical-align: middle;",
    "        padding-top: 5px;",
    "        padding-bottom: 5px;",
    "    }",
    "",
    "    #nodeState {",
    "        border-spacing: 0px;",
    "    }",
    "",
    "    .nodeStateArea th {",
    "        text-align: left;",
    "        padding-left: 0px;",
    "        margin-left: 0px;",
    "    }",
    "",
    "    .nodeStateArea td {",
    "        padding-left: 0px;",
    "        margin-left: 0px;",
    "    }",
    "",
    "",
    "    .nodeStateArea input {",
    "        border-radius: 3px;",
    "        border: solid 0px;",
    "    }",
    "",
    "    .box input {",
    "        height: 30px;",
    "        padding-left: 1px;",
    "        padding-right: 1px;",
    "        margin-top: 10px;",
    "        margin-bottom: 10px;",
    "        font-family: Consolas, Menlo, courier;",
    "        font-size: 16px;",
    "        font-weight: bold;",
    "    }",
    "",
    "    #nodeStatePersistActivity {",
    "        padding: 12px;",
    "    }",
    "",
    "    .nodeState_single {",
    "        width: 140px;",
    "    }",
    "",
    "    .nodeState_single input {",
    "        width: 140px;",
    "        text-align: center;",
    "        width: 110px;",
    "        padding: 0px;",
    "    }",
    "",
    "    .nodeState_double {",
    "        width: 270px;",
    "    }",
    "",
    "    .nodeState_double input {",
    "        width: 240px;",
    "    }",
    "",
    "    .nodeState_quad {",
    "        width: 525px;",
    "    }",
    "",
    "    .nodeState_quad input {",
    "        width: 525px;",
    "    }",
    "",
    "    .pluginDesc {",
    "        white-space: pre-wrap;",
    "    }",
    "",
    "    input#nodeStateIdentity {",
    "        font-size: 18px;",
    "        padding-left: 8px;",
    "    }",
    "",
    "    #nodeStateIdentityStatus {",
    "        text-align: center;",
    "        margin-right: 5px;",
    "        width: 115px;",
    "    }",
    "",
    "    #nodeStateUptime {",
    "        font-size: 15px;",
    "        text-align: center;",
    "        margin-right: 5px;",
    "        padding: 0px;",
    "        width: 115px;",
    "    }",
    "",
    "    #nodeStateMemory {",
    "        height: 22px;",
    "        padding: 0px;",
    "        margin-top: 0px;",
    "        margin-bottom: 0px;",
    "        text-align: center;",
    "    }",
    "",
    "    .message input#message {",
    "        font-family: Consolas, Menlo, courier;",
    "        font-weight: normal;",
    "        font-size: 80%;",
    "        width: 800px;",
    "    }",
    "",
    "    .message pre#longmessage {",
    "        font-family: Consolas, Menlo, courier;",
    "        font-weight: normal;",
    "        font-size: 80%;",
    "        width: 800px;",
    "        display: block;",
    "        visibility: hidden;",
    "    }",
    "",
    "    #message {",
    "        height: 22px;",
    "        padding-left: 8px;",
    "        margin-top: 15px;",
    "        margin-bottom: 0px;",
    "        text-align: left;",
    "    }",
    "",
    "    input.nodeStateObjectCount {",
    "        margin-right: 5px;",
    "        width: 115px;",
    "        height: 22px;",
    "        padding: 0px;",
    "        margin-top: 0px;",
    "        margin-bottom: 0px;",
    "        text-align: center;",
    "    }",
    "",
    "    input.objLabel {",
    "        background-color: #FFFFFF;",
    "    }",
    "",
    "    button {",
    "        cursor: pointer;",
    "        border-radius: 2px;",
    "    }",
    "",
    "    button.localactn {",
    "        width: 90px;",
    "        font-weight: bold;",
    "        font-size: 90%;",
    "        margin-right: 10px;",
    "        margin-left: 10px;",
    "        margin-top: 5px;",
    "        margin-bottom: 5px;",
    "        padding: 0px;",
    "    }",
    "",
    "",
    "    button.disabled {",
    "        opacity: 0.2;",
    "        cursor: not-allowed;",
    "        color: #333333;",
    "    }",
    "",
    "",
    "    #busyPersisting {",
    "        display: none;",
    "        opacity: 0.6;",
    "        height: 56px;",
    "        vertical-align: middle;",
    "        position: absolute;",
    "        margin-top: -3px;",
    "        margin-left: -45px;",
    "    }",
    "",
    "    #provider {",
    "       margin-left: -4px;",
    "    }",
    "",
    "   /* #provider tbody .hostlistHeader .subport {",
    "        font-size: 80%;",
    "    }*/",
    "",
    "    #subscribers {",
    "        margin-left: -4px;",
    "    }",
    "",
    "    #subscriber_template {",
    "        visibility: hidden;",
    "    }",
    "",
    "    tr#subscriber_template td {",
    "        padding-top: 0px;",
    "        padding-bottom: 0px;",
    "    }",
    "",
    "    .hostlistHeader {",
    "        visibility: hidden;",
    "    }",
    "",
    "    .hostlist {",
    "        border-spacing: 0px;",
    "        /*margin-top: -20px;*/",
    "        /*margin-bottom: 30px;*/",
    "    }",
    "",
    "    .hostlist td {",
    "        font-size: 16px;",
    "        font-family: Consolas, Menlo, courier;",
    "    }",
    "",
    "    .hostlist input {",
    "        font-size: 16px;",
    "        font-family: Consolas, Menlo, courier;",
    "        font-weight: bold;",
    "    }",
    "",
    "    .hostlist th {",
    "        text-align: left;",
    "        padding-left: 5px;",
    "    }",
    "",
    "    .hostlist tr th {",
    "        padding-bottom: 15px;",
    "    }",
    "",
    "    .hostlist tr td {",
    "        padding-top: 10px;",
    "        padding-bottom: 10px;",
    "    }",
    "",
    "    .subdgst {",
    "        padding-left: 15px;",
    "    }",
    "",
    "    .subdgst span {",
    "        width: 88px;",
    "        height: 24px;",
    "    }",
    "",
    "    .subdgst .digestX {",
    "        font-size: 16px;",
    "    }",
    "",
    "    th.substat {",
    "        text-align: left;",
    "    }",
    "",
    "    .substat input {",
    "        max-width: 100px;",
    "        font-weight: bold;",
    "        border: solid 1px;",
    "        border-radius: 4px;",
    "        text-align: center;",
    "    }",
    "",
    "    .subslct input {",
    "        cursor: pointer;",
    "        visibility: hidden;",
    "        display: none;",
    "    }",
    "",
    "    ::placeholder {",
    "        font-weight: normal;",
    "        opacity: 0.7;",
    "    }",
    "",
    "    .subhost input {",
    "        min-width: 382px;",
    "        max-width: 382px;",
    "        background-color: transparent;",
    "        border-style: double;",
    "    }",
    "",
    "    .subport input {",
    "        max-width: 60px;",
    "        background-color: transparent;",
    "        border-style: double;",
    "    }",
    "",
    "",
    "    .subactn {",
    "        padding-right: 10px;",
    "    }",
    "",
    "    .subactn button {",
    "        width: 80px;",
    "        font-weight: bold;",
    "        font-size: 90%",
    "    }",
    "",
    "    select {",
    "        margin-right: 10px;",
    "    }",
    "",
    "    .arc {",
    "        margin-right: 1px;",
    "    }",
    "",
    "    label {",
    "        margin-right: 0px;",
    "    }",
    "",
    "    .val {",
    "        padding-right: 10px;",
    "        text-align: right;",
    "        font-size: 90%;",
    "    }",
    "",
    "    .vint {",
    "        color: #0000C0;",
    "    }",
    "",
    "    .container .headrow {",
    "        background-color: #D0D0D0;",
    "    }",
    "",
    "",
    "",
    "",
    "</style>",
    "",
    "<script>",
    "    const NodeState = {",
    "        New     : Symbol(\"New\"),",
    "        Idle    : Symbol(\"Idle\"),",
    "        Active  : Symbol(\"Active\"),",
    "        Stream  : Symbol(\"Stream\"),",
    "        Delta   : Symbol(\"Delta\"),",
    "        Paused  : Symbol(\"Paused\"),",
    "        Sync    : Symbol(\"Sync\"),",
    "        Down    : Symbol(\"Down\")",
    "    }",
    "",
    "",
    "    class StatusColor {",
    "",
    "        static scheme = {",
    "            \"green\": {",
    "                \"fg\": \"#007050\",",
    "                \"bg\": \"#EAFAF1\"",
    "            },",
    "            \"greeninv\": {",
    "                \"fg\": \"#EAFAF1\",",
    "                \"bg\": \"#007050\"",
    "            },",
    "            \"gray\": {",
    "                \"fg\": \"#AAAAAA\",",
    "                \"bg\": \"#FFFFFF\"",
    "            },",
    "            \"grayinv\": {",
    "                \"fg\": \"#FFFFFF\",",
    "                \"bg\": \"#AAAAAA\"",
    "            },",
    "            \"black\": {",
    "                \"fg\": \"#000000\",",
    "                \"bg\": \"#FFFFFF\"",
    "            },",
    "            \"blackinv\": {",
    "                \"fg\": \"#FFFFFF\",",
    "                \"bg\": \"#000000\"",
    "            },",
    "            \"orange1\": {",
    "                \"fg\": \"#6E2C00\",",
    "                \"bg\": \"#F9E79F\"",
    "            },",
    "            \"orange2\": {",
    "                \"fg\": \"#6E2C00\",",
    "                \"bg\": \"#F4D03F\"",
    "            },",
    "            \"orange3\": {",
    "                \"fg\": \"#6E2C00\",",
    "                \"bg\": \"#F1C40F\"",
    "            },",
    "            \"orange4\": {",
    "                \"fg\": \"#6E2C00\",",
    "                \"bg\": \"#F39C12\"",
    "            },",
    "            \"orange5\": {",
    "                \"fg\": \"#6E2C00\",",
    "                \"bg\": \"#E67E22\"",
    "            },",
    "            \"orange6\": {",
    "                \"fg\": \"#F6DDCC\",",
    "                \"bg\": \"#D35400\"",
    "            },",
    "            \"orangeinv\": {",
    "                \"fg\": \"#F9E79F\",",
    "                \"bg\": \"#7d6608\"",
    "            },",
    "            \"blue\": {",
    "                \"fg\": \"#1F618D\",",
    "                \"bg\": \"#EAF2F8\"",
    "            },",
    "            \"blueinv\": {",
    "                \"fg\": \"#EAF2F8\",",
    "                \"bg\": \"#1F618D\"",
    "            },",
    "            \"purple\": {",
    "                \"fg\": \"#6C3483\",",
    "                \"bg\": \"#E8DAEF\"",
    "            },",
    "            \"purpleinv\": {",
    "                \"fg\": \"#E8DAEF\",",
    "                \"bg\": \"#6C3483\"",
    "            },",
    "            \"red\": {",
    "                \"fg\": \"#DD2000\",",
    "                \"bg\": \"#FDEDEC\"",
    "            },",
    "            \"redinv\": {",
    "                \"fg\": \"#FDEDEC\",",
    "                \"bg\": \"#DD2000\"",
    "            }",
    "        }",
    "",
    "",
    "        static update( elem, colorScheme ) {",
    "            let scheme = StatusColor.scheme[ colorScheme ];",
    "            elem.css(\"color\", scheme[\"fg\"]);",
    "            elem.css(\"background-color\", scheme[\"bg\"]);",
    "        }",
    "    }",
    "",
    "",
    "    class NodeStatus {",
    "",
    "        static update(element, state, serialDelta) {",
    "            element.addClass(\"disable-select\");",
    "            element.prop(\"disabled\", true);",
    "            element.css(\"text-align\", \"center\");",
    "",
    "            switch (state) {",
    "            case NodeState.Idle:",
    "                element.val( \"Idle\" );",
    "                StatusColor.update( element, \"green\" );",
    "                break;",
    "            case NodeState.Active:",
    "                element.val( \"Active\" );",
    "                StatusColor.update( element, \"orange1\" );",
    "                break;",
    "            case NodeState.Stream:",
    "                element.val( \"Stream\" );",
    "                if (serialDelta < 4) {",
    "                    StatusColor.update( element, \"orange1\" );",
    "                }",
    "                else if (serialDelta < 32) {",
    "                    StatusColor.update( element, \"orange2\" );",
    "                }",
    "                else if (serialDelta < 256) {",
    "                    StatusColor.update( element, \"orange3\" );",
    "                }",
    "                else if (serialDelta < 1024) {",
    "                    StatusColor.update( element, \"orange4\" );",
    "                }",
    "                else {",
    "                    StatusColor.update( element, \"orange5\" );",
    "                }",
    "                break;",
    "            case NodeState.Paused:",
    "                element.val( \"Pause\" );",
    "                StatusColor.update( element, \"blueinv\" );",
    "                break;",
    "            case NodeState.Delta:",
    "                element.val( \"Delta\" );",
    "                StatusColor.update( element, \"orange6\" );",
    "                break;",
    "            case NodeState.Down:",
    "                element.val( \"Down\" );",
    "                StatusColor.update( element, \"redinv\" );",
    "                break;",
    "            case NodeState.New:",
    "                element.val( \"New\" );",
    "                StatusColor.update( element, \"gray\" );",
    "                break;",
    "            case NodeState.Sync:",
    "                element.val( \"Sync\" );",
    "                StatusColor.update( element, \"orange1\" );",
    "                break;",
    "            default:",
    "                element.val( \"???\" );",
    "                StatusColor.update( element, \"purple\" );",
    "            }",
    "        }",
    "    }",
    "",
    "",
    "    class Message {",
    "        static display( text, error ) {",
    "            let m = $('#message');",
    "            m.val( text );",
    "            if( error === true ) {",
    "                BoxState.exception( m );",
    "            }",
    "            else {",
    "                BoxState.light( m );",
    "            }",
    "",
    "            if (text.length > 110) {",
    "                Message.setLong( text );",
    "            }",
    "            else {",
    "                Message.clearLong();",
    "            }",
    "        }",
    "",
    "        static clear() {",
    "            Message.display( \"\", false );",
    "        }",
    "",
    "",
    "        static setLong( text ) {",
    "            let M = $('#longmessage');",
    "            M.html( text );",
    "            M.css(\"visibility\",\"visible\");",
    "        }",
    "",
    "        static clearLong() {",
    "            let M = $('#longmessage');",
    "            M.html(\"\");",
    "            M.css(\"visibility\",\"hidden\");",
    "        }",
    "",
    "    }",
    "",
    "    class Identity {",
    "        static display(serviceName) {",
    "            let identityElem = $('#nodeStateIdentity');",
    "            let identityStatusElem = $('#nodeStateIdentityStatus');",
    "",
    "            BoxState.neutral(identityElem);",
    "            if (serviceName != \"(interactive)\") {",
    "                identityElem.val(serviceName);",
    "                identityStatusElem.val(\"Running\");",
    "                BoxState.optimal(identityStatusElem);",
    "            }",
    "            else {",
    "                identityElem.val(\"?\");",
    "                identityStatusElem.val(\"Interactive\");",
    "                BoxState.attention(identityStatusElem);",
    "            }",
    "        }",
    "    }",
    "",
    "",
    "    class Persistence {",
    "        static display(durable, persisting, synchronizing, syncProgress) {",
    "            const persistence = durable ? \"Durable\" : \"Volatile\";",
    "            const busyAs = synchronizing ? (\"Sync \" + syncProgress.toString() + \"%\") : (persisting ? \"Writing\" : null);",
    "            const state = busyAs == null ? (durable ? \"Streaming\" : \"In-Memory\") : busyAs;",
    "",
    "            let persistenceElem = $('#nodeStatePersistenceMode');",
    "            let stateElem = $('#nodeStatePersistActivity');",
    "",
    "            persistenceElem.val(persistence);",
    "            stateElem.val(state);",
    "",
    "            if (durable) {",
    "                BoxState.optimal(persistenceElem);",
    "            }",
    "            else {",
    "                BoxState.attention(persistenceElem);",
    "            }",
    "",
    "            let busyPersistingElem = $('#busyPersisting');",
    "            if (busyAs != null) {",
    "                BoxState.attention(stateElem);",
    "                stateElem.css(\"text-align\", \"left\");",
    "                busyPersistingElem.css(\"display\", \"inline\");",
    "            }",
    "            else {",
    "                BoxState.neutral(stateElem);",
    "                stateElem.css(\"text-align\", \"center\");",
    "                busyPersistingElem.css(\"display\", \"none\");",
    "            }",
    "",
    "        }",
    "    }",
    "",
    "",
    "    class Execution {",
    "        static display(bindPort, provider, executing, readonly, events, events_running) {",
    "            let execModeElem = $('#nodeStateExecutionMode');",
    "            let mutableModeElem = $('#nodeStateMutableMode');",
    "",
    "            // -------------------------------------------------------",
    "            // bound    |   provider    |   executing   |  LABEL",
    "            // -------------------------------------------------------",
    "            //    0     |      0        |       0       | LOCAL ONLY",
    "            //    1     |      0        |       0       | LISTEN ONLY",
    "            //    1     |      1        |       0       | INPUT BUT IDLE",
    "            //    1     |      1        |       1       | TRANSACTIONS FLOWING",
    "            // -------------------------------------------------------",
    "            //",
    "",
    "            // Execution",
    "            BoxState.attention(execModeElem);",
    "            let execMode = null;",
    "            let toggleBind = $('#toggleBind');",
    "            if (bindPort == 0) {",
    "                execMode = \"Local\";",
    "                BoxState.neutral(execModeElem);",
    "                toggleBind.html(\"Bind\");",
    "            }",
    "            else {",
    "                toggleBind.html(\"Unbind\");",
    "                if (provider == null) {",
    "                    execMode = \"Bound:\" + bindPort;",
    "                    BoxState.neutral(execModeElem);",
    "                }",
    "                else if (executing == false) {",
    "                    execMode = \"Suspended\";",
    "                    BoxState.neutral(execModeElem);",
    "                }",
    "                else {",
    "                    execMode = \"Streaming\";",
    "                    BoxState.optimal(execModeElem);",
    "                }",
    "            }",
    "            execModeElem.val(execMode);",
    "",
    "            // TTL / Readonly",
    "            if( readonly ) {",
    "                $('#toggleReadonly').html(\"Mutable\");",
    "                mutableModeElem.val(\"Readonly\");",
    "                BoxState.frozen(mutableModeElem);",
    "                toggleBind.css(\"visibility\", \"hidden\");",
    "            }",
    "            else {",
    "                $('#toggleReadonly').html(\"Readonly\");",
    "                const ttlMode = events ? (events_running ? \"TTL Active\" : \"TTL Frozen\") : \"TTL Passive\";",
    "                mutableModeElem.val(ttlMode);",
    "                if (events) {",
    "                    if (events_running) {",
    "                        BoxState.attention(mutableModeElem);",
    "                        $('#toggleTTL').html(\"Freeze TTL\");",
    "                    }",
    "                    else {",
    "                        BoxState.frozen(mutableModeElem);",
    "                        $('#toggleTTL').html(\"Thaw TTL\");",
    "                    }",
    "                }",
    "                else {",
    "                    BoxState.neutral(mutableModeElem);",
    "                }",
    "                toggleBind.css(\"visibility\", \"visible\");",
    "            }",
    "",
    "",
    "        }",
    "    }",
    "",
    "",
    "",
    "    class TransactionIO {",
    "",
    "        peers = null;",
    "        updater = null;",
    "        halted_in = false;",
    "        halted_out = false;",
    "",
    "        isInputHalted() {",
    "            return this.halted_in == true;",
    "        }",
    "",
    "        isOutputHalted() {",
    "            return this.halted_out == true;",
    "        }",
    "",
    "        update() {",
    "            $.get(\"/vgx/txstat\", function (data, textStatus, jqXHR) {",
    "                const response = data[\"response\"];",
    "                this.halted_in = response[\"halted\"][\"in\"];",
    "                this.halted_out = response[\"halted\"][\"out\"];",
    "                const rate = response[\"data\"][\"rate\"];",
    "                const bps_in = parseFloat(rate[\"in\"]);",
    "                const bps_out = parseFloat(rate[\"out\"]);",
    "                const kiB_in_rate = Math.round(bps_in / 1024);",
    "                const kiB_out_rate = Math.round(bps_out / 1024);",
    "                const tx_in_rate = kiB_in_rate.toLocaleString(\"en-US\");",
    "                const tx_out_rate = kiB_out_rate.toLocaleString(\"en-US\");",
    "",
    "                let inBox = $('#nodeStateTxInRate');",
    "                let outBox = $('#nodeStateTxOutRate');",
    "",
    "                if( this.halted_in == true ) {",
    "                    inBox.val(\"I: -\");",
    "                    BoxState.frozen('#nodeStateTxInRate');",
    "                }",
    "                else {",
    "                    inBox.val(\"I: \" + tx_in_rate);",
    "                    BoxState.neutral('#nodeStateTxInRate');",
    "                }",
    "                if( this.halted_out == true ) {",
    "                    outBox.val(\"O: -\");",
    "                    BoxState.frozen('#nodeStateTxOutRate');",
    "                }",
    "                else {",
    "                    outBox.val(\"O: \" + tx_out_rate);",
    "                    BoxState.neutral('#nodeStateTxOutRate');",
    "                }",
    "            }.bind(this));",
    "        }",
    "",
    "",
    "        stop() {",
    "            if (this.updater) {",
    "                clearInterval(this.updater);",
    "                this.updater = null;",
    "            }",
    "        }",
    "",
    "",
    "        start() {",
    "            this.stop();",
    "            this.updater = setInterval(this.update.bind(this), 1450);",
    "            this.update();",
    "        }",
    "",
    "",
    "        static display( bindPort, nSubscribers, busyIO, readonly ) {",
    "            let execModeElem = $('#nodeStateExecutionMode');",
    "",
    "            $.get(\"/vgx/txstat\", function (data, textStatus, jqXHR) {",
    "                const response = data[\"response\"];",
    "                this.halted_in = response[\"halted\"][\"in\"];",
    "                this.halted_out = response[\"halted\"][\"out\"];",
    "",
    "                // TX in",
    "                let toggleTxInput = $(\"#toggleStreamTxInput\");",
    "                if( busyIO == false && bindPort > 0 && readonly == false ) {",
    "                    toggleTxInput.css(\"visibility\", \"visible\");",
    "                    if( this.halted_in == true ) {",
    "                        toggleTxInput.html(\"Resume I\");",
    "                    }",
    "                    else {",
    "                        toggleTxInput.html(\"Pause I\");",
    "                    }",
    "                }",
    "                else {",
    "                    toggleTxInput.css(\"visibility\", \"hidden\");",
    "                }",
    "",
    "                // TX out",
    "                let toggleTxOutput = $(\"#toggleStreamTxOutput\");",
    "                let detachAll = $(\"#detachAll\");",
    "                if( busyIO == false && nSubscribers > 0 ) {",
    "                    toggleTxOutput.css(\"visibility\", \"visible\");",
    "                    if( this.halted_out == true ) {",
    "                        toggleTxOutput.html(\"Resume O\");",
    "                    }",
    "                    else {",
    "                        toggleTxOutput.html(\"Pause O\");",
    "                    }",
    "                    // Detach All",
    "                    detachAll.css(\"visibility\", \"visible\");",
    "                }",
    "                else {",
    "                    toggleTxOutput.css(\"visibility\", \"hidden\");",
    "                    detachAll.css(\"visibility\", \"hidden\");",
    "                }",
    "",
    "            }.bind(this));",
    "        }",
    "    }",
    "",
    "",
    "",
    "",
    "    class GraphSum {",
    "",
    "        static lastMasterSerial = 0;",
    "        static digestObj = new Digest($('#localDigest'));",
    "",
    "        static refresh() {",
    "            if (GraphSum.digestObj == null) {",
    "                GraphSum.digestObj = new Digest($('#localDigest'));",
    "            }",
    "            $.get(\"/vgx/graphsum\", function (data, textStatus, jqXHR) {",
    "                const response = data[\"response\"];",
    "",
    "                const names = response[\"graphsum\"][\"names\"];",
    "                const order = response[\"graphsum\"][\"order\"];",
    "                const size = response[\"graphsum\"][\"size\"];",
    "                let digest = \"00000000000000000000000000000000\";",
    "                let masterSerial = \"0\";",
    "                if (names.length > 0) {",
    "                    digest = response[\"graphsum\"][\"digest\"];",
    "                    masterSerial = response[\"graphsum\"][\"master-serial\"];",
    "                }",
    "",
    "                const oStr = order.toLocaleString(\"en-US\");",
    "                const sStr = size.toLocaleString(\"en-US\");",
    "",
    "                let oElem = $('#nodeStateOrder');",
    "                let sElem = $('#nodeStateSize');",
    "",
    "                const thres = 100000000;",
    "",
    "                oElem.css(\"font-size\", order >= thres ? \"80%\" : \"90%\" );",
    "                sElem.css(\"font-size\", size >= thres ? \"80%\" : \"90%\" );",
    "",
    "                oElem.val(oStr);",
    "                sElem.val(sStr);",
    "",
    "                if (GraphSum.lastMasterSerial == 0) {",
    "                    GraphSum.lastMasterSerial = masterSerial;",
    "                }",
    "",
    "                // Local Status",
    "                let localStatus = $('#localStatus input');",
    "                if (masterSerial == GraphSum.lastMasterSerial) {",
    "                    NodeStatus.update( localStatus, NodeState.Idle, 0 );",
    "                }",
    "                else {",
    "                    GraphSum.lastMasterSerial = masterSerial;",
    "                    let serialDelta = masterSerial - GraphSum.lastMasterSerial;",
    "                    NodeStatus.update( localStatus, NodeState.Active, serialDelta );",
    "                }",
    "",
    "                // Local Digest",
    "                GraphSum.digestObj.update(digest);",
    "",
    "                // Local Master Serial",
    "                const msStr = MasterSerial.render( masterSerial );",
    "                $('#masterSerial input').val( msStr );",
    "",
    "            });",
    "        }",
    "    }",
    "",
    "",
    "    class Meminfo {",
    "        static refresh() {",
    "            $.get(\"/vgx/meminfo\", function (data, textStatus, jqXHR) {",
    "                const mem = data[\"response\"][\"memory\"];",
    "                const total = parseInt(mem[\"total\"]);",
    "                const process_mem = parseInt(mem[\"current\"][\"process\"]);",
    "                const current_avail = parseInt(mem[\"current\"][\"available\"]);",
    "                const usage = 1.0 - (current_avail / total);",
    "",
    "                if (usage > 0.85) {",
    "                    BoxState.exception('.memWarn');",
    "                }",
    "                else if (usage > 0.75) {",
    "                    BoxState.attention('.memWarn');",
    "                }",
    "                else {",
    "                    BoxState.neutral('.memWarn');",
    "                }",
    "",
    "                let meminfo = $('#nodeStateMemory');",
    "                const memMiB = Math.round( process_mem / (1024*1024) );",
    "                const memStr = memMiB.toLocaleString(\"en-US\");",
    "                const usagePct = (usage*100).toFixed(0);",
    "                meminfo.val( \"\"+memStr + \" MiB    (\" + usagePct + \"%)\");",
    "",
    "            });",
    "        }",
    "    }",
    "",
    "",
    "    class PluginInfo {",
    "",
    "        already = false;",
    "",
    "",
    "        static refresh( mode ) {",
    "            if( PluginInfo.already ) {",
    "                return;",
    "            }",
    "",
    "",
    "            if( mode === \"matrix\" ) {",
    "                // Must use baseport",
    "                const baseport = parseInt(window.location.port, 10) - 1;",
    "                const url = `${window.location.protocol}//${window.location.hostname}:${baseport}/vgx/builtin/matrixplugins`;",
    "                $.get(url, function (data) {",
    "                    const plugins = data[\"response\"];",
    "                    plugins.sort();",
    "                    const grex = /name=(\\S+)/;",
    "                    $('.plugin_row').remove();",
    "                    PluginInfo.already = true;",
    "                    for (var i = 0; i < plugins.length; i++) {",
    "                        const plugin = plugins[i];",
    "                        const path = plugin[\"path\"];",
    "                        const pluginLocation = plugin.matrix?.location;",
    "                        const level = plugin.matrix?.level;",
    "                        const description = plugin[\"description\"];",
    "                        PluginInfo.renderPluginRow(i, path, description, mode, pluginLocation, level);",
    "                    }",
    "                }).fail( function (jqXHR, textStatus, errorThrown) {",
    "                    let x = 1;",
    "                });",
    "",
    "            }",
    "            else {",
    "                $.get(\"/vgx/plugins\", function (data, textStatus, jqXHR) {",
    "                    const plugins = data[\"response\"];",
    "                    plugins.sort();",
    "                    const grex = /name=(\\S+)/;",
    "                    $('.plugin_row').remove();",
    "                    PluginInfo.already = true;",
    "                    for (var i = 0; i < plugins.length; i++) {",
    "                        const plugin = plugins[i];",
    "                        const path = plugin[\"path\"];",
    "                        const description = plugin[\"description\"];",
    "                        PluginInfo.renderPluginRow(i, path, description, mode, \"engine\", 0);",
    "                    }",
    "                });",
    "            }",
    "        }",
    "",
    "",
    "",
    "        static getPluginName( path ) {",
    "            let nameRex = /\\/vgx\\/plugin\\/(\\S+)/;",
    "            let m = nameRex.exec(path);",
    "            return m[1];",
    "        }",
    "",
    "",
    "        static renderPluginRow(pluginId, path, description, mode, pluginLocation, pluginLevel) {",
    "            let plugins = $('#plugins tbody');",
    "",
    "            let rowTemplate = $('#plugin_template').html();",
    "",
    "            const rowID = \"plugin_\" + pluginId;",
    "",
    "            plugins.append('<tr class=\"plugin_row\" id=\"' + rowID + '\">' + rowTemplate + '</tr>');",
    "",
    "            // Row",
    "            let row = plugins.find(\"#\" + rowID);",
    "            row.find(\"input\").prop(\"disabled\", true);",
    "            row.find(\"input\").addClass(\"disable_select\");",
    "            row.find(\"*\").css(\"vertical-align\", \"middle\");",
    "",
    "            // Path",
    "            let pathTD = row.find(\"td\");",
    "            let pathElem = pathTD.find(\".pluginPath\");",
    "            pathElem.attr(\"id\", \"pluginPath_\" + pluginId);",
    "            pathElem.val(path);",
    "            pathElem.css( \"font-size\", \"90%\" );",
    "            pathTD.css(\"cursor\", \"pointer\");",
    "            pathTD.off(\"click\");",
    "            pathTD.on(\"click\", function(eventObj) {",
    "                let pluginName = PluginInfo.getPluginName(path);",
    "                let pluginType;",
    "                if (mode === \"matrix\") {",
    "                    pluginName += \" [\" + pluginLocation + \"/\" + pluginLevel + \"]\";",
    "                    pluginType = \"matrix\";",
    "                }",
    "                else {",
    "                    pluginType = \"plugin\";",
    "                }",
    "                let pluginLink = \"http://\" + window.location.hostname + \":\" + CommonHeader.baseport + \"/plugin?plugin=\" + pluginName + \"&type=\" + pluginType;",
    "                window.open( pluginLink, \"_blank\", \"height=850, width=925\" );",
    "            }.bind(this));",
    "",
    "            // Location/Level",
    "            let locationElem = pathTD.find(\".pluginLocation\");",
    "            locationElem.attr(\"id\", \"pluginLocation_\" + pluginId);",
    "            locationElem.val( \"\" + pluginLocation + \"/\" + pluginLevel );",
    "            locationElem.css( \"font-weight\", \"normal\" );",
    "            locationElem.css( \"font-family\", \"unset\" );",
    "            locationElem.css( \"font-size\", \"90%\" );",
    "",
    "            // Description",
    "            let descStr = typeof( description ) === \"object\" ? description.join(\" \") : description;",
    "            let descElem = pathTD.find(\".pluginDesc\");",
    "            descElem.attr(\"id\", \"pluginDesc_\" + pluginId);",
    "            descElem.val(descStr.trim());",
    "            descElem.css( \"font-weight\", \"normal\" );",
    "            descElem.css( \"font-family\", \"unset\" );",
    "            descElem.css( \"font-size\", \"90%\" );",
    "",
    "",
    "        }",
    "    }",
    "",
    "",
    "",
    "    class Peers {",
    "",
    "        providerSubId = 0x7fffffff;",
    "        providerHost = null;",
    "        providerStat = null;",
    "        providerDigest = null;",
    "        providerNoUpdateCount = 0;",
    "",
    "",
    "        constructor(admin, txio) {",
    "            this.admin = admin;",
    "            this.txio = txio;",
    "        }",
    "",
    "",
    "        selectSubscriber() {",
    "            let thisFocus = $(\".subinput:focus\");",
    "            const subId = $('.select_subscriber:checked').val();",
    "            let rowId = \"#subscriber_\" + subId;",
    "            let hostElem = \"#subhost_\" + subId;",
    "            let portElem = \"#subport_\" + subId;",
    "            let statElem = \"#substat_\" + subId;",
    "            let actionElem = \"#subactn_\" + subId;",
    "            // Disable host/port inputs by default",
    "            $('.subhost input').addClass(\"disable_select\");",
    "            $('.subhost input').prop(\"disabled\", true);",
    "            $('.subport input').addClass(\"disable_select\");",
    "            $('.subport input').prop(\"disabled\", true);",
    "            // Enable one button",
    "            $('.subactn button').prop(\"disabled\", true);",
    "            $('.subactn button').addClass(\"disabled\");",
    "            $(actionElem).prop(\"disabled\", false);",
    "            $(actionElem).removeClass(\"disabled\");",
    "            // Highlight one row",
    "            $('.subscriber_row').removeClass(\"highlight\");",
    "            $(rowId).addClass(\"highlight\");",
    "            $(rowId).removeClass(\"hoverlight\");",
    "            // Allow input if status is not Attached",
    "            if ( $(statElem).val() === \"New\" ) {",
    "                $(hostElem).removeClass(\"disable_select\");",
    "                $(hostElem).prop(\"disabled\", false);",
    "                $(portElem).removeClass(\"disable_select\");",
    "                $(portElem).prop(\"disabled\", false);",
    "                if (thisFocus.length == 0) {",
    "                    $(hostElem).focus();",
    "                }",
    "                else {",
    "                    thisFocus.focus();",
    "                }",
    "            }",
    "        }",
    "",
    "",
    "        renderSubscriberRow(subId, subHost, subPort, subAdminPort, subDigest, subStatus, serialDelta) {",
    "",
    "            let provider = $('#provider tbody');",
    "            let subscribers = $('#subscribers tbody');",
    "",
    "            let rowTemplate = $('#subscriber_template').html();",
    "",
    "            const rowID = \"subscriber_\" + subId;",
    "",
    "            let tbody;",
    "            if (subId == this.providerSubId) {",
    "                tbody = provider;",
    "            }",
    "            else {",
    "                tbody = subscribers;",
    "            }",
    "            tbody.append('<tr class=\"subscriber_row\" id=\"' + rowID + '\">' + rowTemplate + '</tr>');",
    "",
    "            // Row",
    "            let row = tbody.find(\"#\" + rowID);",
    "            if (this.admin.authorizer.isSafe()) {",
    "                row.find(\"input\").prop(\"disabled\", true);",
    "                row.find(\"input\").addClass(\"disable_select\");",
    "            }",
    "            row.find(\"*\").css(\"vertical-align\", \"middle\");",
    "",
    "            // Digest Status Select Host Port Action",
    "            let subdgstElem = row.find(\".subdgst\");",
    "            let substatElem = row.find(\".substat input\");",
    "            let subslctElem = row.find(\".subslct input\");",
    "            let subhostElem = row.find(\".subhost input\");",
    "            let subportElem = row.find(\".subport input\");",
    "            let subactnElem = row.find(\".subactn button\");",
    "",
    "            // Digest",
    "            if (subDigest == null) {",
    "                new Digest(subdgstElem).update(null);",
    "            }",
    "            else {",
    "                new Digest(subdgstElem).update(subDigest);",
    "                subdgstElem.prop( \"title\", \"S/N lag: \" + serialDelta );",
    "            }",
    "",
    "            // Status",
    "            let substatTD = row.find(\".substat\");",
    "            substatElem.attr(\"id\", \"substat_\" + subId);",
    "            substatTD.removeProp(\"title\");",
    "            substatTD.off(\"click\");",
    "            substatTD.css(\"cursor\", \"default\");",
    "            if (subStatus != null) {",
    "                NodeStatus.update( $('#substat_'+subId), subStatus, serialDelta );",
    "                if (substatTD != null && subAdminPort != null && subAdminPort > 0) {",
    "                    const uri = \"http://\" + subHost + \":\" + subAdminPort + \"/admin\";",
    "                    substatTD.prop( \"title\", uri );",
    "                    substatTD.css(\"cursor\", \"pointer\");",
    "                    substatTD.click(function(eventObj) {",
    "                        window.open( uri, \"_blank\", \"height=850, width=925\" );",
    "                     }.bind(this));",
    "                }",
    "                else {",
    "                    substatTD.removeProp(\"title\");",
    "                    substatTD.css(\"cursor\", \"default\");",
    "                }",
    "            }",
    "",
    "            // Select",
    "            subslctElem.attr(\"id\", \"subslct_\" + subId);",
    "            subslctElem.val(subId);",
    "            row.off(\"mouseover\");",
    "            row.on(\"mouseover\", null, row, function (event) {",
    "                if (this.admin.authorizer.isArmed() && !$(this).hasClass(\"highlight\")) {",
    "                    event.data.addClass(\"hoverlight\");",
    "                }",
    "            }.bind(this));",
    "            row.off(\"mouseout\");",
    "            row.on(\"mouseout\", null, row, function (event) {",
    "                if (this.admin.authorizer.isArmed()) {",
    "                    event.data.removeClass(\"hoverlight\");",
    "                }",
    "            }.bind(this));",
    "",
    "            // Host",
    "            subhostElem.attr(\"id\", \"subhost_\" + subId);",
    "            if (subHost != null) {",
    "                subhostElem.val(subHost);",
    "            }",
    "            else {",
    "                subhostElem.val(\"\");",
    "            }",
    "",
    "            // Port",
    "            subportElem.attr(\"id\", \"subport_\" + subId);",
    "            if (subId == this.providerSubId) {",
    "                subportElem.attr(\"placeholder\",\"hport\");",
    "                if( subPort != null && subPort < 0 ) {",
    "                    row.find(\".subcoln\").html('<pre style=\"margin:0\"> </pre>');",
    "                    subportElem.prop(\"disabled\", true);",
    "                    subportElem.css(\"visibility\", \"hidden\");",
    "                }",
    "                else {",
    "                    row.find(\".subcoln\").html(\":\");",
    "                    row.find(\".subcoln\").css(\"visibility\", \"visible\");",
    "                }",
    "            }",
    "            else {",
    "                subportElem.attr(\"placeholder\",\"tport\");",
    "                row.find(\".subcoln\").html(\":\");",
    "                if (subPort != null) {",
    "                    subportElem.val(subPort);",
    "                }",
    "            }",
    "            row.find(\"*\").off(\"mouseup\");",
    "",
    "            row.find(\"*\").on(\"mouseup\", null, subslctElem, function (eventObj) {",
    "                let selE = eventObj.data;",
    "                if (selE.prop(\"disabled\") == false) {",
    "                    selE.prop(\"checked\", true);",
    "                    this.selectSubscriber();",
    "                }",
    "            }.bind(this));",
    "",
    "            // <enter> in host to go to port",
    "            subhostElem.off(\"keypress\");",
    "            subhostElem.on(\"keypress\", subportElem, function (event) {",
    "                if (event.key == \"Enter\") {",
    "                    (event.data).focus();",
    "                }",
    "            });",
    "",
    "            // <enter> in port to perform action",
    "            subportElem.off(\"keypress\");",
    "            subportElem.on(\"keypress\", subactnElem, function (event) {",
    "                if (event.key == \"Enter\") {",
    "                    subactnElem.trigger(\"click\");",
    "                }",
    "            });",
    "",
    "            // Action Button",
    "            subactnElem.addClass(\"subscriber_action\");",
    "            subactnElem.attr(\"id\", \"subactn_\" + subId);",
    "            subactnElem.prop(\"disabled\", true);",
    "            subactnElem.addClass(\"disabled\");",
    "            const subscriberData = {",
    "                'hostElem': subhostElem,",
    "                'portElem': subportElem",
    "            };",
    "",
    "            if (subId == this.providerSubId) {",
    "                if (subHost != null) {",
    "                    subactnElem.html(\"Detach\");",
    "                    subactnElem.click(subscriberData, this.admin.performUnsubscribe.bind(this.admin));",
    "                }",
    "                else {",
    "                    subactnElem.html(\"Subscribe\");",
    "                    subactnElem.click(subscriberData, this.admin.performSubscribe.bind(this.admin));",
    "                }",
    "            }",
    "            else {",
    "                if (subHost != null) {",
    "                    subactnElem.html(\"Detach\");",
    "                    subactnElem.click(subscriberData, this.admin.performDetach.bind(this.admin));",
    "                }",
    "                else {",
    "                    subactnElem.html(\"Attach\");",
    "                    subactnElem.click(subscriberData, this.admin.performAttach.bind(this.admin));",
    "                }",
    "            }",
    "",
    "        }",
    "",
    "",
    "        refreshAll(reAuth) {",
    "            $.get(\"/vgx/status\", function (data, textStatus, jqXHR) {",
    "                const response = data[\"response\"];",
    "                const serving = response[\"request\"][\"serving\"];",
    "                if (serving > 0) {",
    "                    $('#toggleServiceOut').html(\"Service Out\");",
    "                }",
    "                else {",
    "                    $('#toggleServiceOut').html(\"Service In\");",
    "                }",
    "            });",
    "",
    "            $.get(\"/vgx/peerstat\", function (data, textStatus, jqXHR) {",
    "                try {",
    "",
    "                    const response = data[\"response\"];",
    "",
    "                    $(\".localactn\").css(\"display\", \"inline\");",
    "",
    "                    // Service",
    "                    const serviceName = response[\"name\"];",
    "                    Identity.display(serviceName);",
    "",
    "                    // Durability / Consistency",
    "                    const digest = response[\"digest\"];",
    "                    this.providerDigest = response[\"provider-digest\"];",
    "                    const idle_ms = parseInt(response[\"idle-ms\"]);",
    "                    const durable = response[\"durable\"];",
    "                    const masterSerial = response[\"master-serial\"];",
    "                    const persisting = response[\"persisting\"];",
    "                    const synchronizing = response[\"synchronizing\"];",
    "                    const syncProgress = response[\"sync-progress\"];",
    "                    Persistence.display(durable, persisting, synchronizing, syncProgress);",
    "",
    "                    // Mutability / execution",
    "                    const bindPort = response[\"port\"];",
    "                    const provider = response[\"provider\"];",
    "                    const executing = response[\"executing\"];",
    "                    const readonly = response[\"readonly\"];",
    "                    const events = response[\"events\"];",
    "                    const events_running = response[\"events-running\"];",
    "                    Execution.display(bindPort, provider, executing, readonly, events, events_running);",
    "",
    "                    $('.subscriber_row').remove();",
    "",
    "                    const subscribers = response[\"subscribers\"];",
    "                    const rex = /(\\S+):\\/\\/([^:]+):(\\d+)/;",
    "",
    "                    // TransactionIO",
    "                    const busyIO = persisting || synchronizing ? true : false;",
    "                    TransactionIO.display( bindPort, subscribers.length, busyIO, readonly );",
    "",
    "                    // We are configured to accept TX input",
    "                    if (bindPort > 0) {",
    "                        // Backend is not reporting an attached provider",
    "                        if (provider == null) {",
    "                            // A provider host was recently known to us, render most recent provider state (possible temporary backend timeout)",
    "                            if (this.providerHost != null && this.providerNoUpdateCount <= 8) {",
    "                                this.providerNoUpdateCount += 1;",
    "                                this.renderSubscriberRow(this.providerSubId, this.providerHost, -1, -1, this.providerDigest, this.providerStat, 0);",
    "                            }",
    "                            // No recent provider host",
    "                            else {",
    "                                this.renderSubscriberRow(this.providerSubId, null, null, null, null, NodeState.New, 0);",
    "                                this.providerHost = null;",
    "                                this.providerDigest = null;",
    "                                this.providerStat = null;",
    "                            }",
    "                        }",
    "                        // Render attached provider state",
    "                        else {",
    "                            this.providerNoUpdateCount == 0;",
    "                            const match = rex.exec(provider);",
    "                            if (match != null) {",
    "                                this.providerHost = match[2];",
    "                            }",
    "                            else {",
    "                                this.providerHost = \"?\";",
    "                            }",
    "                            if (this.txio.isInputHalted()) {",
    "                                this.providerStat = NodeState.Paused;",
    "                            }",
    "                            else if ( this.providerDigest === digest ) {",
    "                                this.providerStat = NodeState.Idle;",
    "                            }",
    "                            else if (idle_ms < 10000 ) {",
    "                                this.providerStat = NodeState.Stream;",
    "                            }",
    "                            else {",
    "                                this.providerStat = NodeState.Delta;",
    "                            }",
    "                            this.renderSubscriberRow(this.providerSubId, this.providerHost, -1, -1, this.providerDigest, this.providerStat, 0);",
    "                        }",
    "                        $('#providerArea').css(\"display\", \"block\");",
    "                        $('#nodeStateTxInRate').css(\"opacity\", \"1\");",
    "                    }",
    "                    else {",
    "                        $('#providerArea').css(\"display\", \"none\");",
    "                        $('#nodeStateTxInRate').css(\"opacity\", \"0.3\");",
    "                    }",
    "",
    "                    // Subscribers",
    "                    $('#subscribersArea').css(\"display\", \"block\");",
    "",
    "                    let nAttached = 0;",
    "                    if (subscribers.length > 0) {",
    "                        subscribers.sort();",
    "                        for (var i = 0; i < subscribers.length; i++) {",
    "                            const S = subscribers[i];",
    "                            const uri = S[0];",
    "                            const detail = S[1];",
    "                            if (detail != null) {",
    "                                const host = detail['host'];",
    "                                const txport = detail['txport'];",
    "                                const adminport = detail['adminport'];",
    "                                const subDigest = detail['digest'];",
    "                                const subMasterSerial = detail['master-serial'];",
    "                                const serialDelta = MasterSerial.diff( masterSerial, subMasterSerial );",
    "                                let stat = null;",
    "                                if (synchronizing) {",
    "                                    stat = NodeState.Sync;",
    "                                }",
    "                                else if (detail[\"status\"] === \"CONNECTED\") {",
    "                                    nAttached += 1;",
    "                                    if (this.txio.isOutputHalted()) {",
    "                                        stat = NodeState.Paused;",
    "                                    }",
    "                                    else if (subDigest === digest) {",
    "                                        stat = NodeState.Idle;",
    "                                    }",
    "                                    else if (idle_ms < 10000) {",
    "                                        stat = NodeState.Stream;",
    "                                    }",
    "                                    else {",
    "                                        stat = NodeState.Delta;",
    "                                    }",
    "                                }",
    "                                else {",
    "                                    stat = NodeState.Down;",
    "                                }",
    "",
    "                                this.renderSubscriberRow(i, host, txport, adminport, subDigest, stat, serialDelta);",
    "                            }",
    "                        }",
    "                        $('#nodeStateTxOutRate').css(\"opacity\", \"1\");",
    "                    }",
    "                    else {",
    "                        $('#nodeStateTxOutRate').css(\"opacity\", \"0.3\");",
    "                    }",
    "",
    "                    if (persisting == false && synchronizing == false) {",
    "                        // Snapshot allowed if durable or if local execution",
    "                        if (durable == true || bindPort == 0) {",
    "                            $(\"#createSnapshot\").css(\"visibility\", \"visible\");",
    "                        }",
    "                        else {",
    "                            $(\"#createSnapshot\").css(\"visibility\", \"hidden\");",
    "                        }",
    "",
    "                        if (nAttached > 0 && nAttached == subscribers.length && readonly == false) {",
    "                            $(\"#syncSubscribers\").css(\"visibility\", \"visible\");",
    "                        }",
    "                        else {",
    "                            $(\"#syncSubscribers\").css(\"visibility\", \"hidden\");",
    "                        }",
    "",
    "                        if (readonly)  {",
    "                            $(\"#truncateAll\").css(\"visibility\", \"hidden\");",
    "                        }",
    "                        else {",
    "                            $(\"#truncateAll\").css(\"visibility\", \"visible\");",
    "                        }",
    "",
    "                        if (events == true) {",
    "                            $(\"#toggleTTL\").css(\"visibility\", \"visible\");",
    "                        }",
    "                        else {",
    "                            $(\"#toggleTTL\").css(\"visibility\", \"hidden\");",
    "                        }",
    "                        $(\"#toggleBind\").css(\"visibility\", \"visible\");",
    "                        $(\".subscriber_action\").css(\"visibility\", \"visible\");",
    "                    }",
    "                    else {",
    "                        $(\"#createSnapshot\").css(\"visibility\", \"hidden\");",
    "                        $(\"#syncSubscribers\").css(\"visibility\", \"hidden\");",
    "                        $(\"#toggleTTL\").css(\"visibility\", \"hidden\");",
    "                        $(\"#toggleBind\").css(\"visibility\", \"hidden\");",
    "                        $(\".subscriber_action\").css(\"visibility\", \"hidden\");",
    "                    }",
    "",
    "                    // Add one more row for attaching new subscriber",
    "                    if (!synchronizing) {",
    "                        this.renderSubscriberRow(subscribers.length, null, null, null, null, NodeState.New, 0);",
    "                    }",
    "",
    "                }",
    "                catch (error) {",
    "                    Message.display( JSON.stringify(error, null, 2), true );",
    "                }",
    "                finally {",
    "                    if (reAuth) {",
    "                        this.admin.authorizer.disarm();",
    "                        this.admin.authorizer.arm();",
    "                    }",
    "                    $('.hostlistHeader').css(\"visibility\", \"visible\");",
    "                }",
    "            }.bind(this));",
    "        }",
    "",
    "    }",
    "",
    "",
    "",
    "    class Authorizer {",
    "        armSize = 180;",
    "",
    "        authToken = null;",
    "        auth_t0 = 0.0;",
    "        auth_tx = 0.0;",
    "        auth_t_server_minus_t_local = 0.0;",
    "        deauthorizer = null;",
    "        armActionArmed = false;",
    "        parentAdmin = null;",
    "        peers = null;",
    "",
    "        constructor(parent) {",
    "            this.parentAdmin = parent;",
    "            $('#armAction').css(\"width\", this.armSize);",
    "            $('#armAction').prop(\"min\", 0);",
    "            $('#armAction').prop(\"max\", this.armSize);",
    "            $('#authToken').removeClass(\"disable_select\");",
    "            $('#authToken').prop(\"disabled\", false);",
    "            $('.safe').off(\"click\");",
    "            $('.safe').on(\"click\", this.disarm.bind(this));",
    "            $('.safe').on(\"click\", Message.clear);",
    "            $('.message').off(\"click\");",
    "            $('.message').on(\"click\", Message.clear);",
    "            $('.armed').off(\"click\");",
    "            $('.armed').on(\"click\", this.arm.bind(this));",
    "            $('#lock').off(\"click\");",
    "            $('#lock').on(\"click\", this.toggle.bind(this));",
    "        }",
    "",
    "",
    "        registerPeers(peers) {",
    "            this.peers = peers;",
    "            $('#armAction').off(\"input\");",
    "            $('#armAction').on(\"input\", this.detectArm.bind(this));",
    "        }",
    "",
    "",
    "        get token() {",
    "            return this.authToken;",
    "        }",
    "",
    "",
    "        get size() {",
    "            return this.armSize;",
    "        }",
    "",
    "",
    "        isArmed() {",
    "            return this.armActionArmed == true;",
    "        }",
    "",
    "",
    "        isSafe() {",
    "            return this.armActionArmed == false;",
    "        }",
    "",
    "",
    "        lampSafe(safe) {",
    "            $('.armstate').removeClass(\"lamp_off\");",
    "            $('.arm_x').val(\"\");",
    "            if (safe) {",
    "                $('#armedbox').addClass(\"lamp_off\");",
    "                $('#armedbox').val(\"UNLOCK\");",
    "                $('#safebox').val(\"SAFE\");",
    "                $('#armRemain').css(\"visibility\", \"hidden\");",
    "                $('#lockStateLocked').css(\"display\", \"inline-block\");",
    "                $('#lockStateUnlocked').css(\"display\", \"none\");",
    "            }",
    "            else {",
    "                $('#armedbox').val(\"UNLOCKED\");",
    "                $('#safebox').addClass(\"lamp_off\");",
    "                $('#safebox').val(\"LOCK\");",
    "                $('#armRemain').css(\"visibility\", \"visible\");",
    "                $('#lockStateLocked').css(\"display\", \"none\");",
    "                $('#lockStateUnlocked').css(\"display\", \"inline-block\");",
    "            }",
    "        }",
    "",
    "",
    "        enableLocalActions() {",
    "            $(\".localactn\").prop(\"disabled\", false);",
    "            $(\".localactn\").removeClass(\"disabled\");",
    "            $(\"#forceShutdown\").off(\"click\");",
    "            $(\"#forceShutdown\").on(\"click\", this.parentAdmin.performShutdown.bind(this.parentAdmin));",
    "            $(\"#toggleServiceOut\").off(\"click\");",
    "            $(\"#toggleServiceOut\").on(\"click\", this.parentAdmin.performToggleServiceOut.bind(this.parentAdmin));",
    "            $(\"#resetMetrics\").off(\"click\");",
    "            $(\"#resetMetrics\").on(\"click\", this.parentAdmin.performResetMetrics.bind(this.parentAdmin));",
    "            $(\"#createSnapshot\").off(\"click\");",
    "            $(\"#createSnapshot\").on(\"click\", this.parentAdmin.performCreateSnapshot.bind(this.parentAdmin));",
    "            $(\"#toggleBind\").off(\"click\");",
    "            $(\"#toggleBind\").on(\"click\", this.parentAdmin.performToggleBind.bind(this.parentAdmin));",
    "            $(\"#toggleTTL\").off(\"click\");",
    "            $(\"#toggleTTL\").on(\"click\", this.parentAdmin.performToggleTTL.bind(this.parentAdmin));",
    "            $(\"#syncSubscribers\").off(\"click\");",
    "            $(\"#syncSubscribers\").on(\"click\", this.parentAdmin.performSyncSubscribers.bind(this.parentAdmin));",
    "            $(\"#toggleStreamTxInput\").off(\"click\");",
    "            $(\"#toggleStreamTxInput\").on(\"click\", this.parentAdmin.performToggleStreamTxInput.bind(this.parentAdmin));",
    "            $(\"#toggleStreamTxOutput\").off(\"click\");",
    "            $(\"#toggleStreamTxOutput\").on(\"click\", this.parentAdmin.performToggleStreamTxOutput.bind(this.parentAdmin));",
    "            $(\"#truncateAll\").off(\"click\");",
    "            $(\"#truncateAll\").on(\"click\", this.parentAdmin.performTruncate.bind(this.parentAdmin));",
    "            $(\"#toggleReadonly\").off(\"click\");",
    "            $(\"#toggleReadonly\").on(\"click\", this.parentAdmin.performToggleReadonly.bind(this.parentAdmin));",
    "            $(\"#detachAll\").off(\"click\");",
    "            $(\"#detachAll\").on(\"click\", this.parentAdmin.performDetachAll.bind(this.parentAdmin));",
    "        }",
    "",
    "",
    "        getAuthToken() {",
    "            $.get(\"/vgx/builtin/ADMIN_GetAuthToken\", function (data, textStatus, jqXHR) {",
    "                let response = null;",
    "                try {",
    "                    response = data[\"response\"];",
    "                    this.authToken = response[\"authtoken\"];",
    "                    this.auth_t0 = response[\"t0\"];",
    "                    this.auth_tx = response[\"tx\"];",
    "",
    "                    // Enable local actions",
    "                    this.enableLocalActions();",
    "",
    "                    // Set callback for when a row is selected",
    "                    $('.select_subscriber').off(\"change\");",
    "                    $('.select_subscriber').on(\"change\", this.peers.selectSubscriber.bind(this.peers));",
    "",
    "                    // Deauthorizer",
    "                    const t_local = Date.now() / 1000;",
    "                    this.auth_t_server_minus_t_local = this.auth_t0 - t_local;",
    "                    const authRemain = this.auth_tx - this.auth_t0;",
    "                    $('#armRemain').val(Math.round(authRemain));",
    "                    this.lampSafe(false);",
    "                    this.startDeauthorizer(100);",
    "                }",
    "                catch (error) {",
    "                    Message.display( error + \" \" + JSON.stringify(jqXHR, null, 2), true );",
    "                }",
    "                finally {",
    "                    $('#mainBody').removeClass(\"loading\");",
    "                    $('#busymsg').html(\"\");",
    "                }",
    "            }.bind(this)).fail(function (xhr, txt, err) {",
    "                Message.display( txt + \" \" + JSON.stringify(xhr, null, 2), true );",
    "                $('#mainBody').removeClass(\"loading\");",
    "                $('#busymsg').html(\"\");",
    "            });",
    "        }",
    "",
    "",
    "        armActionEvents() {",
    "            // Enable row radio buttons",
    "            $('.select_subscriber').prop(\"disabled\", false);",
    "            // Get auth token from server, which will continue the arming if successful",
    "            $('#mainBody').addClass(\"loading\");",
    "            $('#busymsg').html(\"Authorizing...\");",
    "            setTimeout(this.getAuthToken.bind(this), 333);",
    "        }",
    "",
    "",
    "        arm() {",
    "            $('#armAction').val(this.size);",
    "            this.detectArm();",
    "        }",
    "",
    "",
    "        disarm() {",
    "            $('#armAction').val(0);",
    "            this.detectArm();",
    "        }",
    "",
    "",
    "        toggle() {",
    "            if ($('#armAction').val() == 0) {",
    "                this.arm();",
    "            }",
    "            else {",
    "                this.disarm();",
    "            }",
    "        }",
    "",
    "",
    "        startDeauthorizer(interval) {",
    "            if (this.deauthorizer != null) {",
    "                clearInterval(this.deauthorizer);",
    "                this.deauthorizer = null;",
    "            }",
    "            if (interval > 0) {",
    "                this.deauthorizer = setInterval(this.decrementArm.bind(this), interval);",
    "            }",
    "        }",
    "",
    "",
    "        disableLocalActions() {",
    "            $(\".localactn\").prop(\"disabled\", true);",
    "            $(\".localactn\").addClass(\"disabled\");",
    "        }",
    "",
    "",
    "        disarmActionEvents() {",
    "            // Delete authtoken",
    "            this.authToken = null;",
    "            this.auth_t0 = 0.0;",
    "            this.auth_tx = 0.0;",
    "            $('#authToken').html(\"\");",
    "",
    "            // Disable local actions",
    "            this.disableLocalActions();",
    "",
    "            // Disable all action buttons",
    "            $('.subactn button').prop(\"disabled\", true);",
    "            $('.subactn button').addClass(\"disabled\");",
    "            // Disable row selector",
    "            $('.select_subscriber').prop(\"disabled\", true);",
    "            $('.select_subscriber').prop(\"checked\", false);",
    "            $('.select_subscriber').off(\"change\");",
    "",
    "            // Remove any row highlight",
    "            $('.subscriber_row').removeClass(\"highlight\");",
    "            $('.subscriber_row').removeClass(\"hoverlight\");",
    "",
    "            // Reset to safe",
    "            $('#armRemain').val(0);",
    "            this.lampSafe(true);",
    "        }",
    "",
    "",
    "        decrementArm() {",
    "            const value = $('#armAction').val();",
    "            if (this.armActionArmed == true && value > 0) {",
    "                const t_local = Date.now() / 1000;",
    "                const t_server = this.auth_t_server_minus_t_local + t_local;",
    "                const authRemain = this.auth_tx - t_server;",
    "                const authInterval = this.auth_tx - this.auth_t0;",
    "                const authValue = Math.round(this.armSize * authRemain / authInterval);",
    "                $('#armAction').val(authValue - 1);",
    "                $('#armRemain').val(Math.round(authRemain));",
    "                this.detectArm();",
    "            }",
    "        }",
    "",
    "",
    "        detectArm() {",
    "            const value = $('#armAction').val();",
    "            if (value == this.armSize) {",
    "                this.armActionArmed = true;",
    "                this.armActionEvents();",
    "            }",
    "            else if (value == 0) {",
    "                this.armActionArmed = false;",
    "                this.disarmActionEvents();",
    "                this.startDeauthorizer(-1);",
    "            }",
    "        }",
    "    }",
    "",
    "",
    "",
    "    class Admin {",
    "",
    "        authorizer = null;",
    "        peers = null;",
    "",
    "",
    "        constructor(auth) {",
    "            this.authorizer = new Authorizer(this);",
    "        }",
    "",
    "",
    "        registerPeers(peers) {",
    "            this.peers = peers;",
    "            this.authorizer.registerPeers(peers);",
    "            this.authorizer.disarm();",
    "        }",
    "",
    "",
    "        handle(data, command, reAuth) {",
    "            let message = \"\";",
    "            let isErr = false;",
    "            const response = data[\"response\"];",
    "            try {",
    "                if (response == null) {",
    "                    if (data[\"status\"] == \"ERROR\") {",
    "                        const data_message = data[\"message\"];",
    "                        if (data_message) {",
    "                            const plugin_message = data_message[\"plugin\"];",
    "                            if (plugin_message) {",
    "                                throw \"\" + plugin_message[\"exception\"] + \" \" + plugin_message[\"value\"];",
    "                            }",
    "                            const vgx_message = data_message[\"vgx\"];",
    "                            if (vgx_message) {",
    "                                throw \"\" + vgx_message[\"exception\"] + \" \" + vgx_message[\"value\"];",
    "                            }",
    "                            throw JSON.stringify(data_message, null, 2);",
    "                        }",
    "                        throw JSON.stringify(data, null, 2);",
    "                    }",
    "                    throw \"Empty response\";",
    "                }",
    "                message = JSON.stringify(response, null, 2);",
    "                if (typeof response != \"object\") {",
    "                    throw message",
    "                }",
    "            }",
    "            catch (error) {",
    "                message = \"\" + error;",
    "                isErr = true;",
    "            }",
    "            finally {",
    "                this.peers.refreshAll(reAuth);",
    "                GraphSum.refresh();",
    "                Message.display( message, isErr );",
    "                setTimeout(function () {",
    "                    $('#busymsg').html(\"\");",
    "                    $('#mainBody').removeClass(\"loading\");",
    "                }, 2000);",
    "                if (!reAuth) {",
    "                    this.authorizer.disarm();",
    "                }",
    "            }",
    "        }",
    "",
    "",
    "        execute(command, parameters, reAuth) {",
    "            let uri = \"/vgx/builtin/\" + command + \"?authtoken=\" + this.authorizer.token;",
    "            if (parameters) {",
    "                for (var key in parameters) {",
    "                    uri += \"&\" + key + \"=\" + parameters[key];",
    "                }",
    "            }",
    "            $('#mainBody').addClass(\"loading\");",
    "            $('#busymsg').html(command);",
    "            $.get(uri, function (data, textStatus, jqXHR) {",
    "                this.handle(data, command, reAuth);",
    "            }.bind(this)).fail(function (xhr, txt, err) {",
    "                let msg = null;",
    "                try {",
    "                    msg = xhr.responseJSON['message']['plugin']['value'];",
    "                }",
    "                catch(error) {",
    "                }",
    "                if (msg === \"Invalid authtoken\" || msg === \"Expired authtoken\") {",
    "                    this.authorizer.disarm();",
    "                    this.authorizer.arm();",
    "                    Message.display( \"Authtoken refused, retry operation\", true );",
    "                }",
    "                else {",
    "                    Message.display( txt + \" \" + JSON.stringify(xhr, null, 2), true );",
    "                }",
    "                $('#mainBody').removeClass(\"loading\");",
    "                $('#busymsg').html(\"\");",
    "            }.bind(this));",
    "        }",
    "",
    "",
    "        performUnsubscribe(eventObj) {",
    "            this.execute(\"ADMIN_Unsubscribe\", null, true);",
    "        }",
    "",
    "",
    "        performSubscribe(eventObj) {",
    "            const data = eventObj[\"data\"];",
    "            const host= $(data[\"hostElem\"]).val();",
    "            const port= $(data[\"portElem\"]).val();",
    "            const subURI = \"vgx://\" + host + \":\" + port;",
    "            this.execute(\"ADMIN_Subscribe\", { \"uri\": subURI, \"hardsync\": 1, \"timeout\": 30000 }, true);",
    "        }",
    "",
    "",
    "        performDetach(eventObj) {",
    "            const data = eventObj[\"data\"];",
    "            const host = $(data[\"hostElem\"]).val();",
    "            const port = $(data[\"portElem\"]).val();",
    "            const subURI = \"vgx://\" + host + \":\" + port;",
    "            this.execute(\"ADMIN_Detach\", { \"uri\": subURI }, true);",
    "        }",
    "",
    "",
    "        performAttach(eventObj) {",
    "            const data = eventObj[\"data\"];",
    "            const host = $(data[\"hostElem\"]).val();",
    "            const port = $(data[\"portElem\"]).val();",
    "            const subURI = \"vgx://\" + host + \":\" + port;",
    "            this.execute(\"ADMIN_Attach\", { \"uri\": subURI }, true);",
    "        }",
    "",
    "",
    "        performToggleServiceOut(eventObj) {",
    "            $.get(\"/vgx/status\", function (data, textStatus, jqXHR) {",
    "                const response = data[\"response\"];",
    "                const serving = response[\"request\"][\"serving\"];",
    "                if (serving > 0) {",
    "                    const rate = Math.round( response[\"request\"][\"rate\"] );",
    "                    const confirmRate = prompt(\"Enter \" + rate + \" to confirm Service Out\", \"rate\");",
    "                    if( confirmRate != null ) {",
    "                        const rex = /^(\\d+)$/;",
    "                        const match = rex.exec(confirmRate);",
    "                        if (match != null) {",
    "                            const r = parseInt(match[1]);",
    "                            if (r === rate) {",
    "                                this.execute(\"ADMIN_ServiceOut\", {}, true);",
    "                            }",
    "                            else {",
    "                                Message.display( \"Service Out request rejected: rate mismatch\", true );",
    "                            }",
    "                        }",
    "                        else {",
    "                            Message.display( \"Confirm Service Out by typing current &lt;rate&gt;\", false );",
    "                        }",
    "                    }",
    "                }",
    "                else {",
    "                    this.execute(\"ADMIN_ServiceIn\", {}, true);",
    "                }",
    "            }.bind(this));",
    "        }",
    "",
    "",
    "        performResetMetrics(eventObj) {",
    "            this.execute(\"ADMIN_ResetMetrics\", {}, true);",
    "        }",
    "",
    "",
    "        performCreateSnapshot(eventObj) {",
    "            this.execute(\"ADMIN_Persist\", {}, false);",
    "        }",
    "",
    "",
    "        performToggleBind(eventObj) {",
    "            $.get(\"/vgx/peerstat\", function (data, textStatus, jqXHR) {",
    "                const response = data[\"response\"];",
    "                const bindPort = response[\"port\"];",
    "                if (bindPort == 0) {",
    "                    const portStr = prompt(\"Bind Port\", \"port:durable\");",
    "                    if (portStr != null) {",
    "                        const rex = /^(\\d+)(:(\\S+))?$/;",
    "                        const match = rex.exec(portStr);",
    "                        if (match != null) {",
    "                            const port = parseInt(match[1]);",
    "                            const durable = match[3] === 'durable' ? 1 : 0;",
    "                            if (port < 1024 || port > 65535) {",
    "                                Message.display( \"Invalid bind port\", true );",
    "                            }",
    "                            else {",
    "                                this.execute(\"ADMIN_Bind\", { \"port\": port, \"durable\": durable }, true);",
    "                            }",
    "                        }",
    "                        else {",
    "                            Message.display( \"Use bind format &lt;port&gt;[:durable]\", false );",
    "                        }",
    "                    }",
    "                }",
    "                else {",
    "                    this.execute(\"ADMIN_Unbind\", {}, true);",
    "                }",
    "            }.bind(this));",
    "        }",
    "",
    "",
    "        performToggleTTL(eventObj) {",
    "            $.get(\"/vgx/peerstat\", function (data, textStatus, jqXHR) {",
    "                const response = data[\"response\"];",
    "                const events = response[\"events\"];",
    "                const events_running = response[\"events-running\"];",
    "                if (events == true) {",
    "                    if (events_running == true) {",
    "                        this.execute(\"ADMIN_SuspendEvents\", {}, true);",
    "                    }",
    "                    else {",
    "                        this.execute(\"ADMIN_ResumeEvents\", {}, true);",
    "                    }",
    "                }",
    "            }.bind(this));",
    "        }",
    "",
    "",
    "        performToggleStreamTxInput(eventObj) {",
    "            $.get(\"/vgx/txstat\", function (data, textStatus, jqXHR) {",
    "                const response = data[\"response\"];",
    "                const halted_in = response[\"halted\"][\"in\"];",
    "                if( halted_in == true ) {",
    "                    this.execute(\"ADMIN_ResumeTxInput\", {}, true);",
    "                }",
    "                else {",
    "                    this.execute(\"ADMIN_SuspendTxInput\", {}, true);",
    "                }",
    "            }.bind(this));",
    "        }",
    "",
    "",
    "        performToggleStreamTxOutput(eventObj) {",
    "            $.get(\"/vgx/txstat\", function (data, textStatus, jqXHR) {",
    "                const response = data[\"response\"];",
    "                const halted_out = response[\"halted\"][\"out\"];",
    "                if( halted_out == true ) {",
    "                    this.execute(\"ADMIN_ResumeTxOutput\", {}, true);",
    "                }",
    "                else {",
    "                    this.execute(\"ADMIN_SuspendTxOutput\", {}, true);",
    "                }",
    "            }.bind(this));",
    "        }",
    "",
    "",
    "        performTruncate(eventObj) {",
    "            $.get(\"/vgx/graphsum\", function (data, textStatus, jqXHR) {",
    "                const response = data[\"response\"];",
    "",
    "                const order = response[\"graphsum\"][\"order\"];",
    "                const size = response[\"graphsum\"][\"size\"];",
    "",
    "                const confirmOrderSize = prompt(\"Enter \" + order + \":\" + size + \" to confirm Truncate\", \"order:size\");",
    "                if( confirmOrderSize != null ) {",
    "                    const rex = /^(\\d+):(\\d+)$/;",
    "                    const match = rex.exec(confirmOrderSize);",
    "                    if (match != null) {",
    "                        const o = parseInt(match[1]);",
    "                        const s = parseInt(match[2]);",
    "                        if (o === order && s === size) {",
    "                            this.execute(\"ADMIN_Truncate\", {}, false);",
    "                        }",
    "                        else {",
    "                            Message.display( \"Truncate request rejected: order/size mismatch\", true );",
    "                        }",
    "                    }",
    "                    else {",
    "                        Message.display( \"Confirm truncate by typing current &lt;order&gt;:&lt;durable&gt;\", false );",
    "                    }",
    "                }",
    "            }.bind(this));",
    "        }",
    "",
    "",
    "        performToggleReadonly(eventObj) {",
    "            $.get(\"/vgx/peerstat\", function (data, textStatus, jqXHR) {",
    "                const response = data[\"response\"];",
    "                const readonly = response[\"readonly\"];",
    "                if( readonly == true ) {",
    "                    this.execute(\"ADMIN_ClearReadonly\", {}, true);",
    "                }",
    "                else {",
    "                    this.execute(\"ADMIN_SetReadonly\", {}, true);",
    "                }",
    "            }.bind(this));",
    "        }",
    "",
    "",
    "        performDetachAll(eventObj) {",
    "            $.get(\"/vgx/peerstat\", function (data, textStatus, jqXHR) {",
    "                const response = data[\"response\"];",
    "                const subscribers = response[\"subscribers\"];",
    "                const lengthStr = prompt(\"Type \" + subscribers.length + \" to confirm Detach All\", \"subscribers\");",
    "                if( lengthStr != null ) {",
    "                    const rex = /^(\\d+)$/;",
    "                    const match = rex.exec(lengthStr);",
    "                    if (match != null) {",
    "                        const s = parseInt(match[1]);",
    "                        if (s === subscribers.length) {",
    "                            this.execute(\"ADMIN_DetachAll\", {}, false);",
    "                        }",
    "                        else {",
    "                            Message.display( \"Subscribers mismatch\", true );",
    "                        }",
    "                    }",
    "                    else {",
    "                        Message.display( \"Type number of &lt;subscribers&gt; to confirm Detach All\", false );",
    "                    }",
    "                }",
    "            }.bind(this));",
    "        }",
    "",
    "",
    "        performSyncSubscribers(eventObj) {",
    "            const syncMode = prompt(\"Enter soft or hard sync\", \"repair/soft/hard\");",
    "            if (syncMode === \"repair\" || syncMode === \"soft\" || syncMode === \"hard\") {",
    "                this.execute(\"ADMIN_Sync\", { \"mode\": syncMode }, false);",
    "                let substat = $('#subscribers').find(\".substat input\");",
    "                substat.val(\"Sync\");",
    "            }",
    "            else {",
    "                Message.display( \"Invalid sync mode specified\", true );",
    "            }",
    "        }",
    "",
    "",
    "        performShutdown(eventObj) {",
    "            const auth0 = this.authorizer.token;",
    "            const token = auth0.slice(0,6);",
    "            this.authorizer.getAuthToken();",
    "",
    "            $.get(\"/vgx/graphsum\", function (data, textStatus, jqXHR) {",
    "                const response = data[\"response\"];",
    "",
    "                const order = response[\"graphsum\"][\"order\"];",
    "                const size = response[\"graphsum\"][\"size\"];",
    "",
    "                const confirmOrderSize = prompt(\"VGX Server Shutdown? Enter \" + order + \":\" + size + \" to proceed.\", \"order:size\");",
    "                if( confirmOrderSize != null ) {",
    "                    const rex = /^(\\d+):(\\d+)$/;",
    "                    const match = rex.exec(confirmOrderSize);",
    "                    if (match != null) {",
    "                        const o = parseInt(match[1]);",
    "                        const s = parseInt(match[2]);",
    "                        if (o === order && s === size) {",
    "                            const confirmToken = prompt( \"Enter token \" + token + \" to confirm VGX Server Shutdown.\" );",
    "                            if( confirmToken === token ) {",
    "                                this.execute(\"ADMIN_Shutdown\", {'authshutdown':auth0}, false);",
    "                            }",
    "                            else if( confirmToken != null ) {",
    "                                Message.display( \"Shutdown request rejected: incorrect token\", true );",
    "                            }",
    "                        }",
    "                        else {",
    "                            Message.display( \"Shutdown request rejected: order/size mismatch\", true );",
    "                        }",
    "                    }",
    "                    else {",
    "                        Message.display( \"Confirm shutdown by typing current &lt;order&gt;:&lt;durable&gt;\", false );",
    "                    }",
    "                }",
    "            }.bind(this));",
    "        }",
    "",
    "    }",
    "",
    "",
    "",
    "    class Uptime {",
    "        refresher = null;",
    "",
    "        constructor() {",
    "            this.refresher = new UptimeRefresher('nodeStateUptime', function () {",
    "                BoxState.neutral('#nodeStateUptime');",
    "            }, function (err) {",
    "                Message.display( \"\" );",
    "                $('#nodeState').find(\"input\").val(\"\");",
    "                $('#nodeStateIdentityStatus').val(\"Down\");",
    "                BoxState.exception('#message');",
    "                BoxState.exception('#nodeStateIdentityStatus');",
    "                BoxState.attention('#nodeStateUptime');",
    "                $(\".localactn\").css(\"display\", \"none\");",
    "                $('#providerArea').css(\"display\", \"none\");",
    "                $('#subscribersArea').css(\"display\", \"none\");",
    "            });",
    "",
    "            BoxState.neutral('#nodeStateUptime');",
    "        }",
    "",
    "",
    "        start() {",
    "            this.refresher.start();",
    "        }",
    "    }",
    "",
    "",
    "",
    "    class QueryMetrics {",
    "        lastQPS = 0.0;",
    "        lastAvgLat = 0.0;",
    "        lastPctLat = 0.0;",
    "        lastExecutors = 0.0;",
    "        lastWorking = 0.0;",
    "        lastWaiting = 0.0;",
    "",
    "        updater = null;",
    "",
    "        update() {",
    "            $.get(\"/vgx/status\", function (data, textStatus, jqXHR) {",
    "                const response = data[\"response\"];",
    "                const request = response[\"request\"];",
    "                const service_in = request[\"serving\"] > 0 ? true : false;",
    "                let rateBox = $('#nodeStateRequestRate');",
    "                let latencyBox = $('#nodeStateQueryLatency');",
    "                if (service_in) {",
    "                    const qps = parseFloat(request[\"rate\"]);",
    "                    const avg_latency = parseFloat(response[\"response_ms\"][\"mean\"]);",
    "                    const pct_latency = parseFloat(response[\"response_ms\"][\"99.0\"]);",
    "                    const executors = parseInt( request[\"executors\"] );",
    "                    const working = parseInt( request[\"working\"] );",
    "                    const waiting = parseInt( request[\"waiting\"] );",
    "                    let alpha = 0.5;",
    "                    this.lastQPS = this.lastQPS > 0 ? (alpha * this.lastQPS + (1 - alpha) * qps) : qps;",
    "                    this.lastAvgLat = this.lastAvgLat > 0 ? (alpha * this.lastAvgLat + (1 - alpha) * avg_latency) : avg_latency;",
    "                    this.lastPctLat = this.lastPctLat > 0 ? (alpha * this.lastPctLat + (1 - alpha) * pct_latency) : pct_latency;",
    "                    alpha = 0.8;",
    "                    this.lastExecutors = (alpha * this.lastExecutors + (1 - alpha) * executors);",
    "                    this.lastWorking = (alpha * this.lastWorking + (1 - alpha) * working);",
    "                    this.lastWaiting = (alpha * this.lastWaiting + (1 - alpha) * waiting);",
    "                    const qpsStr = Math.round(this.lastQPS).toLocaleString(\"en-US\") + \" qps\";",
    "                    const latStr = Math.round(this.lastAvgLat) + \"/\" + Math.round(this.lastPctLat) + \" ms\";",
    "                    rateBox.val(qpsStr);",
    "                    latencyBox.val(latStr);",
    "",
    "                    if( this.lastWorking < this.lastExecutors ) {",
    "                        BoxState.optimal( rateBox );",
    "                        BoxState.optimal( latencyBox );",
    "                    }",
    "                    else if( this.lastWaiting < this.lastWorking * 2 ) {",
    "                        BoxState.attention( rateBox );",
    "                        BoxState.attention( latencyBox );",
    "                    }",
    "                    else {",
    "                        BoxState.exception( rateBox );",
    "                        BoxState.exception( latencyBox );",
    "                    }",
    "",
    "                }",
    "                else {",
    "                    rateBox.val(\"-\");",
    "                    latencyBox.val(\"Service OUT\");",
    "                    BoxState.attention( rateBox );",
    "                    BoxState.exception( latencyBox );",
    "                }",
    "",
    "            }.bind(this));",
    "        }",
    "",
    "",
    "        stop() {",
    "            if (this.updater) {",
    "                clearInterval(this.updater);",
    "                this.updater = null;",
    "            }",
    "        }",
    "",
    "",
    "        start() {",
    "            this.stop();",
    "            this.updater = setInterval(this.update.bind(this), 2000);",
    "            this.update();",
    "        }",
    "",
    "    }",
    "",
    "",
    "",
    "",
    "    class Page {",
    "",
    "        refresher = null;",
    "        static refresh_interval = 233;",
    "        static peer_multiple = 5;",
    "        static graph_multiple = 3;",
    "        static mem_multiple = 7;",
    "        static plugin_multiple = 11;",
    "",
    "        constructor(admin, peers) {",
    "            $('.nodeStateArea input').prop(\"disabled\", true);",
    "            $('.nodeStateArea input').addClass(\"disable_select\");",
    "            GraphSum.refresh();",
    "            Meminfo.refresh();",
    "            this.admin = admin;",
    "            this.peers = peers;",
    "            this.peer_countdown = Page.peer_multiple;",
    "            this.graph_countdown = Page.graph_multiple;",
    "            this.mem_countdown = Page.mem_multiple;",
    "            this.plugin_countdown = 0;",
    "        }",
    "",
    "        async getServerMode() {",
    "            const data = await new Promise((resolve, reject) => {",
    "                $.get(\"/vgx/status\", function (data) {",
    "                    resolve(data);",
    "                }).fail( function (jqXHR, textStatus, errorThrown) {",
    "                    reject(errorThrown);",
    "                });",
    "            });",
    "            const has_matrix = data?.response?.dispatcher?.enabled;",
    "            if (has_matrix) {",
    "                return \"matrix\";",
    "            }",
    "            else {",
    "                return \"engine\";",
    "            }",
    "        }",
    "",
    "",
    "        async refresh() {",
    "            this.peer_countdown -= 1;",
    "            this.graph_countdown -= 1;",
    "            this.mem_countdown -= 1;",
    "            this.plugin_countdown -= 1;",
    "            if( this.peer_countdown <= 0 ) {",
    "                const selectedSubId = $('.select_subscriber:checked').val();",
    "                if( typeof selectedSubId != \"string\" ) {",
    "                    this.peers.refreshAll(false);",
    "                }",
    "                this.peer_countdown = Page.peer_multiple;",
    "            }",
    "            if( this.graph_countdown <= 0 ) {",
    "                GraphSum.refresh();",
    "                this.graph_countdown = Page.graph_multiple;",
    "            }",
    "            if( this.mem_countdown <= 0 ) {",
    "                Meminfo.refresh();",
    "                this.mem_countdown = Page.mem_multiple;",
    "            }",
    "            if( this.plugin_countdown <= 0 ) {",
    "                PluginInfo.refresh( await this.getServerMode() );",
    "                this.plugin_countdown = Page.plugin_multiple;",
    "            }",
    "        }",
    "",
    "",
    "        stop() {",
    "            if (this.refresher != null) {",
    "                clearInterval(this.refresher);",
    "                this.refresher = null;",
    "            }",
    "        }",
    "",
    "",
    "        start() {",
    "            this.stop();",
    "            this.refresher = setInterval(this.refresh.bind(this), Page.refresh_interval);",
    "        }",
    "    }",
    "",
    "",
    "",
    "    function main() {",
    "",
    "        let uptime = new Uptime();",
    "        uptime.start();",
    "",
    "        let admin = new Admin();",
    "",
    "        let queryMetrics = new QueryMetrics();",
    "        queryMetrics.start();",
    "",
    "        let transactionIO = new TransactionIO();",
    "        transactionIO.start();",
    "",
    "        let peers = new Peers(admin, transactionIO);",
    "        admin.registerPeers(peers);",
    "        peers.refreshAll(false);",
    "",
    "        let page = new Page(admin, peers);",
    "        page.start();",
    "",
    "        Message.display( \"\", false );",
    "",
    "    }",
    "",
    "    CommonHeader.ready(main, 12);",
    "</script>",
    "</html>",
    "",
    0
};



const char *VGX_BUILTIN_HTML_console[] = {
    "<!DOCTYPE html>",
    "<!--",
    "",
    "  VGX Server",
    "  Distributed engine for plugin-based graph and vector search",
    "",
    "  Module:  vgx",
    "  File:    console.html",
    "  Author:  Stian Lysne <...>",
    "",
    "  Copyright Â© 2025 Rakuten, Inc.",
    "",
    "  Licensed under the Apache License, Version 2.0 (the \"License\");",
    "  you may not use this file except in compliance with the License.",
    "  You may obtain a copy of the License at",
    "",
    "      http://www.apache.org/licenses/LICENSE-2.0",
    "",
    "  Unless required by applicable law or agreed to in writing, software",
    "  distributed under the License is distributed on an \"AS IS\" BASIS,",
    "  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
    "  See the License for the specific language governing permissions and",
    "  limitations under the License.",
    "",
    "-->",
    "",
    "<html>",
    "<head>",
    "    <title>VGX Console</title>",
    "    <script src=\"jquery.js\"></script>",
    "    <script src=\"header.js\"></script>",
    "    <link rel=\"stylesheet\" href=\"vgx.css\">",
    "</head>",
    "<body class=\"disable_select\">",
    "    <div>",
    "        <div id=\"commonHeaderDiv\"></div>",
    "",
    "        <div class=\"container\">",
    "            <table id=\"editsetup\">",
    "                <tr id=\"graph\" class=\"inputrow\">",
    "                    <td class=\"col1\">",
    "                        Graph:",
    "                    </td>",
    "                    <td class=\"col2\">",
    "                        <select name=\"graphlist\" id=\"graphlist\">",
    "                        </select>",
    "                        <label for=\"order\">Order: <span class=\"val vint\" id=\"order\"></span></label>",
    "                        <label for=\"size\">Size: <span class=\"val vint\" id=\"size\"></span></label>",
    "                    </td>",
    "                </tr>",
    "                <tr id=\"action_box\" class=\"inputrow\">",
    "                    <td class=\"col1\" colspan=\"2\">",
    "                        <pre><textarea id=\"inputtext\" name=\"action\" rows=3 spellcheck=\"false\"></textarea></pre>",
    "                    </td>",
    "                </tr>",
    "                <tr id=\"execute\" class=\"inputrow\">",
    "                    <td class=\"col1\" colspan=\"2\">",
    "                        <button id=\"submit\" type=\"button\">Execute</button>",
    "                    </td>",
    "                </tr>",
    "                <tr id=\"simple_output\" class=\"outputrow\">",
    "                    <td class=\"col1\" colspan=\"2\">",
    "                        <pre><textarea id=\"result\" name=\"result\" rows=1 spellcheck=\"false\" readonly=readonly></textarea></pre>",
    "                    </td>",
    "                </tr>",
    "            </table>",
    "            <div id=\"message_box\">",
    "                <pre><div class=\"area\" id=\"infotext\"></div></pre>",
    "                <pre><div class=\"area\" id=\"errortext\"></div></pre>",
    "            </div>",
    "        </div>",
    "",
    "        <div id=\"commonFooterDiv\"></div>",
    "    </div>",
    "</body>",
    "</html>",
    "",
    "<style>",
    "",
    "    #result_box.loading .modal {",
    "        display: block;",
    "    }",
    "",
    "    #executearrow {",
    "        text-align: right;",
    "    }",
    "",
    "    #editsetup {",
    "        border-spacing: 0px;",
    "    }",
    "",
    "    #editsetup tbody {",
    "        border-spacing: 0px;",
    "    }",
    "",
    "    #editsetup tr {",
    "        display: block;",
    "        margin-bottom: 10px;",
    "    }",
    "",
    "    #editsetup td {",
    "        font-size: 100%;",
    "        padding-left: 0px;",
    "    }",
    "",
    "    .col1 {",
    "        min-width: 60px;",
    "        max-width: 60px;",
    "        vertical-align: top;",
    "    }",
    "",
    "    .col2 {",
    "        min-width: 735px;",
    "        max-width: 735px;",
    "    }",
    "",
    "    button {",
    "        cursor: pointer;",
    "    }",
    "",
    "    #submit {",
    "        width: 90px;",
    "        font-weight: bold;",
    "        margin-right: 20px;",
    "    }",
    "",
    "    #execute {",
    "        margin-top: 15px !important;",
    "        margin-bottom: 15px !important;",
    "        height: 30px;",
    "    }",
    "",
    "    #inputtext {",
    "        font-family: Consolas, monospace;",
    "        font-size: 100%;",
    "        font-weight: bold;",
    "        background-color: #FFFFFF;",
    "        border: 1px solid #CCCCCC;",
    "        outline: none;",
    "        min-width: 730px;",
    "        min-height: 100px;",
    "    }",
    "",
    "    #result {",
    "        font-family: Consolas, monospace;",
    "        font-size: 100%;",
    "        font-weight: bold;",
    "        background-color: #F8F8F8;",
    "        border: 1px solid #CCCCCC;",
    "        outline: none;",
    "        margin-bottom: 30px;",
    "        min-width: 730px;",
    "        min-height: 100px;",
    "    }",
    "",
    "    select {",
    "        margin-right: 10px;",
    "    }",
    "",
    "    label {",
    "        margin-right: 0px;",
    "    }",
    "",
    "    .area {",
    "        min-width: 800px;",
    "        max-width: 800px;",
    "    }",
    "",
    "    .val {",
    "        padding-right: 10px;",
    "        text-align: right;",
    "        font-family: Consolas, monospace;",
    "        font-size: 90%;",
    "    }",
    "",
    "    .vint {",
    "        color: #0000C0;",
    "    }",
    "",
    "    .vstr {",
    "        color: #007050;",
    "    }",
    "",
    "    .faded {",
    "        color: #C0C0C0;",
    "    }",
    "</style>",
    "",
    "<script>",
    "",
    "    function main() {",
    "",
    "        let autoRefresher = null;",
    "",
    "        $.get(\"/vgx/graphsum\", function (data, textStatus, jqXHR) {",
    "            const names = data[\"response\"][\"graphsum\"][\"names\"];",
    "            let opt = null;",
    "            let first = null;",
    "            for (var i = 0; i < names.length; i++) {",
    "                opt = document.createElement(\"option\");",
    "                opt.value = names[i];",
    "                if (first == null) {",
    "                    first = names[i];",
    "                }",
    "                opt.innerHTML = names[i];",
    "                $('#graphlist').append(opt);",
    "            }",
    "            opt = document.createElement(\"option\");",
    "            opt.value = \"system\";",
    "            if (first == null) {",
    "                first = \"system\";",
    "            }",
    "            opt.innerHTML = \"_system\";",
    "            $('#graphlist').append(opt);",
    "            $('#graphlist').val(first).change();",
    "        });",
    "",
    "        let previousOrder = 0;",
    "        let previousSize = 0;",
    "        let graphUpdater = null;",
    "        function updateGraphInfo() {",
    "            const graph = $('#graphlist').find(':selected').val();",
    "            const url = \"/vgx/builtin/status?simple=1&graph=\" + graph;",
    "            if (graph == null) {",
    "                return;",
    "            }",
    "            $.get(url, function (data, textStatus, jqXHR) {",
    "                let pause = 2000;",
    "                try {",
    "                    const base = data[\"response\"][\"base\"];",
    "                    const order = base[\"order\"];",
    "                    const size = base[\"size\"];",
    "                    $('#order').html(order.toLocaleString(\"en-US\"));",
    "                    $('#size').html(size.toLocaleString(\"en-US\"));",
    "                    if (order != previousOrder || size != previousSize) {",
    "                        previousOrder = order;",
    "                        previousSize = size;",
    "                        pause = 150;",
    "                    }",
    "                }",
    "                catch (error) {",
    "                }",
    "                finally {",
    "                    if (graphUpdater) {",
    "                        clearTimeout(graphUpdater);",
    "                    }",
    "                    graphUpdater = setTimeout(updateGraphInfo, pause);",
    "                }",
    "            }).fail(function (xhr, txt, err) {",
    "                if (graphUpdater) {",
    "                    clearTimeout(graphUpdater);",
    "                }",
    "                graphUpdater = setTimeout(updateGraphInfo, 5000);",
    "            });",
    "        }",
    "",
    "        function performAction() {",
    "            $('#submit').prop(\"disabled\", true);",
    "            $.get(\"/vgx/builtin/ADMIN_GetAuthToken\", function (data, textStatus, jqXHR) {",
    "                const authToken = data[\"response\"][\"authtoken\"];",
    "                const expression = $('#inputtext').val();",
    "                const graph = $('#graphlist').find(':selected').val();",
    "                if (graph == null) {",
    "                    return;",
    "                }",
    "                let url = \"/vgx/builtin/ADMIN_Console?graph=\" + graph + \"&authtoken=\" + authToken;",
    "",
    "                $.post(url, expression, function (data, textStatus, jqXHR) {",
    "                    let response = \"\";",
    "                    let message = \"\";",
    "",
    "                    try {",
    "                        const responseRaw = data[\"response\"];",
    "                        const exec_ms = parseFloat(data[\"exec_ms\"]);",
    "                        const messageRaw = data[\"message\"];",
    "                        if (responseRaw != null) {",
    "                            response = JSON.stringify(responseRaw, null, 4);",
    "                            $('#result').val(response);",
    "                        }",
    "                        else if (messageRaw != null) {",
    "                            message = JSON.stringify(messageRaw, null, 4);",
    "                        }",
    "                        else {",
    "                            message = data;",
    "                        }",
    "                        $('#errortext').html(message);",
    "                    }",
    "                    catch (error) {",
    "                        $('#errortext').html(error);",
    "                    }",
    "                    finally {",
    "                        $('#submit').prop(\"disabled\", false);",
    "                        updateGraphInfo();",
    "                    }",
    "                }, \"json\").fail(function (xhr, txt, err) {",
    "                    $('#submit').prop(\"disabled\", false);",
    "                    $('#result').val(\"\");",
    "                    $('#errortext').html(xhr[\"responseText\"] + \" | \" + txt + \" | \" + err);",
    "                });",
    "            }).fail(function (xhr, txt, err) {",
    "                $('#submit').prop(\"disabled\", false);",
    "                $('#result').val(\"\");",
    "                $('#errortext').html(xhr[\"responseText\"] + \" | \" + txt + \" | \" + err);",
    "            });",
    "        }",
    "",
    "        $('#graphlist').on(\"change\", updateGraphInfo);",
    "        $('#submit').click(performAction);",
    "",
    "        function submitOnEnter(event) {",
    "            if (event.key === \"Enter\") {",
    "                event.preventDefault();",
    "                document.getElementById(\"submit\").click();",
    "            }",
    "        };",
    "",
    "        function submitOnAltEnter(event) {",
    "            if (event.key === \"Enter\" && event.shiftKey) {",
    "                event.preventDefault();",
    "                document.getElementById(\"submit\").click();",
    "            }",
    "        };",
    "",
    "",
    "        document.getElementById(\"inputtext\").addEventListener(\"keypress\", submitOnAltEnter);",
    "",
    "",
    "        updateGraphInfo();",
    "",
    "        $('#inputtext').focus();",
    "    }",
    "",
    "    CommonHeader.ready(main, 10);",
    "</script>",
    "",
    0
};



const char *VGX_BUILTIN_HTML_footer[] = {
    "<!--",
    "",
    "  VGX Server",
    "  Distributed engine for plugin-based graph and vector search",
    "",
    "  Module:  vgx",
    "  File:    footer.html",
    "  Author:  Stian Lysne <...>",
    "",
    "  Copyright Â© 2025 Rakuten, Inc.",
    "",
    "  Licensed under the Apache License, Version 2.0 (the \"License\");",
    "  you may not use this file except in compliance with the License.",
    "  You may obtain a copy of the License at",
    "",
    "      http://www.apache.org/licenses/LICENSE-2.0",
    "",
    "  Unless required by applicable law or agreed to in writing, software",
    "  distributed under the License is distributed on an \"AS IS\" BASIS,",
    "  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
    "  See the License for the specific language governing permissions and",
    "  limitations under the License.",
    "",
    "-->",
    "",
    "<div>",
    "    <hr>",
    "    <span>%VERSION%</span>",
    "</div>",
    "",
    0
};



const char *VGX_BUILTIN_HTML_header[] = {
    "<!--",
    "",
    "  VGX Server",
    "  Distributed engine for plugin-based graph and vector search",
    "",
    "  Module:  vgx",
    "  File:    header.html",
    "  Author:  Stian Lysne <...>",
    "",
    "  Copyright Â© 2025 Rakuten, Inc.",
    "",
    "  Licensed under the Apache License, Version 2.0 (the \"License\");",
    "  you may not use this file except in compliance with the License.",
    "  You may obtain a copy of the License at",
    "",
    "      http://www.apache.org/licenses/LICENSE-2.0",
    "",
    "  Unless required by applicable law or agreed to in writing, software",
    "  distributed under the License is distributed on an \"AS IS\" BASIS,",
    "  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
    "  See the License for the specific language governing permissions and",
    "  limitations under the License.",
    "",
    "-->",
    "",
    "<div>",
    "    <hr>",
    "    <table id=\"commonHeaderTable\">",
    "        <tr>",
    "            <td id=\"logo\" rowspan=\"3\"><img id=\"logoimg\" src=\"logo_b-x.png\" alt=\"VGX\">",
    "            <td class=\"admininfo c1\"><b>Processor</b></td>",
    "            <td class=\"admininfo c2\"><span id=\"commonCPU\"></span></td>",
    "            <td class=\"admininfo c3\"><b>Memory</b></td>",
    "            <td class=\"admininfo c4\"><span id=\"commonMemoryMiB\"></span> MiB</td>",
    "            <td class=\"customLabel\" ></td>",
    "        </tr>",
    "        <tr>",
    "            <td class=\"admininfo c1\"><b>Host</b></td>",
    "            <td class=\"admininfo c2\"><span id=\"commonHostName\" class=\"enable_select\"></span></td>",
    "            <td class=\"admininfo c3\"><b>IP</b></td>",
    "            <td class=\"admininfo c4\"><span id=\"commonIP\" class=\"enable_select\"></span></td>",
    "            <td class=\"customLabel\" ><span id=\"pageLabel\"></span></td>",
    "        </tr>",
    "        <tr>",
    "            <td class=\"admininfo c1\"><b>Page</b> </td>",
    "            <td class=\"admininfo c2\"><span id=\"commonAdmin\"></span></td>",
    "            <td class=\"admininfo c3\"><b>Baseport</b> </td>",
    "            <td class=\"admininfo c4\"><span id=\"commonPort\"></span></td>",
    "            <td class=\"customLabel\" ></td>",
    "        </tr>",
    "    </table>",
    "    <hr>",
    "</div>",
    "",
    0
};



const char *VGX_BUILTIN_HTML_index[] = {
    "<!DOCTYPE html>",
    "<!--",
    "",
    "  VGX Server",
    "  Distributed engine for plugin-based graph and vector search",
    "",
    "  Module:  vgx",
    "  File:    index.html",
    "  Author:  Stian Lysne <...>",
    "",
    "  Copyright Â© 2025 Rakuten, Inc.",
    "",
    "  Licensed under the Apache License, Version 2.0 (the \"License\");",
    "  you may not use this file except in compliance with the License.",
    "  You may obtain a copy of the License at",
    "",
    "      http://www.apache.org/licenses/LICENSE-2.0",
    "",
    "  Unless required by applicable law or agreed to in writing, software",
    "  distributed under the License is distributed on an \"AS IS\" BASIS,",
    "  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
    "  See the License for the specific language governing permissions and",
    "  limitations under the License.",
    "",
    "-->",
    "",
    "<html>",
    "<head>",
    "    <title>VGX</title>",
    "    <script src=\"jquery.js\"></script>",
    "    <script src=\"header.js\"></script>",
    "    <script src=\"clock.js\"></script>",
    "    <link rel=\"stylesheet\" href=\"vgx.css\">",
    "</head>",
    "<body class=\"disable_select\">",
    "    <div style=\"margin: 8\">",
    "        <div id=\"commonHeaderDiv\"></div>",
    "",
    "        <div class=\"container\" id=\"mainBody\">",
    "            <table id=\"links\">",
    "                <tbody>",
    "                    <tr>",
    "                        <td class=\"admin category\">Local</td>",
    "                        <td class=\"empty\"><button class=\"link\" type=button style=\"visibility: hidden\"></button></td>",
    "                        <td class=\"empty\"><button class=\"link\" type=button style=\"visibility: hidden\"></button></td>",
    "                        <td class=\"empty\"><button class=\"link\" type=button style=\"visibility: hidden\"></button></td>",
    "                        <td class=\"empty\"><button class=\"link\" type=button style=\"visibility: hidden\"></button></td>",
    "                    </tr>",
    "                    <tr>",
    "                        <td class=\"admin infocell\" id=\"uptime\"><input class=\"disable_select\" type=\"text\" value=\"\"></td>",
    "                        <td class=\"admin\"><button class=\"link uilink\" type=button id=\"uiAdmin\" onclick=\"openSelfDelayed('/admin',75)\">Admin</button></td>",
    "                        <td class=\"admin\"><button class=\"link uilink\" type=button id=\"uiStatus\" onclick=\"openSelfDelayed('/status',75)\">Status</button></td>",
    "                        <td class=\"admin\"><button class=\"link uilink\" type=button id=\"uiConsole\" onclick=\"openSelfDelayed('/console',75)\">Console</button></td>",
    "                        <td class=\"admin\"><button class=\"link uilink\" type=button id=\"uiSearch\" onclick=\"openSelfDelayed('/search',75)\">Search</button></td>",
    "                    </tr>",
    "                    <tr>",
    "                        <td class=\"admin infocell\" id=\"nodetype\"><input class=\"disable_select\" type=\"text\" value=\"\"></td>",
    "                        <td class=\"admin\"><button class=\"link jsonlink\" type=button id=\"jNodestat\" onclick=\"openBlank('/vgx/nodestat')\">Nodestat {}</button></td>",
    "                        <td class=\"admin\"><button class=\"link jsonlink\" type=button id=\"jDispatch\" onclick=\"openBlank('/vgx/dispatch')\">Dispatch {}</button></td>",
    "                        <td class=\"admin\"><button class=\"link jsonlink\" type=button id=\"jMatrix\" onclick=\"openBlank('/vgx/matrix')\">Matrix {}</button></td>",
    "                        <td class=\"empty\"><button class=\"link\" type=button style=\"visibility: hidden\"></button></td>",
    "                    </tr>",
    "                    <tr>",
    "                        <td class=\"category\" colspan=\"5\"><hr/></td>",
    "                    </tr>",
    "",
    "                    <tr>",
    "                        <td class=\"admin category\" id=\"system\">System</td>",
    "                        <td class=\"empty\"><button class=\"link\" type=button style=\"visibility: hidden\"></button></td>",
    "                        <td class=\"empty\"><button class=\"link\" type=button style=\"visibility: hidden\"></button></td>",
    "                        <td class=\"empty\"><button class=\"link\" type=button style=\"visibility: hidden\"></button></td>",
    "                        <td class=\"empty\"><button class=\"link\" type=button style=\"visibility: hidden\"></button></td>",
    "                    </tr>",
    "                    <tr>",
    "                        <td class=\"admin infocell\" id=\"sysorder\"><input class=\"disable_select\" type=\"text\" value=\"\"></td>",
    "                        <td class=\"admin\"><button class=\"link uilink\" type=button id=\"uiDashboard\" onclick=\"openSelfDelayed('/system',75)\">Dashboard</button></td>",
    "                        <td class=\"empty\"><button class=\"link\" type=button style=\"visibility: hidden\"></button></td>",
    "                        <td class=\"empty\"><button class=\"link\" type=button style=\"visibility: hidden\"></button></td>",
    "                        <td class=\"empty\"><button class=\"link\" type=button style=\"visibility: hidden\"></button></td>",
    "                    </tr>",
    "                    <tr>",
    "                        <td class=\"admin infocell\" id=\"syssize\"><input class=\"disable_select\" type=\"text\" value=\"\"></td>",
    "                        <td class=\"admin\"><button class=\"link jsonlink\" type=button id=\"jDescriptor\" onclick=\"openBlank('/vgx/builtin/system_descriptor')\">Descriptor {}</button></td>",
    "                        <td class=\"admin\"><button class=\"link jsonlink\" type=button id=\"jOverview\" onclick=\"openBlank('/vgx/builtin/system_overview')\">Overview {}</button></td>",
    "                        <td class=\"empty\"><button class=\"link\" type=button style=\"visibility: hidden\"></button></td>",
    "                        <td class=\"empty\"><button class=\"link\" type=button style=\"visibility: hidden\"></button></td>",
    "                    </tr>",
    "                    <tr>",
    "                        <td class=\"category\" colspan=\"5\"><hr/></td>",
    "                    </tr>",
    "",
    "",
    "                    <!--",
    "                    <tr>",
    "                        <td class=\"admin category\">Docs</td>",
    "                        <td class=\"admin\"><button class=\"link\" type=button onclick=\"openHostedDocs()\">Reference</button></td>",
    "                        <td class=\"admin\"><button class=\"link\" type=button onclick=\"openAIAssistant()\">AI Assistant</button></td>",
    "                        <td class=\"empty\"><button class=\"link\" type=button style=\"visibility: hidden\"></button></td>",
    "                        <td class=\"empty\"><button class=\"link\" type=button style=\"visibility: hidden\"></button></td>",
    "                    </tr>",
    "                    <tr>",
    "                        <td class=\"category\">&nbsp;</td>",
    "                        <td class=\"empty\"><button class=\"link\" type=button style=\"visibility: hidden\"></button></td>",
    "                        <td class=\"empty\"><button class=\"link\" type=button style=\"visibility: hidden\"></button></td>",
    "                        <td class=\"empty\"><button class=\"link\" type=button style=\"visibility: hidden\"></button></td>",
    "                        <td class=\"empty\"><button class=\"link\" type=button style=\"visibility: hidden\"></button></td>",
    "                    </tr>",
    "                    -->",
    "                    <tr>",
    "                        <td class=\"admin category\">Plugin</td>",
    "                        <td class=\"empty\"><button class=\"link\" type=button style=\"visibility: hidden\"></button></td>",
    "                        <td class=\"empty\"><button class=\"link\" type=button style=\"visibility: hidden\"></button></td>",
    "                        <td class=\"empty\"><button class=\"link\" type=button style=\"visibility: hidden\"></button></td>",
    "                        <td class=\"empty\"><button class=\"link\" type=button style=\"visibility: hidden\"></button></td>",
    "                    </tr>",
    "                    <tr>",
    "                        <td class=\"admin infocell\">&nbsp;</td>",
    "                        <td class=\"admin\"><button class=\"link uilink\" type=button id=\"uiTestUI\" onclick=\"openSelfDelayed('/plugin',75,true)\">Test UI</button></td>",
    "                        <td class=\"empty\"><button class=\"link\" type=button style=\"visibility: hidden\"></button></td>",
    "                        <td class=\"empty\"><button class=\"link\" type=button style=\"visibility: hidden\"></button></td>",
    "                        <td class=\"empty\"><button class=\"link\" type=button style=\"visibility: hidden\"></button></td>",
    "                    </tr>",
    "                    <tr>",
    "                        <td class=\"admin infocell\">&nbsp;</td>",
    "                        <td class=\"admin\"><button class=\"link jsonlink\" type=button id=\"jLocalPlugins\" onclick=\"openBlank('/vgx/plugins',true)\">Local Plugins {}</button></td>",
    "                        <td class=\"admin\"><button class=\"link jsonlink\" type=button id=\"jLocalBuiltins\" onclick=\"openBlank('/vgx/builtins',true)\">Local Builtins {}</button></td>",
    "                        <td class=\"admin\"><button class=\"link jsonlink\" type=button id=\"jMatrixPlugins\" onclick=\"openBlank('/vgx/builtin/matrixplugins',true)\">Matrix Plugins {}</button></td>",
    "                        <td class=\"empty\"><button class=\"link\" type=button style=\"visibility: hidden\"></button></td>",
    "                    </tr>",
    "                    <!--",
    "                    <tr>",
    "                        <td class=\"json category\">JSON</td>",
    "                        <td class=\"admin\"><button class=\"link\" type=button onclick=\"openBlank('/vgx/nodestat')\">Nodestat</button></td>",
    "                        <td class=\"admin\"><button class=\"link\" type=button onclick=\"openBlank('/vgx/dispatch')\">Dispatch</button></td>",
    "                        <td class=\"empty\"><button class=\"link\" type=button style=\"visibility: hidden\"></button></td>",
    "                        <td class=\"empty\"><button class=\"link\" type=button style=\"visibility: hidden\"></button></td>",
    "                    </tr>",
    "                    <tr>",
    "                        <td class=\"json category\"></td>",
    "                        <td class=\"admin\"><button class=\"link\" type=button onclick=\"openBlank('/vgx/ping')\">Ping</button></td>",
    "                        <td class=\"admin\"><button class=\"link\" type=button onclick=\"openBlank('/vgx/builtin/echo')\">Echo</button></td>",
    "                        <td class=\"empty\"><button class=\"link\" type=button style=\"visibility: hidden\"></button></td>",
    "                        <td class=\"empty\"><button class=\"link\" type=button style=\"visibility: hidden\"></button></td>",
    "                    </tr>",
    "                    -->",
    "                </tbody>",
    "            </table>",
    "        </div>",
    "",
    "        <div id=\"commonFooterDiv\"></div>",
    "    </div>",
    "</body>",
    "</html>",
    "<style>",
    "    #links {",
    "        border-spacing: 0px;",
    "    }",
    "",
    "    #links td {",
    "        height: 50px;",
    "    }",
    "",
    "    .category {",
    "        /*font-family: cambria;*/",
    "        font-weight: bold;",
    "        font-size: 140%;",
    "        width: 190px;",
    "    }",
    "",
    "    td.category {",
    "        color: #676767;",
    "    }",
    "",
    "    td.empty {",
    "    }",
    "",
    "    input[disabled] {",
    "        pointer-events: none;",
    "    }",
    "",
    "    /* Uptime */",
    "    .infocell input {",
    "        font-family: Consolas, Menlo, courier;",
    "        font-size: 14px;",
    "        font-weight: bold;",
    "        text-align: center;",
    "        height: 25px;",
    "        width: 140px;",
    "        padding-left: 1px;",
    "        padding-right: 1px;",
    "        padding-bottom: 1px;",
    "        background: #FFFFFF;",
    "        color: #676767;",
    "        border-radius: 4px;",
    "    }",
    "",
    "    .downcell input {",
    "        border-color: #DD2000;",
    "        color: #FDEDEC;",
    "        background-color: #DD2000;",
    "    }",
    "",
    "",
    "    #links td {",
    "    }",
    "",
    "    .link {",
    "        font-family: Cambria;",
    "        font-size: 110%;",
    "        font-weight: normal;",
    "        border: none;",
    "        border-radius: 3px;",
    "        color: #F8F8F8;",
    "        background-color: #7F7F7F;",
    "        text-align: center;",
    "        width: 140px;",
    "        height: 25px;",
    "        margin: auto;",
    "        margin-left: 10px;",
    "        display: block;",
    "        padding-left: 1px;",
    "        padding-right: 1px;",
    "        padding-top: 1px;",
    "        padding-bottom: 1px;",
    "        cursor: pointer;",
    "        transition: background-color 70ms ease-in, color 10ms ease-in, font-size 70ms ease-in;",
    "    }",
    "",
    "    .link:hover {",
    "        border: solid 1px;",
    "        color: #FEFEFE;",
    "        background-color: #707070;",
    "        border-color: #000000;",
    "    }",
    "",
    "    .link:active {",
    "        color: #FFFFFF;",
    "        background-color: #808080;",
    "    }",
    "",
    "    .uilink {",
    "        color: #F8F8F8;",
    "        background-color: #7F7F7F;",
    "        font-weight: bold;",
    "    }",
    "",
    "    .uilink:hover {",
    "        color: #FEFEFE;",
    "        background-color: #707070;",
    "    }",
    "",
    "    .uilink:active {",
    "        color: #FFFFFF;",
    "        background-color: #808080;",
    "    }",
    "",
    "    .jsonlink {",
    "        color: #F8F8F8;",
    "        background-color: #4e4e4e;",
    "        font-family: monospace;",
    "    }",
    "",
    "    .jsonlink:hover {",
    "        color: #FEFEFE;",
    "        background-color: #404040;",
    "    }",
    "",
    "    .jsonlink:active {",
    "        color: #FFFFFF;",
    "        background-color: #808080;",
    "    }",
    "",
    "",
    "</style>",
    "",
    "<script>",
    "",
    "    function openSelf(link, where) {",
    "        setTimeout(function () {",
    "            $('body').removeClass(\"leavepage\");",
    "        }, 1000);",
    "",
    "        window.open(link, \"_self\");",
    "    }",
    "",
    "    function openSelfDelayed(link, delay, baseport=false) {",
    "        if (baseport) {",
    "            link = \"http://\" + window.location.hostname + \":\" + CommonHeader.baseport + link;",
    "        }",
    "        $('body').addClass('leavepage');",
    "        setTimeout(openSelf.bind(null, link), delay);",
    "    }",
    "",
    "    function openBlank(link, baseport=false) {",
    "        if (baseport) {",
    "            link = \"http://\" + window.location.hostname + \":\" + CommonHeader.baseport + link;",
    "        }",
    "        window.open(link, \"_blank\");",
    "    }",
    "",
    "",
    "    function openHostedDocs() {",
    "        const hosted = null;",
    "        window.open( hosted, \"_blank\" );",
    "    }",
    "",
    "    function openAIAssistant() {",
    "        const assistant = null;",
    "        window.open( assistant, \"_blank\" );",
    "    }",
    "",
    "    function openDocs() {",
    "        const docroot = \"/docs/index.html\";",
    "        $.get(docroot, function () {",
    "            window.open(docroot, \"_blank\");",
    "        }).fail(function () {",
    "            openHostedDocs();",
    "            window.alert(\"Local reference documentation not installed.\\nPlace under <vgxroot>/WEB-ROOT/docs to enable.\\n\");",
    "        });",
    "    }",
    "",
    "    let inputs = $(document).find(\".infocell input\");",
    "    inputs.prop(\"disabled\", true);",
    "    inputs.addClass(\"disable_select\");",
    "",
    "    $(\"#uptime\").prop(\"title\",      \"Local Instance Uptime\");",
    "    $(\"#nodetype\").prop(\"title\",    \"Local Instance Node Type and Identifier\");",
    "    $(\"#uiAdmin\").prop(\"title\",     \"Local Instance Admin\");",
    "    $(\"#uiStatus\").prop(\"title\",    \"Local Instance Server Status\");",
    "    $(\"#uiConsole\").prop(\"title\",   \"Local Instance Console\");",
    "    $(\"#uiSearch\").prop(\"title\",    \"Local Instance Search\");",
    "    $(\"#jNodestat\").prop(\"title\",   \"Local Instance Status Information (JSON)\");",
    "    $(\"#jDispatch\").prop(\"title\",   \"Local Instance Dispatcher Information (JSON)\");",
    "    $(\"#jMatrix\").prop(\"title\",     \"Local Instance Dispatch Matrix Information (JSON)\");",
    "",
    "    $(\"#system\").prop(\"title\",      \"System Instance Count\");",
    "    $(\"#sysorder\").prop(\"title\",    \"System Total Vertex Count\");",
    "    $(\"#syssize\").prop(\"title\",     \"System Total Arc Count\");",
    "    $(\"#uiDashboard\").prop(\"title\", \"System Overview Dashboard\");",
    "    $(\"#jDescriptor\").prop(\"title\", \"System Descriptor (JSON)\");",
    "    $(\"#jOverview\").prop(\"title\",   \"System Overview (JSON)\");",
    "",
    "    $(\"#uiTestUI\").prop(\"title\",        \"Test Local Instance Plugins\");",
    "    $(\"#jLocalPlugins\").prop(\"title\",   \"List Available Plugins (JSON)\");",
    "    $(\"#jLocalBuiltins\").prop(\"title\",  \"List Available Builtins (JSON)\");",
    "    $(\"#jMatrixPlugins\").prop(\"title\",  \"List Available Deep Matrix Plugins (JSON)\");",
    "",
    "",
    "",
    "    let refresher = null;",
    "",
    "    let state = {",
    "        'err': 0,",
    "        'local': {",
    "            'uptime': -1,",
    "            'label': null,",
    "            'ident': '-',",
    "            'nodetype': '-'",
    "        },",
    "        'system': {",
    "            'instances': 0,",
    "            'order': 0,",
    "            'size': 0,",
    "            'partitions': 0",
    "        },",
    "        'next': 0",
    "    };",
    "",
    "    let clock = new Clock();",
    "    let uptmElem = $(document).find(\"#uptime input\");",
    "    clock.setElement(uptmElem);",
    "    clock.start(state.local.uptime);",
    "    clock.refresh();",
    "",
    "",
    "    function down() {",
    "        clock.stop();",
    "        $('button').prop('disabled', true);",
    "        $('button').css('font-style', 'italic');",
    "        $('button').css('opacity', 0.5);",
    "        let nodetypeElem = $(\"#nodetype input\")",
    "        let nodetypeTD = $(\"#nodetype\")",
    "        let sysElem = $(\"#system\");",
    "        let sysorderElem = $(\"#sysorder input\");",
    "        let syssizeElem = $(\"#syssize input\");",
    "        nodetypeElem.val(\"Down\");",
    "        nodetypeTD.addClass(\"downcell\");",
    "        sysElem.html(\"System\");",
    "        sysorderElem.val(\"\");",
    "        syssizeElem.val(\"\");",
    "",
    "    }",
    "",
    "",
    "",
    "    function up() {",
    "        let nodetypeTD = $(\"#nodetype\")",
    "        nodetypeTD.removeClass(\"downcell\");",
    "        $('button').prop('disabled', false);",
    "        $('button').css('font-style', 'normal');",
    "        $('button').css('opacity', 1.0);",
    "    }",
    "",
    "",
    "    function refreshNodestat() {",
    "        $.get(\"/vgx/nodestat\", function (data, textStatus, jqXHR) {",
    "            try {",
    "                if (!clock.running()) {",
    "                    clock.start(state.local.uptime);",
    "                }",
    "                const response = data[\"response\"];",
    "                // Uptime",
    "                state.local.uptime = response[\"uptime\"];",
    "                const uptime = clock.getTime();",
    "                if (Math.abs(state.local.uptime - uptime) > 2) {",
    "                    clock.updateTimeReference(state.local.uptime);",
    "                }",
    "                // Service Label",
    "                state.local.label = response[\"service-label\"];",
    "                // OK",
    "                state.err = 0;",
    "            }",
    "            catch (error) {",
    "                state.local.uptime = -1;",
    "            }",
    "            finally {",
    "                clock.refresh();",
    "            }",
    "        }).fail(function (xhr, txt, err) {",
    "            if (state.err++ > 3) {",
    "                state.local.uptime = -1;",
    "                down();",
    "            }",
    "        });",
    "    }",
    "",
    "",
    "    function refreshSystem() {",
    "        $.get(\"/vgx/builtin/system_overview\", function (data, textStatus, jqXHR) {",
    "            try {",
    "                const response = data[\"response\"];",
    "                const instances = response[\"instances\"];",
    "",
    "                state.system.instances = instances.length;",
    "                let totalOrder = 0;",
    "                let totalSize = 0;",
    "                let partitions = 0;",
    "",
    "                for (const instance of instances) {",
    "                    const ident = instance[\"id\"];",
    "                    const nodetype = instance[\"nodetype\"];",
    "                    const nodestat = instance[\"nodestat\"];",
    "                    if (nodetype == \"builder\") {",
    "                        totalOrder += nodestat[\"graph-order\"];",
    "                        totalSize += nodestat[\"graph-size\"];",
    "                        partitions++;",
    "                    }",
    "                    if (nodestat[\"service-label\"] == state.local.label) {",
    "                        state.local.ident = ident;",
    "                        state.local.nodetype = nodetype;",
    "                    }",
    "                }",
    "",
    "                state.system.order = totalOrder;",
    "                state.system.size = totalSize;",
    "                state.system.partitions = partitions;",
    "                // OK",
    "                state.err = 0;",
    "            }",
    "            catch (error) {",
    "                state.local.uptime = -1;",
    "            }",
    "            finally {",
    "                const nI = \"I: \" + state.system.instances;",
    "                const nV = \"V: \" + state.system.order.toLocaleString(\"en-US\");",
    "                const nA = \"A: \" + state.system.size.toLocaleString(\"en-US\");",
    "                const nP = \"P: \" + state.system.partitions;",
    "",
    "                let nodetypeElem = $(\"#nodetype input\")",
    "                let sysElem = $(\"#system\");",
    "                let sysorderElem = $(\"#sysorder input\");",
    "                let syssizeElem = $(\"#syssize input\");",
    "                nodetypeElem.val( state.local.nodetype + \"/\" + state.local.ident );",
    "                sysElem.html(\"System (\" + nI + \")\");",
    "                sysorderElem.val(nV);",
    "                syssizeElem.val(nA);",
    "            }",
    "        }).fail(function (xhr, txt, err) {",
    "            if (state.err++ > 3) {",
    "                state.local.uptime = -1;",
    "                down();",
    "            }",
    "        });",
    "    }",
    "",
    "",
    "    function refreshPage() {",
    "",
    "        clearTimeout(refresher);",
    "        refresher = setTimeout(refreshPage, 2500);",
    "",
    "        if (state.err == 0) {",
    "            up();",
    "        }",
    "",
    "        switch (state.next) {",
    "            case 0:",
    "                refreshNodestat();",
    "                break;",
    "            case 1:",
    "                refreshSystem();",
    "                break;",
    "            default:",
    "                break;",
    "        }",
    "        if (++state.next > 1) {",
    "            state.next = 0;",
    "        }",
    "    }",
    "",
    "",
    "    function main() {",
    "        refreshNodestat();",
    "        refreshSystem();",
    "        refresher = setTimeout(refreshPage, 1);",
    "    }",
    "",
    "",
    "    CommonHeader.ready(main, 12);",
    "</script>",
    "",
    0
};



const char *VGX_BUILTIN_HTML_plugin[] = {
    "<!DOCTYPE html>",
    "<!--",
    "",
    "  VGX Server",
    "  Distributed engine for plugin-based graph and vector search",
    "",
    "  Module:  vgx",
    "  File:    plugin.html",
    "  Author:  Stian Lysne <...>",
    "",
    "  Copyright Â© 2025 Rakuten, Inc.",
    "",
    "  Licensed under the Apache License, Version 2.0 (the \"License\");",
    "  you may not use this file except in compliance with the License.",
    "  You may obtain a copy of the License at",
    "",
    "      http://www.apache.org/licenses/LICENSE-2.0",
    "",
    "  Unless required by applicable law or agreed to in writing, software",
    "  distributed under the License is distributed on an \"AS IS\" BASIS,",
    "  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
    "  See the License for the specific language governing permissions and",
    "  limitations under the License.",
    "",
    "-->",
    "",
    "<html>",
    "<head>",
    "    <title>VGX Plugin</title>",
    "    <script src=\"jquery.js\"></script>",
    "    <script src=\"header.js\"></script>",
    "    <link rel=\"stylesheet\" href=\"vgx.css\">",
    "</head>",
    "<body class=\"disable_select\">",
    "    <div style=\"margin: 8\">",
    "        <div id=\"commonHeaderDiv\"></div>",
    "",
    "        <div class=\"container\">",
    "",
    "            <div id=\"templateArea\" style=\"display: none\">",
    "                <table>",
    "                    <tr id=\"parameter_template\" class=\"inputrow\">",
    "                        <td class=\"col1 paramName\">",
    "                            <span class=\"parameterName\"></span>",
    "                        </td>",
    "                        <td class=\"col2 paramType\"></td>",
    "                        <td class=\"col3 paramValue\">",
    "                            <pre><textarea class=\"parameterValue\" spellcheck=\"false\"></textarea></pre>",
    "                        </td>",
    "                    </tr>",
    "                </table>",
    "            </div>",
    "",
    "            <table id=\"pluginSetup\">",
    "                <tbody>",
    "                    <tr id=\"mode\" class=\"inputrow\">",
    "                        <td colspan=\"3\" id=\"modeArea\">",
    "                            <input type=\"radio\" class=\"mode\" id=\"pluginMode\" name=\"mode\" value=\"plugin\" checked>",
    "                            <label for=\"pluginMode\">User</label>",
    "                            <input type=\"radio\" class=\"mode\" id=\"builtinMode\" name=\"mode\" value=\"builtin\">",
    "                            <label for=\"builtinMode\">Builtin</label>",
    "                            <input type=\"radio\" class=\"mode\" id=\"matrixMode\" name=\"mode\" value=\"matrix\">",
    "                            <label for=\"matrixMode\">Matrix</label>",
    "                        </td>",
    "                    </tr>",
    "                    <tr id=\"plugin\" class=\"inputrow\">",
    "                        <td class=\"col1\">",
    "                            <select name=\"pluginlist\" id=\"pluginlist\"></select>",
    "                        </td>",
    "                        <td class=\"col2\">",
    "                        </td>",
    "                        <td class=\"col3\">",
    "                            <button id=\"submit\" type=\"button\">Execute</button>",
    "                        </td>",
    "                    </tr>",
    "                    <tr id=\"description_row\" class=\"inputrow\">",
    "                        <td class=\"col1\" colspan=\"3\"><pre class=\"vstr\" id=\"description\"></pre></td>",
    "                    </tr>",
    "                    <tr id=\"param_headrow\" class=\"inputrow\">",
    "                        <td class=\"col1\"><b>Parameter</b></td>",
    "                        <td class=\"col2\"><b>Type</b></td>",
    "                        <td class=\"col3\"><b>Value</b></td>",
    "                    </tr>",
    "                    <tr id=\"graph_row\" class=\"inputrow\" style=\"display: none\">",
    "                        <td class=\"col1 paramName\"><b>graph</b></td>",
    "                        <td class=\"col2 paramType\"></td>",
    "                        <td class=\"col3 paramValue\"><select name=\"graphlist\" id=\"graphlist\"></select></td>",
    "                    </tr>",
    "                </tbody>",
    "            </table>",
    "",
    "            <div id=\"result_box\">",
    "                <pre><textarea class=\"area\" id=\"result\" name=\"result\" rows=10 readonly=readonly></textarea></pre>",
    "            </div>",
    "            <div id=\"message_box\">",
    "                <pre><span class=\"area\" id=\"infotext\"></span></pre>",
    "                <div id=\"httpinfo\">",
    "                    <span class=\"area\" id=\"httpmethod\"></span>&nbsp;",
    "                    <span class=\"area enable_select\" id=\"urlinfo\"></span>",
    "                    <br>",
    "                    <span class=\"area enable_select\" id=\"httpcontent\"></span>",
    "                </div>",
    "                <pre><span class=\"area\" id=\"errortext\"></span></pre>",
    "            </div>",
    "            <div class=\"modal\"><span id=\"busymsg\"></span></div>",
    "        </div>",
    "",
    "        <div id=\"commonFooterDiv\"></div>",
    "    </div>",
    "</body>",
    "</html>",
    "",
    "<script>",
    "",
    "    let currentPlugin = null;",
    "    let availablePlugins = null;",
    "    let mode = null;",
    "",
    "",
    "    class Progress {",
    "        t0 = 0;",
    "        delayer = null;",
    "        updater = null;",
    "        display = false;",
    "",
    "        constructor() {",
    "            this.t0 = Date.now();",
    "            this.delayer = setTimeout(this.refresh.bind(this), 250);",
    "            this.display = false;",
    "            $('#submit').prop(\"disabled\", true);",
    "        }",
    "",
    "",
    "        refresh() {",
    "            if (this.delayer) {",
    "                clearTimeout(this.delayer);",
    "                this.delayer = null;",
    "            }",
    "            if (!this.display) {",
    "                $('.container').addClass(\"loading\");",
    "                this.display = true;",
    "                this.updater = setInterval(this.refresh.bind(this), 10);",
    "            }",
    "            let t1 = Date.now();",
    "            let t_100 = Math.floor((t1 - this.t0) / 100.0);",
    "            let t_elapse = t_100 / 10.0;",
    "            $('#busymsg').html(\"\" + t_elapse.toFixed(1) + \" s\");",
    "        }",
    "",
    "",
    "        stop() {",
    "            $('#submit').prop(\"disabled\", false);",
    "            $('#busymsg').html(\"\");",
    "            $('.container').removeClass(\"loading\");",
    "            if (this.delayer) {",
    "                clearTimeout(this.delayer);",
    "                this.delayer = null;",
    "            }",
    "            if (this.updater) {",
    "                clearInterval(this.updater);",
    "                this.updater = null;",
    "            }",
    "        }",
    "    }",
    "",
    "",
    "    function clearPageFields() {",
    "        $('.parameter_row').remove();",
    "        $('#description').html(\"\");",
    "        $('#result').html(\"\");",
    "        $('#infotext').html(\"\");",
    "        $('#errortext').html(\"\");",
    "    }",
    "",
    "",
    "    function submitOnEnter(event) {",
    "        if (event.key === \"Enter\") {",
    "            event.preventDefault();",
    "            $(\":focus\").trigger(\"change\");",
    "            document.getElementById(\"submit\").click();",
    "        }",
    "    }",
    "",
    "    function submitOnAltEnter(event) {",
    "        if (event.key === \"Enter\" && event.shiftKey) {",
    "            event.preventDefault();",
    "            $(\":focus\").trigger(\"change\");",
    "            document.getElementById(\"submit\").click();",
    "        }",
    "    }",
    "",
    "",
    "",
    "    class Plugin {",
    "        static specialParameters = [\"request\", \"graph\", \"method\", \"headers\", \"content\"];",
    "",
    "        name = null;",
    "        path = null;",
    "        description = null;",
    "        graph = null;",
    "        parameters = null;",
    "        progress = null;",
    "",
    "        constructor(path, graph, description) {",
    "            this.path = path;",
    "            const graphRex = /name=(\\S+)/;",
    "            let m = graphRex.exec(graph);",
    "            if (m != null) {",
    "                this.graph = m[1];",
    "            }",
    "            let nameRex = null;",
    "            switch (mode) {",
    "                case \"plugin\":",
    "                    nameRex = /\\/vgx\\/plugin\\/(\\S+)/;",
    "                    break;",
    "                case \"builtin\":",
    "                    nameRex = /\\/vgx\\/builtin\\/(\\S+)/;",
    "                    break;",
    "                case \"matrix\":",
    "                    nameRex = /\\/vgx\\/plugin\\/(\\S+)/;",
    "                    break;",
    "            }",
    "            if (nameRex) {",
    "                m = nameRex.exec(path);",
    "                this.name = m[1];",
    "            }",
    "            else {",
    "                this.name = \"?\";",
    "            }",
    "            this.parameters = {};",
    "            if (typeof (description) === \"object\") {",
    "                this.description = \"\";",
    "                for (var n = 0; n < description.length; n++) {",
    "                    this.description += description[n] + \"\\n\";",
    "                }",
    "            }",
    "            else {",
    "                this.description = description;",
    "            }",
    "        }",
    "",
    "        addParameter(name, info) {",
    "            let type = null;",
    "            let dflt = null;",
    "            if (typeof (info) === \"object\") {",
    "                type = info[0];",
    "                dflt = info[1];",
    "                if (typeof (dflt) === \"object\") {",
    "                    dflt = JSON.stringify(dflt);",
    "                }",
    "            }",
    "            else {",
    "                type = info;",
    "            }",
    "            this.parameters[name] = { 'name': name, 'type': type, 'value': null, 'dflt': dflt };",
    "        }",
    "",
    "        setParameter(name, value) {",
    "            param = this.parameters[name];",
    "            param.value = value;",
    "        }",
    "",
    "        activate() {",
    "            $('.parameter_row').remove();",
    "            let graphRow = $('#graph_row');",
    "            let graphList = $('#graphlist');",
    "            graphRow.css(\"display\", \"none\");",
    "            $('#description').html(this.description);",
    "            // plugin has bound graph - display only",
    "            if (this.graph != null) {",
    "                $('#graph').html(this.graph);",
    "                graphRow.css(\"display\", \"inline\");",
    "                graphList.prop(\"disabled\", true);",
    "                graphList.css(\"font-style\", \"italic\");",
    "                graphList.addClass(\"vstr\");",
    "            }",
    "            // plugin without bound graph takes graph parameter",
    "            else if (\"graph\" in this.parameters) {",
    "                let param = this.parameters[\"graph\"];",
    "                graphRow.css(\"display\", \"inline\");",
    "                graphList.prop(\"disabled\", false);",
    "                graphList.css(\"font-style\", \"normal\");",
    "                graphList.removeClass(\"vstr\");",
    "                graphList.off(\"change\");",
    "                graphList.on(\"change\", function () {",
    "                    const graphName = $('#graphlist').find(':selected').val();",
    "                    this.parameters[\"graph\"].value = graphName;",
    "                }.bind(this));",
    "            }",
    "",
    "            const pkeys = Object.keys(this.parameters);",
    "            for (var p = 0; p < pkeys.length; p++) {",
    "                const pkey = pkeys[p];",
    "                if (!Plugin.specialParameters.includes(pkey)) {",
    "                    let param = this.parameters[pkey];",
    "                    this.generateParamBox(param);",
    "                }",
    "            }",
    "            if (\"content\" in this.parameters) {",
    "                let param = this.parameters[\"content\"];",
    "                this.generateParamBox(param);",
    "            }",
    "",
    "        }",
    "",
    "",
    "",
    "        readParameter(param_name) {",
    "            const element = $(\"#parameter_\" + param_name + \"_value\");",
    "            const param_value = element.val().trim();",
    "            let param = this.parameters[param_name];",
    "            let valid = true;",
    "            switch (param.type) {",
    "                case \"int\":",
    "                    valid = this.validateInt(param_value);",
    "                    break;",
    "                case \"float\":",
    "                    valid = this.validateFloat(param_value);",
    "                    break;",
    "                case \"json\":",
    "                    valid = this.validateJson(param_value);",
    "                    break;",
    "            }",
    "            if (valid) {",
    "                element.removeClass(\"invalid\");",
    "                element.addClass(\"valid\");",
    "            }",
    "            else {",
    "                element.removeClass(\"valid\");",
    "                element.addClass(\"invalid\");",
    "            }",
    "            if (param_value === \"\") {",
    "                param.value = null;",
    "            }",
    "            else {",
    "                param.value = param_value;",
    "            }",
    "        }",
    "",
    "",
    "        paramChange(eventObj) {",
    "            $('#errortext').html(\"\");",
    "            const param_name = eventObj[\"data\"];",
    "            this.readParameter(param_name);",
    "        }",
    "",
    "",
    "        generateParamBox(param) {",
    "            let rowTemplate = $('#parameter_template').html();",
    "            const paramID = \"parameter_\" + param.name;",
    "",
    "            let parametersBody = $('#pluginSetup tbody');",
    "            parametersBody.append('<tr class=\"inputrow parameter_row\" id=\"' + paramID + '\">' + rowTemplate + '</tr>');",
    "            let row = $('#' + paramID);",
    "            // Name",
    "            let nameElem = row.find(\".parameterName\");",
    "            nameElem.html(param.name);",
    "            let nameFontSize = 100;",
    "            nameElem.css(\"font-size\", \"100%\");",
    "            while (nameElem.width() > 120 && nameFontSize > 10) {",
    "                nameFontSize -= 1;",
    "                nameElem.css(\"font-size\", nameFontSize + \"%\");",
    "            }",
    "",
    "            // Type",
    "            let typeElem = row.find(\".paramType\");",
    "            // Value",
    "            let valueboxID = paramID + \"_value\";",
    "            let valElem = row.find(\".paramValue .parameterValue\");",
    "            valElem.attr(\"id\", valueboxID);",
    "            // Value Type",
    "            let vtype = null;",
    "            const type = this.parameters[param.name].type;",
    "            switch (type) {",
    "                case \"int\":",
    "                    typeElem.html(param.type);",
    "                    vtype = \"vint\";",
    "                    valElem.css(\"min-width\", \"181px\");",
    "                    valElem.css(\"width\", \"181px\");",
    "                    valElem.css(\"max-height\", \"26px\");",
    "                    valElem.keypress(submitOnEnter);",
    "                    break;",
    "                case \"float\":",
    "                    typeElem.html(param.type);",
    "                    vtype = \"vfloat\";",
    "                    valElem.css(\"min-width\", \"181px\");",
    "                    valElem.css(\"width\", \"181px\");",
    "                    valElem.css(\"max-height\", \"26px\");",
    "                    valElem.keypress(submitOnEnter);",
    "                    break;",
    "                case \"str\":",
    "                    typeElem.html(param.type);",
    "                    vtype = \"vstr\";",
    "                    if (param.name != \"content\") {",
    "                        valElem.keypress(submitOnEnter);",
    "                    }",
    "                    break;",
    "                case \"json\":",
    "                    typeElem.html(param.type);",
    "                    vtype = \"vjson\";",
    "                    valElem.css(\"height\", \"4em\");",
    "                    valElem.keypress(submitOnAltEnter);",
    "                    break;",
    "                default:",
    "                    vtype = \"vany\";",
    "                    valElem.keypress(submitOnEnter);",
    "            }",
    "",
    "            if (param.name === \"content\") {",
    "                valElem.css(\"height\", \"6em\");",
    "                valElem.keypress(submitOnAltEnter);",
    "            }",
    "",
    "            if (param.dflt != null && param.dflt != 'null') {",
    "                valElem.val(param.dflt);",
    "            }",
    "",
    "            typeElem.addClass(vtype);",
    "            valElem.addClass(vtype);",
    "            // Value onchange",
    "            valElem.off(\"change\");",
    "            valElem.on(\"change\", null, param.name, this.paramChange.bind(this));",
    "        }",
    "",
    "",
    "        validateInt(x) {",
    "            const decrex = /^[-+]?\\d+$/;",
    "            if (x === \"\" || decrex.exec(x) != null) {",
    "                return true;",
    "            }",
    "            else {",
    "                const hexrex = /^[-+]?0x[0-9a-fA-F]+$/;",
    "                if (hexrex.exec(x) != null) {",
    "                    return true;",
    "                }",
    "                $('#errortext').html(\"SyntaxError: invalid int\");",
    "                return false;",
    "            }",
    "        }",
    "",
    "",
    "        validateFloat(x) {",
    "            const rex = /^[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?$/;",
    "            if (x === \"\" || rex.exec(x) != null) {",
    "                return true;",
    "            }",
    "            else {",
    "                $('#errortext').html(\"SyntaxError: invalid float\");",
    "                return false;",
    "            }",
    "        }",
    "",
    "",
    "        validateJson(x) {",
    "            try {",
    "                JSON.parse(x);",
    "                return true;",
    "            }",
    "            catch (error) {",
    "                $('#errortext').html(error);",
    "                return false;",
    "            }",
    "        }",
    "",
    "",
    "        execute(renderCallback) {",
    "            if (this.progress) {",
    "                this.progress.stop();",
    "            }",
    "            this.progress = new Progress();",
    "            try {",
    "                let content = null;",
    "                let url = this.path;",
    "                let sep = \"?\";",
    "                const pkeys = Object.keys(this.parameters);",
    "                for (var p = 0; p < pkeys.length; p++) {",
    "                    const pkey = pkeys[p];",
    "                    const param = this.parameters[pkey];",
    "                    if (param.value != null) {",
    "                        if (param.name != \"content\") {",
    "                            url = url + sep + param.name + \"=\" + param.value;",
    "                            sep = \"&\";",
    "                        }",
    "                        else {",
    "                            content = param.value;",
    "                        }",
    "                    }",
    "                }",
    "                $('#urlinfo').html(url);",
    "                $('#urlinfo').mouseup(CommonHeader.copySelectionToClipboard);",
    "                if (content == null) {",
    "                    this.requestGET(url, renderCallback);",
    "                }",
    "                else {",
    "                    this.requestPOST(url, content, renderCallback);",
    "                }",
    "            }",
    "            catch (error) {",
    "                renderCallback({ \"error\": error });",
    "            }",
    "            finally {",
    "            }",
    "        }",
    "",
    "        requestGET(url, renderCallback) {",
    "            //alert( \"GET: \" + url );",
    "            $('#httpmethod').html(\"GET\");",
    "            $.get(url, function (data, textStatus, jqXHR) {",
    "                renderCallback(data);",
    "            }, \"json\").fail(function (xhr, txt, err) {",
    "                let errtext = xhr[\"responseText\"] + \" | \" + txt + \" | \" + err;",
    "                renderCallback({ \"error\": errtext });",
    "            });",
    "",
    "        }",
    "",
    "        requestPOST(url, content, renderCallback) {",
    "            //alert( \"POST: \" + url );",
    "            $('#httpmethod').html(\"POST\");",
    "            $('#httpcontent').html(content);",
    "            $.post(url, content, function (data, textStatus, jqXHR) {",
    "                renderCallback(data);",
    "            }, \"json\").fail(function (xhr, txt, err) {",
    "                let errtext = xhr[\"responseText\"] + \" | \" + txt + \" | \" + err;",
    "                renderCallback({ \"error\": errtext });",
    "            });",
    "        }",
    "    }",
    "",
    "",
    "",
    "",
    "    function loadPluginDefinitions( selectName, selectMode ) {",
    "        clearPageFields();",
    "        $('#pluginlist').find(\"option\").remove();",
    "        if (selectMode) {",
    "            $(`#mode input[type=radio][value=\"${selectMode}\"]`).prop('checked', true);",
    "        }",
    "        mode = $('#mode').find(':checked').val();",
    "        let url = null;",
    "        switch (mode) {",
    "            case \"plugin\":",
    "                url = \"/vgx/plugins\";",
    "                break;",
    "            case \"builtin\":",
    "                url = \"/vgx/builtins\";",
    "                break;",
    "            case \"matrix\":",
    "                url = \"/vgx/builtin/matrixplugins\";",
    "                break;",
    "            default:",
    "                return;",
    "        }",
    "",
    "        $.get(url, function (data, textStatus, jqXHR) {",
    "            availablePlugins = {};",
    "            const pluginList = data[\"response\"];",
    "            const message = data[\"message\"];",
    "            let opt = null;",
    "            let first = null;",
    "            if (pluginList.length > 0) {",
    "                pluginList.sort((a, b) => ((a.path > b.path) ? 1 : -1));",
    "                for (var admin in [false, true]) {",
    "                    for (var i = 0; i < pluginList.length; i++) {",
    "                        const pluginDef = pluginList[i];",
    "                        const path = pluginDef[\"path\"];",
    "                        if (path.includes(\"/ADMIN_\") == admin) {",
    "                            const descr = pluginDef[\"description\"];",
    "                            const graph = pluginDef[\"bound_graph\"];",
    "                            const params = pluginDef[\"parameters\"];",
    "                            let plugin = new Plugin(path, graph, descr);",
    "                            const pkeys = Object.keys(params);",
    "                            for (var p = 0; p < pkeys.length; p++) {",
    "                                const pkey = pkeys[p];",
    "                                plugin.addParameter(pkey, params[pkey]);",
    "                            }",
    "                            let matrix = pluginDef[\"matrix\"];",
    "                            let plugin_ident = plugin.name;",
    "                            if (matrix) {",
    "                                plugin_ident += \" [\" + matrix[\"location\"] + \"/\" + matrix[\"level\"] + \"]\";",
    "                            }",
    "",
    "                            availablePlugins[plugin_ident] = plugin;",
    "",
    "                            opt = document.createElement(\"option\");",
    "                            opt.value = plugin_ident;",
    "                            if (first == null) {",
    "                                first = plugin_ident;",
    "                            }",
    "                            opt.innerHTML = plugin_ident;",
    "                            $('#pluginlist').append(opt);",
    "                        }",
    "                    }",
    "                }",
    "                if (selectName === null) {",
    "                    $('#pluginlist').val(first).change();",
    "                }",
    "                else {",
    "                    $('#pluginlist').val(selectName).change();",
    "                }",
    "                $('#pluginlist').prop(\"disabled\", false);",
    "            }",
    "            else {",
    "                opt = document.createElement(\"option\");",
    "                opt.innerHTML = \"(no plugins)\";",
    "                $('#pluginlist').append(opt);",
    "                $('#pluginlist').prop(\"disabled\", true);",
    "                updatePluginSetup();",
    "            }",
    "        }).fail(function (xhr, txt, err) {",
    "            let errtext = xhr[\"responseText\"];",
    "            $('#errortext').html(\"\" + errtext );",
    "        });",
    "    }",
    "",
    "",
    "    function updateGraphList() {",
    "        $('#graphlist').find(\"option\").remove();",
    "        $.get(\"/vgx/graphsum\", function (data, textStatus, jqXHR) {",
    "            const names = data[\"response\"][\"graphsum\"][\"names\"];",
    "            let opt = null;",
    "            let first = null;",
    "            for (var i = 0; i < names.length; i++) {",
    "                opt = document.createElement(\"option\");",
    "                opt.value = names[i];",
    "                if (first == null) {",
    "                    first = names[i];",
    "                }",
    "                opt.innerHTML = names[i];",
    "                $('#graphlist').append(opt);",
    "            }",
    "            opt = document.createElement(\"option\");",
    "            opt.value = \"system\";",
    "            if (first == null) {",
    "                first = \"system\";",
    "            }",
    "            opt.innerHTML = \"_system\";",
    "            $('#graphlist').append(opt);",
    "            $('#graphlist').val(first).change();",
    "        });",
    "    }",
    "",
    "",
    "    function updatePluginSetup() {",
    "        clearPageFields();",
    "        mode = $('#mode').find(':checked').val();",
    "        const name = $('#pluginlist').find(':selected').val();",
    "        if (name != null) {",
    "            currentPlugin = availablePlugins[name];",
    "            if (currentPlugin != null) {",
    "                currentPlugin.activate();",
    "                updateGraphList();",
    "            }",
    "        }",
    "        else {",
    "            currentPlugin = null;",
    "        }",
    "        let matrixModeLabel = \"Matrix\";",
    "        if (CommonHeader.port_offset != 0) {",
    "            $('#matrixMode').prop('disabled', true);",
    "            matrixModeLabel += \" (base port required)\";",
    "        }",
    "        $('label[for=\"matrixMode\"]').text(matrixModeLabel);",
    "    }",
    "",
    "",
    "    function callPlugin() {",
    "        if (currentPlugin != null) {",
    "            currentPlugin.execute(function (data) {",
    "                let result = null;",
    "                try {",
    "                    const stat = data[\"status\"];",
    "                    if (stat === \"OK\") {",
    "                        const response = data[\"response\"];",
    "                        result = response;",
    "                        const t = data[\"exec_ms\"];",
    "                        $('#infotext').html(t.toFixed(2) + \" ms\");",
    "                        $('#errortext').html(\"\");",
    "                    }",
    "                    else if (stat === \"ERROR\") {",
    "                        const msg = data[\"message\"];",
    "                        $('#infotext').html(\"\");",
    "                        $('#errortext').html(JSON.stringify(msg, null, 4));",
    "                    }",
    "                    else {",
    "                        result = data;",
    "                        $('#infotext').html(\"\");",
    "                        $('#errortext').html(\"ERROR\");",
    "                    }",
    "                }",
    "                catch (error) {",
    "                    result = error;",
    "                }",
    "                finally {",
    "                    let rstr = \"\";",
    "                    if (result != null) {",
    "                        rstr = JSON.stringify(result, null, 4);",
    "                    }",
    "                    $('#result').html(rstr);",
    "                    currentPlugin.progress.stop();",
    "                }",
    "            });",
    "        }",
    "        else {",
    "            $('#errortext').html(\"No plugin\");",
    "        }",
    "    }",
    "",
    "    function main() {",
    "",
    "        const params = new URLSearchParams(window.location.search);",
    "        const pluginName = params.get(\"plugin\");",
    "        const pluginType = params.get(\"type\");",
    "",
    "        $('#mode').on(\"change\", function(event) {",
    "            loadPluginDefinitions( null, null );",
    "        });",
    "        $('#pluginlist').on(\"change\", updatePluginSetup);",
    "        $('#pluginlist').keypress(function () {",
    "            $('#submit').focus();",
    "        });",
    "",
    "",
    "        $('#submit').click(callPlugin);",
    "",
    "        loadPluginDefinitions( pluginName, pluginType );",
    "    }",
    "",
    "    CommonHeader.ready(main, 10, true, null, false);",
    "</script>",
    "",
    "<style>",
    "",
    "    .container.loading .modal {",
    "        display: block;",
    "    }",
    "",
    "    tr#mode {",
    "        padding-bottom: 20px;",
    "    }",
    "",
    "    #modeArea {",
    "        display: inline;",
    "    }",
    "",
    "    #modeArea input {",
    "        margin-right: 3px;",
    "    }",
    "",
    "    #modeArea label {",
    "        margin-right: 6px;",
    "    }",
    "",
    "    #pluginSetup {",
    "        border-spacing: 0px;",
    "    }",
    "",
    "    #pluginSetup tbody {",
    "        border-spacing: 3px;",
    "    }",
    "",
    "    #pluginSetup tr {",
    "        display: block;",
    "    }",
    "",
    "    #pluginSetup td {",
    "        font-size: 100%;",
    "        padding-left: 0px;",
    "        padding-top: 0px;",
    "        padding-bottom: 0px;",
    "    }",
    "",
    "    #plugin {",
    "        margin-bottom: 20px;",
    "    }",
    "",
    "    #plugin td {",
    "        vertical-align: middle",
    "    }",
    "",
    "    #description_row td {",
    "        vertical-align: middle;",
    "        padding-left: 5px;",
    "        padding-bottom: 20px;",
    "    }",
    "",
    "    #description {",
    "        vertical-align: middle font-size: 100%;",
    "        font-weight: bold;",
    "        /*color: #777777;*/",
    "    }",
    "",
    "    #graph_row td {",
    "        padding-top: 9px;",
    "        padding-bottom: 7px;",
    "        padding-left: 1px;",
    "        vertical-align: middle;",
    "    }",
    "",
    "    #graphlist {",
    "        vertical-align: middle font-size: 100%;",
    "        /*color: #777777;*/",
    "    }",
    "",
    "    #param_headrow td {",
    "        background-color: #F8F8F8;",
    "        padding-left: 5px;",
    "        padding-bottom: 5px;",
    "    }",
    "",
    "    .col1 {",
    "        min-width: 140px;",
    "        max-width: 140px;",
    "        vertical-align: top;",
    "    }",
    "",
    "    .col2 {",
    "        min-width: 80px;",
    "        max-width: 80px;",
    "    }",
    "",
    "    .col3 {",
    "        min-width: 569px;",
    "        max-width: 569px;",
    "        padding-right: 0px;",
    "    }",
    "",
    "    .paramName {",
    "        font-family: Consolas, monospace;",
    "        font-weight: bold;",
    "        text-align: right;",
    "        padding-right: 20px;",
    "    }",
    "",
    "    .paramType {",
    "        font-family: Consolas, monospace;",
    "    }",
    "",
    "    .parameterValue {",
    "        min-width: 100%;",
    "        max-width: 100%;",
    "        font-size: 95%;",
    "        font-family: Consolas, monospace;",
    "        min-height: 26px;",
    "        height: 26px;",
    "    }",
    "",
    "    .paramValue pre {",
    "        margin: 1px;",
    "    }",
    "",
    "    .parameter_row td {",
    "        vertical-align: middle",
    "    }",
    "",
    "",
    "    button {",
    "        cursor: pointer;",
    "    }",
    "",
    "    #submit {",
    "        width: 90px;",
    "        font-weight: bold;",
    "        margin-right: 20px;",
    "    }",
    "",
    "    #result {",
    "        font-family: Consolas, monospace;",
    "        font-size: 100%;",
    "        font-weight: bold;",
    "        background-color: #F8F8F8;",
    "        border: 1px solid #CCCCCC;",
    "        outline: none;",
    "        min-width: 795px;",
    "        min-height: 100px;",
    "        margin-bottom: 10px;",
    "        margin-left: 3px;",
    "    }",
    "",
    "    #result_box {",
    "        margin-top: 30px;",
    "    }",
    "",
    "    #result_box label {",
    "        margin-left: 8px;",
    "        font-weight: bold;",
    "    }",
    "",
    "    #httpinfo {",
    "        font-family: Consolas, monospace;",
    "        font-size: 70%;",
    "        color: #808080;",
    "    }",
    "",
    "",
    "    select {",
    "        margin-right: 10px;",
    "        width: 180px;",
    "    }",
    "",
    "    label {",
    "        margin-right: 0px;",
    "    }",
    "",
    "    /*    .area {",
    "      min-width: 800px;",
    "      max-width: 800px;",
    "    }*/",
    "",
    "    .val {",
    "        padding-right: 10px;",
    "        text-align: right;",
    "        font-family: Consolas, monospace;",
    "        font-size: 90%;",
    "    }",
    "",
    "    .vint {",
    "        color: #0000C0;",
    "    }",
    "",
    "    .vfloat {",
    "        color: #8e44ad;",
    "    }",
    "",
    "    .vstr {",
    "        color: #007050;",
    "    }",
    "",
    "    .vjson {",
    "        color: #af601a;",
    "    }",
    "",
    "    .vany {",
    "        color: #000000;",
    "    }",
    "",
    "    .valid {",
    "        background-color: unset;",
    "    }",
    "",
    "    .invalid {",
    "        background-color: #fdedec;",
    "    }",
    "",
    "",
    "    .faded {",
    "        color: #C0C0C0;",
    "    }",
    "</style>",
    "",
    0
};



const char *VGX_BUILTIN_HTML_search[] = {
    "<!DOCTYPE html>",
    "<!--",
    "",
    "  VGX Server",
    "  Distributed engine for plugin-based graph and vector search",
    "",
    "  Module:  vgx",
    "  File:    search.html",
    "  Author:  Stian Lysne <...>",
    "",
    "  Copyright Â© 2025 Rakuten, Inc.",
    "",
    "  Licensed under the Apache License, Version 2.0 (the \"License\");",
    "  you may not use this file except in compliance with the License.",
    "  You may obtain a copy of the License at",
    "",
    "      http://www.apache.org/licenses/LICENSE-2.0",
    "",
    "  Unless required by applicable law or agreed to in writing, software",
    "  distributed under the License is distributed on an \"AS IS\" BASIS,",
    "  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
    "  See the License for the specific language governing permissions and",
    "  limitations under the License.",
    "",
    "-->",
    "",
    "<html>",
    "<head>",
    "    <title>VGX Search</title>",
    "    <script src=\"jquery.js\"></script>",
    "    <script src=\"header.js\"></script>",
    "    <link rel=\"stylesheet\" href=\"vgx.css\">",
    "</head>",
    "<body class=\"disable_select\">",
    "    <div style=\"margin: 8\">",
    "        <div id=\"commonHeaderDiv\"></div>",
    "",
    "        <div class=\"container\">",
    "            <table id=\"searchsetup\">",
    "                <tr id=\"graph\" class=\"inputrow\">",
    "                    <td class=\"col1\">",
    "                        Graph:",
    "                    </td>",
    "                    <td class=\"col2\">",
    "                        <select name=\"graphlist\" id=\"graphlist\">",
    "                        </select>",
    "                        <label for=\"order\">Order: <span class=\"val vint\" id=\"order\"></span></label>",
    "                        <label for=\"size\">Size: <span class=\"val vint\" id=\"size\"></span></label>",
    "                    </td>",
    "                </tr>",
    "                <tr id=\"mode\" class=\"inputrow\">",
    "                    <td class=\"col1\">",
    "                        Mode:",
    "                    </td>",
    "                    <td class=\"col2\" id=\"querymethodArea\">",
    "                        <input type=\"radio\" class=\"querymethod retrigger\" id=\"neighborhood\" name=\"querymethod\" value=\"1\" checked>",
    "                        <label for=\"neighborhood\">Neighborhood</label>",
    "                        <input type=\"radio\" class=\"querymethod retrigger\" id=\"vertices\" name=\"querymethod\" value=\"2\">",
    "                        <label for=\"vertices\">Vertices</label>",
    "                        <input type=\"radio\" class=\"querymethod retrigger\" id=\"arcs\" name=\"querymethod\" value=\"3\">",
    "                        <label for=\"arcs\">Arcs</label>",
    "                        <input type=\"radio\" class=\"querymethod retrigger\" id=\"vertex\" name=\"querymethod\" value=\"4\">",
    "                        <label for=\"vertex\">Vertex</label>",
    "                        <input type=\"radio\" class=\"querymethod retrigger\" id=\"expression\" name=\"querymethod\" value=\"5\">",
    "                        <label for=\"expression\">Expression</label>",
    "                    </td>",
    "                </tr>",
    "                <tr id=\"execute\" class=\"inputrow\">",
    "                    <td id=\"searcharrow\" class=\"col1\">",
    "                        &#10132;",
    "                    </td>",
    "                    <td class=\"col2\">",
    "                        <button id=\"submit\" type=\"button\">Execute</button>",
    "                        <label for=\"autorefresh\"><input type=\"checkbox\" id=\"autorefresh\" name=\"autorefresh\">Auto Repeat</label>",
    "                        <span id=\"refreshrateArea\" style=\"display: none\"><label for=\"refreshrate\"><input type=\"range\" id=\"refreshrate\" name=\"refreshrate\" min=\"0\" max=\"100\" step=\"5\">Fast</label></span>",
    "                    </td>",
    "                </tr>",
    "                <tr id=\"anchorArea\" class=\"inputrow\">",
    "                    <td class=\"col1\">",
    "                        Vertex:",
    "                    </td>",
    "                    <td class=\"col2\">",
    "                        <input id=\"anchor\" type=\"text\"></label></span>",
    "                    </td>",
    "                </tr>",
    "                <tr id=\"arcArea\" class=\"inputrow searchfilter\">",
    "                    <td class=\"col1\">",
    "                        Arc:",
    "                    </td>",
    "                    <td class=\"col2\">",
    "                        <select class=\"retrigger arc\" name=\"arcrel\" id=\"arcrel\">",
    "                        </select>",
    "                        <label for=\"arcdir\"></label>",
    "                        <select class=\"retrigger arc\" name=\"arcdir\" id=\"arcdir\">",
    "                            <option value=\"0\">*</option>",
    "                            <option value=\"2\">OUT</option>",
    "                            <option value=\"1\">IN</option>",
    "                        </select>",
    "                        <label for=\"arcmod\"></label>",
    "                        <select class=\"retrigger arc\" name=\"arcmod\" id=\"arcmod\">",
    "                            <option value=\"0\">*</option>",
    "                            <option value=\"1\">STAT</option>",
    "                            <optgroup label=\"Value\">",
    "                                <option value=\"5\">INT</option>",
    "                                <option value=\"6\">UINT</option>",
    "                                <option value=\"23\">FLT</option>",
    "                            </optgroup>",
    "                            <optgroup label=\"Accumulator\">",
    "                                <option value=\"8\">CNT</option>",
    "                                <option value=\"25\">ACC</option>",
    "                            </optgroup>",
    "                            <optgroup label=\"Timestamp\">",
    "                                <option value=\"12\">TMC</option>",
    "                                <option value=\"13\">TMM</option>",
    "                                <option value=\"14\">TMX</option>",
    "                            </optgroup>",
    "                            <optgroup label=\"Special\">",
    "                                <option value=\"18\">SIM</option>",
    "                                <option value=\"4\">LSH</option>",
    "                                <option value=\"19\">DIST</option>",
    "                            </optgroup>",
    "                            <optgroup label=\"Aggregated\">",
    "                                <option value=\"10\">INTAGGR</option>",
    "                                <option value=\"27\">FLTAGGR</option>",
    "                            </optgroup>",
    "                        </select>",
    "                        <label for=\"arcvalcond\"></label>",
    "                        <select class=\"retrigger arc\" name=\"arcvalcond\" id=\"arcvalcond\">",
    "                            <option value=\"0\">*</option>",
    "                            <option value=\"6\">&gt;</option>",
    "                            <option value=\"8\">&ge;</option>",
    "                            <option value=\"12\">=</option>",
    "                            <option value=\"4\">&le;</option>",
    "                            <option value=\"10\">&lt;</option>",
    "                            <option value=\"14\">&ne;</option>",
    "                        </select>",
    "                        <span><label for=\"arcval\"><input id=\"arcval\" type=\"text\"></label></span>",
    "                    </td>",
    "                </tr>",
    "                <tr id=\"query_box\" class=\"inputrow searchfilter\">",
    "                    <td class=\"col1\">Query:</td>",
    "                    <td class=\"col2\">",
    "                        <pre><textarea id=\"querytext\" name=\"query\" rows=3 spellcheck=\"false\">{}</textarea></pre>",
    "                    </td>",
    "                </tr>",
    "                <tr id=\"simple_output\" class=\"outputrow\">",
    "                    <td class=\"col1\">Result:</td>",
    "                    <td class=\"col2\">",
    "                        <pre><textarea id=\"evalresult\" name=\"eval\" rows=1 spellcheck=\"false\" readonly=readonly></textarea></pre>",
    "                    </td>",
    "                </tr>",
    "                <tr id=\"collectSelect\" class=\"inputrow searchfilter\">",
    "                    <td class=\"col1\">Collect:</td>",
    "                    <td class=\"col2\">",
    "                        <select class=\"retrigger\" name=\"collect\" id=\"collect\">",
    "                            <option class=\"collect\" id=\"collectArcs\" value=\"1\" selected>Arcs</option>",
    "                            <option class=\"collect\" id=\"collectVertices\" value=\"2\">Vertices</option>",
    "                            <option class=\"collect\" id=\"collectScan\" value=\"-1\">Scan</option>",
    "                            <option class=\"collect\" id=\"collectNone\" value=\"0\">None</option>",
    "                        </select>",
    "                        <label for=\"memory\">Memory Slots:</label>",
    "                        <select class=\"retrigger\" name=\"memory\" id=\"memory\">",
    "                            <option value=\"0\" selected>none</option>",
    "                            <option value=\"4\">4</option>",
    "                            <option value=\"16\">16</option>",
    "                            <option value=\"64\">64</option>",
    "                            <option value=\"256\">256</option>",
    "                            <option value=\"1024\">1k</option>",
    "                            <option value=\"4096\">4k</option>",
    "                            <option value=\"16384\">16k</option>",
    "                            <option value=\"65536\">64k</option>",
    "                            <option value=\"262144\">256k</option>",
    "                            <option value=\"1048576\">1M</option>",
    "                            <option value=\"2097152\">2M</option>",
    "                        </select>",
    "                        <span id=\"memorySlotsShowCheck\">",
    "                            <label for=\"renderMemory\"><input class=\"retrigger\" type=\"checkbox\" id=\"renderMemory\" name=\"renderMemory\">Show</label>",
    "                        </span>",
    "                        <label for=\"sharedMemory\"><input class=\"retrigger\" type=\"checkbox\" id=\"sharedMemory\" name=\"sharedMemory\">Shared</label></span>",
    "                    </td>",
    "                </tr>",
    "                <tr id=\"resultControlArea\" class=\"inputrow searchfilter\">",
    "                    <td class=\"col1\">Result:</td>",
    "                    <td class=\"col2\">",
    "                        <label for=\"resultformat\">Format:</label>",
    "                        <select class=\"retrigger\" name=\"resultformat\" id=\"resultformat\">",
    "                            <option value=\"0x10000000\" selected>String</option>",
    "                            <option value=\"0x20000000\">List</option>",
    "                            <option value=\"0x30000000\">Dict</option>",
    "                            <option value=\"0x00000000\">Simple</option>",
    "                            <option id=\"resultformatMemory\" value=\"-1\">Memory</option>",
    "                        </select>",
    "                        <span id=\"hitsArea\">",
    "                            <label for=\"hits\">Hits:</label>",
    "                            <select class=\"retrigger\" name=\"hits\" id=\"hits\">",
    "                                <option value=\"0\">0</option>",
    "                                <option value=\"1\">1</option>",
    "                                <option value=\"5\">5</option>",
    "                                <option value=\"10\" selected>10</option>",
    "                                <option value=\"25\">25</option>",
    "                                <option value=\"100\">100</option>",
    "                                <option value=\"1000\">1000</option>",
    "                                <option value=\"-1\">All</option>",
    "                            </select>",
    "                        </span>",
    "                        <span id=\"searchCountsArea\"><label for=\"searchCounts\"><input class=\"retrigger\" type=\"checkbox\" id=\"searchCounts\" name=\"searchCounts\">Count</label></span>",
    "                        <span id=\"sortArea\">",
    "                            <label for=\"sorted\"><input class=\"retrigger\" type=\"checkbox\" id=\"sorted\" name=\"sorted\">Sort</label>",
    "                            <label for=\"sortby\">By:</label>",
    "                            <select class=\"retrigger\" name=\"sortby\" id=\"sortby\">",
    "                                <optgroup label=\"Value\">",
    "                                    <option value=\"16\">Arc</option>",
    "                                    <option value=\"192\">Rank Score</option>",
    "                                    <option value=\"1536\">Hamming Distance</option>",
    "                                    <option value=\"1792\">Similarity</option>",
    "                                </optgroup>",
    "                                <optgroup label=\"Identifier\">",
    "                                    <hr>",
    "                                    <option value=\"512\">Vertex Name</option>",
    "                                    <option value=\"256\">Vertex Internal</option>",
    "                                    <option value=\"96\">Tail Name</option>",
    "                                    <option value=\"64\">Tail Internal</option>",
    "                                </optgroup>",
    "                                <optgroup label=\"Time\">",
    "                                    <option value=\"2048\">Creation</option>",
    "                                    <option value=\"2304\">Modification</option>",
    "                                    <option value=\"2560\">Expiration</option>",
    "                                </optgroup>",
    "                                <optgroup label=\"Degree\">",
    "                                    <option value=\"1024\">In</option>",
    "                                    <option value=\"1280\">Out</option>",
    "                                    <option value=\"768\">Total</option>",
    "                                </optgroup>",
    "                                <optgroup label=\"Internal\">",
    "                                    <option value=\"32\">Vertex Address</option>",
    "                                    <option value=\"128\">Native</option>",
    "                                    <option value=\"160\">Random</option>",
    "                                </optgroup>",
    "                            </select>",
    "                            <span id=\"sortdirArea\">",
    "                                &udarr;",
    "                                <label for=\"S_ASC\"><input type=\"radio\" class=\"sortdir retrigger\" id=\"S_ASC\" name=\"sortdir\" value=\"1\" checked></label>",
    "                                <label for=\"S_DESC\"><input type=\"radio\" class=\"sortdir retrigger\" id=\"S_DESC\" name=\"sortdir\" value=\"2\"></label>",
    "                            </span>",
    "                        </span>",
    "                    </td>",
    "                </tr>",
    "                <tr id=\"rankArea\" class=\"inputrow searchfilter\">",
    "                    <td class=\"col1\">Rank:</td>",
    "                    <td class=\"col2\">",
    "                        <input id=\"rank\" type=\"text\" value=\"1\">",
    "                    </td>",
    "                </tr>",
    "                <tr id=\"selectArea\" class=\"inputrow searchfilter\">",
    "                    <td class=\"col1\">Select:</td>",
    "                    <td class=\"col2\">",
    "                        <input id=\"select\" type=\"text\" value=\"\">",
    "                    </td>",
    "                </tr>",
    "                <tr id=\"fieldsArea\" class=\"inputrow searchfilter\">",
    "                    <td class=\"col1\">Fields:</td>",
    "                    <td class=\"col2\">",
    "                        <div id=\"fields\">",
    "                            <div>",
    "                                <span class=\"anchorfield\"><label for=\"F_ANCHOR\"><input type=\"checkbox\" id=\"F_ANCHOR\" name=\"F_ANCHOR\" value=\"0x1\">Anchor</label></span>",
    "                                <label for=\"F_ID\"><input type=\"checkbox\" id=\"F_ID\" name=\"F_ID\" value=\"0x4\">Vertex</label>",
    "                                <label for=\"F_TYPE\"><input type=\"checkbox\" id=\"F_TYPE\" name=\"F_TYPE\" value=\"0x10\">Type</label>",
    "                                <label for=\"F_OBID\"><input type=\"checkbox\" id=\"F_OBID\" name=\"F_OBID\" value=\"0x8\">InternalID</label>",
    "                                <span class=\"anchorfield\"><label for=\"F_ANCHOR_OBID\"><input type=\"checkbox\" id=\"F_ANCHOR_OBID\" name=\"F_ANCHOR_OBID\" value=\"0x2\">Anchor InternalID</label></span>",
    "                                <label for=\"F_ADDR\"><input type=\"checkbox\" id=\"F_ADDR\" name=\"F_ADDR\" value=\"0x2000000\">Address</label>",
    "                                <label for=\"F_DETAILS\"><input type=\"checkbox\" id=\"F_DETAILS\" name=\"F_DETAILS\" value=\"0xd000000\">Details</label>",
    "                            </div>",
    "                            <div id=\"arcFields\">",
    "                                <label for=\"F_ARC\"><input type=\"checkbox\" id=\"F_ARC\" name=\"F_ARC\" value=\"0xf00\">Arc</label>",
    "                                <span id=\"arcelem\">",
    "                                    (",
    "                                    <label for=\"F_ARCDIR\">D<input type=\"checkbox\" class=\"arcelem\" id=\"F_ARCDIR\" name=\"F_ARCDIR\" value=\"0x100\"></label>",
    "                                    <label for=\"F_REL\">R<input type=\"checkbox\" class=\"arcelem\" id=\"F_REL\" name=\"F_REL\" value=\"0x200\"></label>",
    "                                    <label for=\"F_MOD\">M<input type=\"checkbox\" class=\"arcelem\" id=\"F_MOD\" name=\"F_MOD\" value=\"0x400\"></label>",
    "                                    <label for=\"F_VAL\">V<input type=\"checkbox\" class=\"arcelem\" id=\"F_VAL\" name=\"F_VAL\" value=\"0x800\"></label>",
    "                                    )",
    "                                </span>",
    "                            </div>",
    "                            <div>",
    "                                <label for=\"F_RANK\"><input type=\"checkbox\" id=\"F_RANK\" name=\"F_RANK\" value=\"0x10000\">Rank</label>",
    "                                <label for=\"F_TSTAMP\"><input type=\"checkbox\" id=\"F_TSTAMP\" name=\"F_TSTAMP\" value=\"0x700000\">Timestamp</label>",
    "                                <label for=\"F_DEGREES\"><input type=\"checkbox\" id=\"F_DEGREES\" name=\"F_DEGREES\" value=\"0xe0\">Degree</label>",
    "                                <label for=\"F_PROP\"><input type=\"checkbox\" id=\"F_PROP\" name=\"F_PROP\" value=\"0x2000\">Properties</label>",
    "                                <label for=\"F_VEC\"><input type=\"checkbox\" id=\"F_VEC\" name=\"F_VEC\" value=\"0x1000\">Vector</label>",
    "                                <label for=\"F_RLV\"><input type=\"checkbox\" id=\"F_RLV\" name=\"F_RLV\" value=\"0x70000\">Simscore</label>",
    "                            </div>",
    "                            <div>",
    "                            </div>",
    "                        </div>",
    "                    </td>",
    "                </tr>",
    "            </table>",
    "",
    "            <div id=\"result_box\">",
    "                <label for=\"resulttext\"></label>",
    "                <pre><textarea class=\"area\" id=\"resulttext\" name=\"result\" rows=20 readonly=readonly></textarea></pre>",
    "            </div>",
    "            <div id=\"message_box\">",
    "                <pre><div class=\"area\" id=\"infotext\"></div></pre>",
    "                <pre><div class=\"area\" id=\"errortext\"></div></pre>",
    "            </div>",
    "            <div class=\"modal\"><span id=\"busymsg\"></span></div>",
    "        </div>",
    "",
    "        <div id=\"commonFooterDiv\"></div>",
    "    </div>",
    "</body>",
    "</html>",
    "",
    "<style>",
    "",
    "    .container {",
    "        width: 1024;",
    "    }",
    "",
    "    .container.loading .modal {",
    "        display: block;",
    "    }",
    "",
    "    #querymethodArea label {",
    "        margin-right: 20px;",
    "    }",
    "",
    "    #searcharrow {",
    "        text-align: right;",
    "    }",
    "",
    "    #searchsetup {",
    "        border-spacing: 0px;",
    "    }",
    "",
    "    #searchsetup tbody {",
    "        border-spacing: 0px;",
    "    }",
    "",
    "    #searchsetup tr {",
    "        display: block;",
    "        margin-bottom: 10px;",
    "    }",
    "",
    "    #searchsetup td {",
    "        font-size: 100%;",
    "        padding-left: 0px;",
    "    }",
    "",
    "    .col1 {",
    "        min-width: 60px;",
    "        max-width: 60px;",
    "        vertical-align: top;",
    "    }",
    "",
    "    .col2 {",
    "        min-width: 735px;",
    "        max-width: 735px;",
    "    }",
    "",
    "    button {",
    "        cursor: pointer;",
    "    }",
    "",
    "    #submit {",
    "        width: 90px;",
    "        font-weight: bold;",
    "        margin-right: 20px;",
    "    }",
    "",
    "    #execute {",
    "        margin-top: 15px !important;",
    "        margin-bottom: 15px !important;",
    "        height: 30px;",
    "    }",
    "",
    "    #refreshrate {",
    "        margin-left: 10px;",
    "        vertical-align: middle;",
    "        width: 100px;",
    "    }",
    "",
    "    #query_box .col2 {",
    "        box-sizing: content-box;",
    "    }",
    "",
    "    #querytext {",
    "        min-width: 100%;",
    "        max-width: 100%;",
    "    }",
    "",
    "    #evalresult {",
    "        font-family: Consolas, monospace;",
    "        font-size: 100%;",
    "        font-weight: bold;",
    "        background-color: #F8F8F8;",
    "        border: 1px solid #CCCCCC;",
    "        outline: none;",
    "        margin-bottom: 30px;",
    "        min-width: 735px;",
    "    }",
    "",
    "    select {",
    "        margin-right: 10px;",
    "    }",
    "",
    "    .arc {",
    "        margin-right: 1px;",
    "    }",
    "",
    "    .arcelem {",
    "        margin-left: 3px;",
    "        margin-right: -5px;",
    "    }",
    "",
    "    label {",
    "        margin-right: 0px;",
    "    }",
    "",
    "    div #fields label {",
    "        margin-right: 10px;",
    "    }",
    "",
    "    #anchor {",
    "        width: 400px;",
    "        font-size: 100%;",
    "        font-family: Consolas, monospace;",
    "    }",
    "",
    "    #arcval {",
    "        width: 80px;",
    "    }",
    "",
    "    #querytext {",
    "        font-size: 100%;",
    "        font-family: Consolas, monospace;",
    "    }",
    "",
    "    #rank {",
    "        font-size: 100%;",
    "        font-family: Consolas, monospace;",
    "        min-width: 735px;",
    "    }",
    "",
    "    #select {",
    "        font-size: 100%;",
    "        font-family: Consolas, monospace;",
    "        min-width: 735px;",
    "    }",
    "",
    "    .area {",
    "        min-width: 793px;",
    "        max-width: 800px;",
    "    }",
    "",
    "    #resulttext {",
    "        font-size: 95%;",
    "        font-family: Consolas, monospace;",
    "        font-weight: bold;",
    "        color: #333333;",
    "        background-color: #F8F8F8;",
    "        border: 1px solid #CCCCCC;",
    "        outline: none;",
    "        max-width: 1600px;",
    "        margin-left: 2px;",
    "    }",
    "",
    "    .val {",
    "        padding-right: 10px;",
    "        text-align: right;",
    "        font-family: Consolas, monospace;",
    "        font-size: 90%;",
    "    }",
    "",
    "    .vint {",
    "        color: #0000C0;",
    "    }",
    "",
    "    .vstr {",
    "        color: #007050;",
    "    }",
    "",
    "    .faded {",
    "        color: #C0C0C0;",
    "    }",
    "</style>",
    "",
    "<script>",
    "    class Progress {",
    "        t0 = 0;",
    "        delayer = null;",
    "        updater = null;",
    "        display = false;",
    "",
    "        constructor() {",
    "            this.t0 = Date.now();",
    "            this.delayer = setTimeout(this.refresh.bind(this), 750);",
    "            this.display = false;",
    "            $('#submit').prop(\"disabled\", true);",
    "        }",
    "",
    "",
    "        refresh() {",
    "            if (this.delayer) {",
    "                clearTimeout(this.delayer);",
    "                this.delayer = null;",
    "            }",
    "            if (!this.display) {",
    "                $('.container').addClass(\"loading\");",
    "                this.display = true;",
    "                this.updater = setInterval(this.refresh.bind(this), 10);",
    "            }",
    "            let t1 = Date.now();",
    "            let t_100 = Math.floor((t1 - this.t0) / 100.0);",
    "            let t_elapse = t_100 / 10.0;",
    "            $('#busymsg').html(\"\" + t_elapse.toFixed(1) + \" s\");",
    "        }",
    "",
    "",
    "        stop() {",
    "            $('#submit').prop(\"disabled\", false);",
    "            $('#busymsg').html(\"\");",
    "            $('.container').removeClass(\"loading\");",
    "            if (this.delayer) {",
    "                clearTimeout(this.delayer);",
    "                this.delayer = null;",
    "            }",
    "            if (this.updater) {",
    "                clearInterval(this.updater);",
    "                this.updater = null;",
    "            }",
    "        }",
    "    }",
    "",
    "",
    "",
    "    function main() {",
    "",
    "        let autoRefresher = null;",
    "",
    "        $.get(\"/vgx/graphsum\", function (data, textStatus, jqXHR) {",
    "            const names = data[\"response\"][\"graphsum\"][\"names\"];",
    "            let opt = null;",
    "            let first = null;",
    "            for (var i = 0; i < names.length; i++) {",
    "                opt = document.createElement(\"option\");",
    "                opt.value = names[i];",
    "                if (first == null) {",
    "                    first = names[i];",
    "                }",
    "                opt.innerHTML = names[i];",
    "                $('#graphlist').append(opt);",
    "            }",
    "            opt = document.createElement(\"option\");",
    "            opt.value = \"system\";",
    "            if (first == null) {",
    "                first = \"system\";",
    "            }",
    "            opt.innerHTML = \"_system\";",
    "            $('#graphlist').append(opt);",
    "            $('#graphlist').val(first).change();",
    "        });",
    "",
    "        let previousOrder = 0;",
    "        let previousSize = 0;",
    "        let graphUpdater = null;",
    "        function updateGraphInfo() {",
    "            const graph = $('#graphlist').find(':selected').val();",
    "            if (graph == null) {",
    "                return;",
    "            }",
    "            const url = \"/vgx/builtin/status?simple=1&graph=\" + graph;",
    "            $.get(url, function (data, textStatus, jqXHR) {",
    "                let pause = 2000;",
    "                try {",
    "                    const base = data[\"response\"][\"base\"];",
    "                    const order = base[\"order\"];",
    "                    const size = base[\"size\"];",
    "                    $('#order').html(order.toLocaleString(\"en-US\"));",
    "                    $('#size').html(size.toLocaleString(\"en-US\"));",
    "                    if (order != previousOrder || size != previousSize) {",
    "                        previousOrder = order;",
    "                        previousSize = size;",
    "                        pause = 150;",
    "                    }",
    "                }",
    "                catch (error) {",
    "                }",
    "                finally {",
    "                    if (graphUpdater) {",
    "                        clearTimeout(graphUpdater);",
    "                    }",
    "                    graphUpdater = setTimeout(updateGraphInfo, pause);",
    "                }",
    "            }).fail(function (xhr, txt, err) {",
    "                if (graphUpdater) {",
    "                    clearTimeout(graphUpdater);",
    "                }",
    "                graphUpdater = setTimeout(updateGraphInfo, 5000);",
    "            });",
    "        }",
    "",
    "        function updateArcRelationships() {",
    "            const graph = $('#graphlist').find(':selected').val();",
    "            if (graph == null) {",
    "                return;",
    "            }",
    "            const url = \"/vgx/builtin/status?graph=\" + graph;",
    "            $.get(url, function (data, textStatus, jqXHR) {",
    "                $('#arcrel').find('option').remove();",
    "                let opt = document.createElement(\"option\");",
    "                opt.value = \"*\";",
    "                opt.innerHTML = \"*\";",
    "                $('#arcrel').append(opt);",
    "                const relsCodec = data[\"response\"][\"enum\"][\"relationship\"][\"codec\"];",
    "                let rels = Object.keys(relsCodec);",
    "                rels.sort();",
    "                for (var i = 0; i < rels.length; i++) {",
    "                    const rel = rels[i];",
    "                    opt = document.createElement(\"option\");",
    "                    opt.value = rel;",
    "                    opt.innerHTML = rel;",
    "                    $('#arcrel').append(opt);",
    "                }",
    "            });",
    "        }",
    "",
    "        let prevMethodNum = -1;",
    "        function updateMethodDisplay() {",
    "            const methodNum = parseInt($('.querymethod:checked').val());",
    "            let resultFormat = parseInt($('#resultformat').find(':selected').val());",
    "            const memorySlots = parseInt($('#memory').find(':selected').val());",
    "            let memDropdown = $('#resultformatMemory');",
    "            const renderMemory = $('#renderMemory').prop(\"checked\");",
    "",
    "            if (prevMethodNum != methodNum) {",
    "                $('#arcArea select').prop(\"disabled\", false);",
    "                if (resultFormat < 0 && renderMemory == false) {",
    "                    $('#resultformat').val(\"0x10000000\");",
    "                    resultFormat = 0x10000000;",
    "                }",
    "            }",
    "",
    "            const displayResultControls = resultFormat >= 0 ? \"block\" : \"none\";",
    "",
    "            // Display Show[x]",
    "            if (memorySlots > 0) {",
    "                memDropdown.prop(\"disabled\", false);",
    "                memDropdown.css(\"font-style\", \"normal\");",
    "                $('#memorySlotsShowCheck').css(\"display\", \"inline\");",
    "            }",
    "            // Hide Show[x] and disable Memory in Format dropdown",
    "            else {",
    "                memDropdown.prop(\"disabled\", true);",
    "                memDropdown.css(\"font-style\", \"italic\");",
    "                $('#memorySlotsShowCheck').css(\"display\", \"none\");",
    "                if (resultFormat < 0) {",
    "                    $('#resultformat').val(\"0\");",
    "                }",
    "            }",
    "",
    "            // Format=Memory for non-Expression mode: auto check mem render set and hide counts",
    "            if (resultFormat < 0 && methodNum != 5) {",
    "                $('#renderMemory').prop(\"checked\", true);",
    "                $('#searchCounts').prop(\"checked\", true);",
    "                $('#searchCountsArea').css(\"visibility\", \"hidden\");",
    "            }",
    "            else {",
    "                $('#searchCountsArea').css(\"visibility\", \"visible\");",
    "            }",
    "",
    "            $('#collect').prop(\"disabled\", false);",
    "            $('.outputrow').css(\"display\", \"none\");",
    "            $('#result_box').css(\"display\", \"block\");",
    "            switch (methodNum) {",
    "                case 1: /* Neighborhood */",
    "                    $('.searchfilter').css(\"display\", \"block\");",
    "                    $('#anchorArea').css(\"display\", \"block\");",
    "                    $('#arcArea').css(\"display\", \"block\");",
    "                    $('#arcFields').css(\"display\", \"block\");",
    "                    $('.anchorfield').css(\"display\", \"inline\");",
    "                    $('#selectArea').css(\"display\", displayResultControls);",
    "                    $('#fieldsArea').css(\"display\", displayResultControls);",
    "                    $('.collect').css(\"display\", \"inline\");",
    "                    $('#collectVertices').css(\"display\", \"none\");",
    "                    $('#collect').val(1);",
    "                    $('#anchor').focus();",
    "                    updateSortDisplay();",
    "                    updateArcConditionSelection();",
    "                    break;",
    "                case 2: /* Vertices */",
    "                    $('.searchfilter').css(\"display\", \"block\");",
    "                    $('#anchorArea').css(\"display\", \"none\");",
    "                    $('#arcArea').css(\"display\", \"none\");",
    "                    $('#querytext').focus();",
    "                    $('#arcFields').css(\"display\", \"none\");",
    "                    $('#selectArea').css(\"display\", displayResultControls);",
    "                    $('.anchorfield').css(\"display\", \"none\");",
    "                    $('#fieldsArea').css(\"display\", displayResultControls);",
    "                    $('.collect').css(\"display\", \"none\");",
    "                    $('#collectVertices').css(\"display\", \"inline\");",
    "                    $('#collect').val(2);",
    "                    updateSortDisplay();",
    "                    updateArcConditionSelection();",
    "                    break;",
    "                case 3: /* Arcs */",
    "                    $('.searchfilter').css(\"display\", \"block\");",
    "                    $('#anchorArea').css(\"display\", \"none\");",
    "                    $('#arcArea').css(\"display\", \"block\");",
    "                    $('#arcdir').val(2);",
    "                    $('#arcdir').prop(\"disabled\", true);",
    "                    $('#querytext').focus();",
    "                    $('#arcFields').css(\"display\", \"block\");",
    "                    $('.anchorfield').css(\"display\", \"inline\");",
    "                    $('#selectArea').css(\"display\", displayResultControls);",
    "                    $('#fieldsArea').css(\"display\", displayResultControls);",
    "                    $('.collect').css(\"display\", \"none\");",
    "                    $('#collectArcs').css(\"display\", \"inline\");",
    "                    $('#collect').val(1);",
    "                    updateSortDisplay();",
    "                    updateArcConditionSelection();",
    "                    break;",
    "                case 4: /* Vertex */",
    "                    $('.searchfilter').css(\"display\", \"none\");",
    "                    $('#anchorArea').css(\"display\", \"block\");",
    "                    $('#rankArea').css(\"display\", \"none\");",
    "                    $('#selectArea').css(\"display\", \"none\");",
    "                    $('#fieldsArea').css(\"display\", \"none\");",
    "                    $('#resultformat').val(\"0x10000000\");",
    "                    $('.collect').css(\"display\", \"none\");",
    "                    break;",
    "                case 5: /* Expression */",
    "                    $('.searchfilter').css(\"display\", \"none\");",
    "                    $('#anchorArea').css(\"display\", \"block\");",
    "                    $('#arcArea').css(\"display\", \"block\");",
    "                    $('#arcdir').val(2);",
    "                    $('#arcdir').prop(\"disabled\", true);",
    "                    $('#arcvalcond').val(12);",
    "                    $('#arcvalcond').prop(\"disabled\", true);",
    "                    $('#query_box').css(\"display\", \"block\");",
    "                    $('.outputrow').css(\"display\", \"block\");",
    "                    $('.collect').css(\"display\", \"none\");",
    "                    $('#collectSelect').css(\"display\", \"block\");",
    "                    $('#collect').val(0);",
    "                    $('#collect').prop(\"disabled\", true);",
    "                    $('#resultformat').val(\"-1\");",
    "                    $('#querytext').focus();",
    "                    if (memorySlots == 0) {",
    "                        $('#result_box').css(\"display\", \"none\");",
    "                    }",
    "                    updateArcConditionSelection();",
    "                    break;",
    "",
    "            }",
    "            if (methodNum != prevMethodNum) {",
    "                switch (methodNum) {",
    "                    case 1: /* Neighborhood */",
    "                        $('#querytext').val(\"{}\");",
    "                        break;",
    "                    case 2: /* Vertices  */",
    "                        $('#querytext').val(\"{'condition':{}}\");",
    "                        break;",
    "                    case 3: /* Arcs */",
    "                        $('#querytext').val(\"{'condition':{}}\");",
    "                        break;",
    "                    case 4: /* Vertex */",
    "                        $('#querytext').val(\"\");",
    "                        break;",
    "                    case 5: /* Expression */",
    "                        $('#querytext').val(\"0\");",
    "                        break;",
    "                }",
    "            }",
    "            prevMethodNum = methodNum;",
    "        }",
    "",
    "        function updateArcConditionSelection() {",
    "            if ($('#arcmod').val() == 0) {",
    "                $('#arcvalcond').prop('hidden', true);",
    "                $('#arcval').prop('hidden', true);",
    "            }",
    "            else {",
    "                $('#arcvalcond').prop('hidden', false);",
    "                if ($('#arcvalcond').val() != 0) {",
    "                    $('#arcval').prop('hidden', false);",
    "                    $('#arcval').focus();",
    "                    if ($('#arcval').val() == null) {",
    "                        $('#arcval').html(\"0\");",
    "                    }",
    "                }",
    "                else {",
    "                    $('#arcval').prop('hidden', true);",
    "                }",
    "            }",
    "        }",
    "",
    "        function updateSortDisplay() {",
    "            const resultFormat = parseInt($('#resultformat').find(':selected').val());",
    "            if (resultFormat >= 0) {",
    "                $('#hitsArea').css(\"display\", \"inline\");",
    "                $('#sortArea').css(\"display\", \"inline\");",
    "                let sortby = 0;",
    "                if ($('#sorted').prop(\"checked\") == false) {",
    "                    $('#sortby').prop(\"disabled\", true);",
    "                    $('#sortdirArea').prop('hidden', true);",
    "                }",
    "                else {",
    "                    $('#sortby').prop(\"disabled\", false);",
    "                    $('#sortdirArea').prop('hidden', false);",
    "                    sortby = parseInt($('#sortby').find(':selected').val());",
    "                    $('#searchCounts').prop(\"checked\", true);",
    "                }",
    "",
    "                if (sortby == 192 && resultFormat >= 0) { /* S_RANK */",
    "                    $('#rankArea').css(\"display\", \"block\");",
    "                    $('#rank').focus();",
    "                }",
    "                else {",
    "                    $('#rankArea').css(\"display\", \"none\");",
    "                }",
    "            }",
    "            else {",
    "                $('#hitsArea').css(\"display\", \"none\");",
    "                $('#sortArea').css(\"display\", \"none\");",
    "                $('#rankArea').css(\"display\", \"none\");",
    "            }",
    "        }",
    "",
    "        function updateArcSelection() {",
    "            if ($('#F_ARC').prop(\"checked\") == true) {",
    "                $('.arcelem').prop(\"checked\", true);",
    "            }",
    "            else {",
    "                $('.arcelem').prop(\"checked\", false);",
    "            }",
    "            performSearch();",
    "        }",
    "",
    "        function updateArcElementSelection() {",
    "            if ($('#arcelem input:checked').length == 4) {",
    "                $('#F_ARC').prop(\"checked\", true);",
    "            }",
    "            else {",
    "                $('#F_ARC').prop(\"checked\", false);",
    "            }",
    "            performSearch();",
    "        }",
    "",
    "        //function displayLoader() {",
    "        //  $('#result_box').addClass( \"loading\" );",
    "        //}",
    "",
    "        let pause_ms = 1000;",
    "        //let loaderDisplayer = null;",
    "        function performSearch() {",
    "            const methodNum = parseInt($('.querymethod:checked').val());",
    "            const memorySlots = parseInt($('#memory').find(':selected').val());",
    "            let renderMemory = $('#renderMemory').prop('checked');",
    "            const sharedMemory = $('#sharedMemory').prop('checked');",
    "            const graph = $('#graphlist').find(':selected').val();",
    "            if (graph == null) {",
    "                return;",
    "            }",
    "            const anchor = $('#anchor').val();",
    "            const arcrel = $('#arcrel').val();",
    "            const arcdir = parseInt($('#arcdir').val());",
    "            const arcmod = parseInt($('#arcmod').val());",
    "            const arcvalcond = parseInt($('#arcvalcond').val());",
    "            const arcval = $('#arcval').val();",
    "            const expression = $('#querytext').val();",
    "            const autorefresh = $('#autorefresh').prop(\"checked\");",
    "            const refreshrate = parseInt($('#refreshrate').val());",
    "            let resultFormat = parseInt($('#resultformat').find(':selected').val());",
    "            const searchCounts = $('#searchCounts').prop(\"checked\");",
    "            const collect = parseInt($('#collect').find(':selected').val());",
    "            const hits = parseInt($('#hits').find(':selected').val());",
    "            let sorted = $('#sorted').prop(\"checked\");",
    "            let sortby = parseInt($('#sortby').find(':selected').val());",
    "            const sortdir = parseInt($('.sortdir:checked').val());",
    "            const rank = $('#rank').val();",
    "            const select = $('#select').val();",
    "",
    "            let fieldsFormat = 0;",
    "            const fields = $('#fields input:checked');",
    "            for (var i = 0; i < fields.length; i++) {",
    "                fieldsFormat |= parseInt(fields[i].value);",
    "            }",
    "",
    "            if (methodNum == 4) {",
    "                $('#resultformat').val(\"0x10000000\");",
    "                resultFormat = 0x10000000;",
    "            }",
    "",
    "",
    "            if (resultFormat >= 0) {",
    "                if (searchCounts || sorted) {",
    "                    resultFormat = (resultFormat | 0x80000000) >>> 0;",
    "                }",
    "                else {",
    "                    resultFormat &= 0x7fffffff;",
    "                }",
    "            }",
    "            else if (searchCounts) {",
    "                sorted = true;",
    "                sortby = 128;",
    "            }",
    "            else {",
    "                sorted = false;",
    "            }",
    "",
    "            let url = \"/vgx/builtin/\";",
    "            let url_query = \"&query={ 'timeout':10000\";",
    "",
    "            switch (methodNum) {",
    "                case 1:",
    "                    url += \"neighbor?graph=\" + graph;",
    "                    break;",
    "                case 2:",
    "                    url += \"vertices?graph=\" + graph;",
    "                    break;",
    "                case 3:",
    "                    url += \"arcs?graph=\" + graph;",
    "                    break;",
    "                case 4:",
    "                    url += \"vertex?graph=\" + graph;",
    "                    break;",
    "                case 5:",
    "                    url += \"evaluate?graph=\" + graph;",
    "                    break;",
    "            }",
    "",
    "            // Require anchor vertex for neighborhood and vertex lookup",
    "            if ((methodNum == 1 || methodNum == 4) && (anchor == null || anchor == \"\")) {",
    "                return;",
    "            }",
    "",
    "            if (anchor != null && anchor != \"\") {",
    "                if ((methodNum == 1 || methodNum == 4)) {",
    "                    url += \"&id=\" + anchor;",
    "                    if (methodNum == 4) {",
    "                        url += \"&maxarcs=100\";",
    "                    }",
    "                }",
    "                else if (methodNum == 5) {",
    "                    url += \"&tail=\" + anchor;",
    "                    url += \"&head=\" + anchor;",
    "                }",
    "            }",
    "",
    "            if (methodNum == 1 || methodNum == 3) {",
    "                let arc = \"('\" + arcrel + \"',\" + arcdir + \",\" + arcmod;",
    "                if (arcvalcond != 0 && arcmod != 0) {",
    "                    arc += \",\" + arcvalcond + \",\" + arcval + \")\";",
    "                }",
    "                else {",
    "                    arc += \")\";",
    "                }",
    "                if (methodNum == 1) {",
    "                    url_query += \",'arc':\" + arc;",
    "                }",
    "                else {",
    "                    url += \"&arc=\" + arc;",
    "                }",
    "            }",
    "            else if (methodNum == 5) {",
    "                let arc = \"('\" + arcrel + \"',\" + arcmod + \",\" + arcval + \")\";",
    "                url += \"&arc=\" + arc;",
    "            }",
    "",
    "            if (memorySlots > 0) {",
    "                url += \"&memory=(int)\" + memorySlots;",
    "                if (sharedMemory) {",
    "                    url += \"&sharedmem=(int)1\";",
    "                }",
    "            }",
    "            else if (methodNum == 5) {",
    "                url += \"&memory=(int)4\";",
    "            }",
    "",
    "            if (methodNum == 1) {",
    "                switch (collect) {",
    "                    case 0:",
    "                        url_query += \",'collect':C_NONE\";",
    "                        break;",
    "                    case 1:",
    "                        url_query += \",'collect':C_COLLECT\";",
    "                        break;",
    "                    case -1:",
    "                        url_query += \",'collect':C_SCAN\";",
    "                        break;",
    "                }",
    "            }",
    "            else if (methodNum == 2 || methodNum == 3) {",
    "                if (collect == -1 && sorted == false) {",
    "                    sorted = true;",
    "                }",
    "            }",
    "",
    "            if (methodNum != 4 && methodNum != 5) {",
    "                if (resultFormat >= 0) {",
    "                    url += \"&result=(int)\" + resultFormat;",
    "                    url += \"&fields=(int)\" + fieldsFormat;",
    "                    url += \"&hits=(int)\" + hits;",
    "                }",
    "                else {",
    "                    url += \"&hits=(int)0\";",
    "                }",
    "                if (sorted == true) {",
    "                    url += \"&sortby=(int)\" + (sortby + (sortby > 0 ? sortdir : 0));",
    "                    if (sortby == 192 && rank != null) { /* S_RANK */",
    "                        url += \"&rank=\" + rank;",
    "                    }",
    "                }",
    "                if (select != null && select != \"\") {",
    "                    url += \"&select=\" + select;",
    "                }",
    "                url_query += \"}\";",
    "                url += url_query;",
    "            }",
    "",
    "            if (resultFormat < 0 && methodNum != 5) {",
    "                $('#renderMemory').prop(\"checked\", true);",
    "                renderMemory = true;",
    "            }",
    "",
    "            if (methodNum == 5 && renderMemory) {",
    "                url += \"&memresult=1\";",
    "            }",
    "",
    "            //$('#submit').prop( \"disabled\", true );",
    "            //if( loaderDisplayer != null ) {",
    "            //  clearTimeout( loaderDisplayer );",
    "            //}",
    "            //loaderDisplayer = setTimeout( displayLoader, 1000 );",
    "            let progress = new Progress();",
    "            $.post( url, expression, function (data, textStatus, jqXHR) {",
    "                let message = \"\";",
    "                let response = \"\";",
    "                let nhits = 0;",
    "                let info = \"\";",
    "                try {",
    "                    const responseRaw = data[\"response\"];",
    "                    const exec_ms = parseFloat(data[\"exec_ms\"]);",
    "                    const messageRaw = data[\"message\"];",
    "                    if (responseRaw != null) {",
    "                        const counts = responseRaw['counts'];",
    "                        const memList = responseRaw[\"memory\"];",
    "                        let objToStringify = null;",
    "                        if (resultFormat >= 0) {",
    "                            switch (methodNum) {",
    "                                case 1:",
    "                                    objToStringify = responseRaw['neighborhood'];",
    "                                    nhits = counts ? counts['arcs'] : -1;",
    "                                    break;",
    "                                case 2:",
    "                                    objToStringify = responseRaw['vertices'];",
    "                                    nhits = counts ? counts['vertices'] : -1;",
    "                                    break;",
    "                                case 3:",
    "                                    objToStringify = responseRaw['arcs'];",
    "                                    nhits = counts ? counts['arcs'] : -1;",
    "                                    break;",
    "                                case 4:",
    "                                    objToStringify = responseRaw;",
    "                                    nhits = 1;",
    "                                    break;",
    "                                case 5:",
    "                                    objToStringify = responseRaw;",
    "                                    nhits = 1;",
    "                                    break;",
    "                            }",
    "                            if (memorySlots > 0 && renderMemory) {",
    "                                objToStringify = { 'result': objToStringify, 'memory': memList };",
    "                            }",
    "                        }",
    "                        else { /* Result format: show memory */",
    "                            if (renderMemory) {",
    "                                objToStringify = memList;",
    "                            }",
    "                            else {",
    "                                objToStringify = [];",
    "                            }",
    "                            if (methodNum == 5) {",
    "                                $('#evalresult').val(responseRaw['result']);",
    "                            }",
    "                        }",
    "                        if (objToStringify == null) {",
    "                            objToStringify = responseRaw;",
    "                        }",
    "                        response = JSON.stringify(objToStringify, null, 4);",
    "                        if (nhits >= 0 && resultFormat >= 0) {",
    "                            info = \"\" + nhits.toLocaleString(\"en-US\") + \" hit\" + (nhits != 1 ? \"s\" : \"\") + \" (\" + exec_ms.toFixed(2) + \" ms)\";",
    "                        }",
    "                        else {",
    "                            info = \"\" + exec_ms.toFixed(2) + \" ms\";",
    "                        }",
    "",
    "                        const delay = 1000 * (1 - Math.sqrt(refreshrate) / 10.0);",
    "",
    "                        if (exec_ms < delay) {",
    "                            pause_ms = delay;",
    "                        }",
    "                        else {",
    "                            pause_ms = Math.round(exec_ms);",
    "                        }",
    "                    }",
    "                    else if (messageRaw != null) {",
    "                        const pluginError = messageRaw[\"plugin\"];",
    "                        if (pluginError != null) {",
    "                            const value = pluginError[\"value\"];",
    "                            if (value == null) {",
    "                                message = pluginError;",
    "                            }",
    "                            else {",
    "                                message = value;",
    "                            }",
    "                        }",
    "                        else {",
    "                            message = JSON.stringify(messageRaw, null, 4);",
    "                        }",
    "                    }",
    "                    else {",
    "                        message = data;",
    "                    }",
    "                    $('#infotext').html(info);",
    "                    $('#errortext').html(message);",
    "                    if (resultFormat >= 0) {",
    "                        $('#result_box pre #resulttext').css(\"white-space\", \"pre\");",
    "                    }",
    "                    else {",
    "                        $('#result_box pre #resulttext').css(\"white-space\", \"normal\");",
    "                    }",
    "                }",
    "                catch (error) {",
    "                    $('#errortext').html(error);",
    "                    $('#resulttext').html(\"\");",
    "                    $('#evalresult').html(\"\");",
    "                }",
    "                finally {",
    "                    progress.stop();",
    "                    $('#result_box').stop(true);",
    "                    //$('#submit').prop( \"disabled\", false );",
    "                    $('#resulttext').html(response);",
    "",
    "                    if (message) {",
    "                        $('#evalresult').removeClass(\"vstr\");",
    "                        $('#evalresult').addClass(\"faded\");",
    "                        pause_ms = 500;",
    "                    }",
    "                    else {",
    "                        $('#evalresult').addClass(\"vstr\");",
    "                        $('#evalresult').removeClass(\"faded\");",
    "                    }",
    "",
    "                    $('#result_box').removeClass(\"loading\");",
    "                    //if( loaderDisplayer != null ) {",
    "                    //  clearTimeout( loaderDisplayer );",
    "                    //  loaderDisplayer = null;",
    "                    //}",
    "                    if (autoRefresher != null) {",
    "                        clearTimeout(autoRefresher);",
    "                        autoRefresher = null;",
    "                    }",
    "                    if (autorefresh) {",
    "                        autoRefresher = setTimeout(performSearch, pause_ms);",
    "                    }",
    "                }",
    "            }, \"json\" ).fail(function (xhr, txt, err) {",
    "                progress.stop();",
    "                //$('#submit').prop( \"disabled\", false );",
    "                $('#resulttext').html(\"\");",
    "                $('#infotext').html(\"Exception:\");",
    "                $('#errortext').html(xhr[\"responseText\"] + \" | \" + txt + \" | \" + err);",
    "                $('#result_box').removeClass(\"loading\");",
    "                //if( loaderDisplayer != null ) {",
    "                //  clearTimeout( loaderDisplayer );",
    "                //  loaderDisplayer = null;",
    "                //}",
    "            });",
    "        }",
    "",
    "        $('#graphlist').on(\"change\", updateArcRelationships);",
    "        $('#graphlist').on(\"change\", updateGraphInfo);",
    "        $('.querymethod').on(\"change\", updateMethodDisplay);",
    "        $('#memory').on(\"change\", updateMethodDisplay);",
    "        $('#submit').click(performSearch);",
    "        $('#autorefresh').on(\"change\", function () {",
    "            if ($(this).prop('checked')) {",
    "                performSearch();",
    "                $('#refreshrateArea').css(\"display\", \"inline\");",
    "            }",
    "            else if (autoRefresher != null) {",
    "                clearTimeout(autoRefresher);",
    "                autoRefresher = null;",
    "                $('#refreshrateArea').css(\"display\", \"none\");",
    "            }",
    "        });",
    "        $('#fields input').addClass(\"retrigger\");",
    "        $('refreshrate').on(\"input\", performSearch);",
    "        $('.retrigger').on(\"change\", performSearch);",
    "        $('#resultformat').on(\"change\", updateMethodDisplay);",
    "        $('#searchCounts').on(\"change\", updateMethodDisplay);",
    "        $('#sorted').on(\"change\", updateSortDisplay);",
    "        $('#sortby').on(\"change\", updateSortDisplay);",
    "        $('#F_ARC').on(\"change\", updateArcSelection)",
    "        $('.arcelem').on(\"change\", updateArcElementSelection)",
    "        $('#arcmod').on(\"change\", updateArcConditionSelection)",
    "        $('#arcvalcond').on(\"change\", updateArcConditionSelection)",
    "",
    "",
    "        function submitOnEnter(event) {",
    "            if (event.key === \"Enter\") {",
    "                event.preventDefault();",
    "                document.getElementById(\"submit\").click();",
    "            }",
    "        };",
    "",
    "        function submitOnAltEnter(event) {",
    "            if (event.key === \"Enter\" && event.shiftKey) {",
    "                event.preventDefault();",
    "                document.getElementById(\"submit\").click();",
    "            }",
    "        };",
    "",
    "",
    "        document.getElementById(\"anchor\").addEventListener(\"keypress\", submitOnEnter);",
    "        document.getElementById(\"arcval\").addEventListener(\"keypress\", submitOnEnter);",
    "        document.getElementById(\"rank\").addEventListener(\"keypress\", submitOnEnter);",
    "        document.getElementById(\"select\").addEventListener(\"keypress\", submitOnEnter);",
    "        document.getElementById(\"querytext\").addEventListener(\"keypress\", submitOnAltEnter);",
    "",
    "        $('#F_ANCHOR').prop(\"checked\", true);",
    "        $('#F_ID').prop(\"checked\", true);",
    "        $('#F_ARC').prop(\"checked\", true);",
    "",
    "        updateGraphInfo();",
    "        updateMethodDisplay();",
    "        updateSortDisplay();",
    "        updateArcConditionSelection();",
    "        updateArcSelection();",
    "        updateArcRelationships();",
    "",
    "",
    "        $('#anchor').focus();",
    "    }",
    "",
    "    CommonHeader.ready(main, 10);",
    "</script>",
    "",
    0
};



const char *VGX_BUILTIN_HTML_status[] = {
    "<!DOCTYPE html>",
    "<!--",
    "",
    "  VGX Server",
    "  Distributed engine for plugin-based graph and vector search",
    "",
    "  Module:  vgx",
    "  File:    status.html",
    "  Author:  Stian Lysne <...>",
    "",
    "  Copyright Â© 2025 Rakuten, Inc.",
    "",
    "  Licensed under the Apache License, Version 2.0 (the \"License\");",
    "  you may not use this file except in compliance with the License.",
    "  You may obtain a copy of the License at",
    "",
    "      http://www.apache.org/licenses/LICENSE-2.0",
    "",
    "  Unless required by applicable law or agreed to in writing, software",
    "  distributed under the License is distributed on an \"AS IS\" BASIS,",
    "  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
    "  See the License for the specific language governing permissions and",
    "  limitations under the License.",
    "",
    "-->",
    "",
    "<html>",
    "<head>",
    "    <title>VGX Status</title>",
    "    <script src=\"jquery.js\"></script>",
    "    <script src=\"header.js\"></script>",
    "    <script src=\"uptime.js\"></script>",
    "    <script src=\"digest.js\"></script>",
    "    <link rel=\"stylesheet\" href=\"vgx.css\">",
    "</head>",
    "<body class=\"disable_select\">",
    "    <div style=\"margin: 8\">",
    "        <div id=\"commonHeaderDiv\"></div>",
    "",
    "        <div class=\"container\">",
    "            <div id=\"http_server\">",
    "                <h3>Service</h3>",
    "                <table id=\"server_metrics\" class=\"databox\">",
    "                    <tr class=\"headrow\">",
    "                        <td colspan=\"3\" class=\"superlabel\">Status</td>",
    "                    </tr>",
    "                    <tr class=\"datarow\">",
    "                        <td class=\"sublabel\">Name</td>",
    "                        <td colspan=\"2\" class=\"val vstr\"><span id=\"service_name\"></span></td>",
    "                    </tr>",
    "                    <tr class=\"datarow\">",
    "                        <td class=\"sublabel\">Uptime</td>",
    "                        <td colspan=\"2\" class=\"val vstr\"><span id=\"uptime\"></span></td>",
    "                    </tr>",
    "                    <tr class=\"datarow\">",
    "                        <td class=\"sublabel\">Service</td>",
    "                        <td colspan=\"2\" class=\"val vstr\"><span id=\"service_in\"></span></td>",
    "                    </tr>",
    "                    <tr class=\"datarow\">",
    "                        <td class=\"sublabel\">Mode</td>",
    "                        <td colspan=\"2\" class=\"val vstr\"><span id=\"service_mode\"></span></td>",
    "                    </tr>",
    "",
    "                    <tr class=\"headrow\">",
    "                        <td colspan=\"3\" class=\"superlabel\">Request</td>",
    "                    </tr>",
    "                    <tr class=\"datarow\">",
    "                        <td class=\"sublabel\">Rate</td>",
    "                        <td class=\"val vfloat\"><span id=\"qps\"></span></td>",
    "                        <td class=\"unit\">qps</td>",
    "                    </tr>",
    "                    <tr class=\"datarow\">",
    "                        <td class=\"sublabel\">Total</td>",
    "                        <td class=\"val vint\"><span id=\"total\"></span></td>",
    "                        <td class=\"unit\">requests</td>",
    "                    </tr>",
    "                    <tr class=\"datarow\">",
    "                        <td class=\"sublabel\">Plugin</td>",
    "                        <td class=\"val vint\"><span id=\"plugin\"></span></td>",
    "                        <td class=\"unit\">requests</td>",
    "                    </tr>",
    "                    <tr class=\"headrow\">",
    "                        <td colspan=\"3\" class=\"superlabel\">Response Time</td>",
    "                    </tr>",
    "                    <tr class=\"datarow\">",
    "                        <td class=\"sublabel\">Mean</td>",
    "                        <td class=\"val vfloat\"><span id=\"mean\"></span></td>",
    "                        <td class=\"unit\">ms</td>",
    "                    </tr>",
    "                    <tr class=\"datarow\">",
    "                        <td class=\"sublabel\">Median</td>",
    "                        <td class=\"val vfloat\"><span id=\"pct50_0\"></span></td>",
    "                        <td class=\"unit\">ms</td>",
    "                    </tr>",
    "                    <tr class=\"datarow\">",
    "                        <td class=\"sublabel\">90%</td>",
    "                        <td class=\"val vfloat\"><span id=\"pct90_0\"></span></td>",
    "                        <td class=\"unit\">ms</td>",
    "                    </tr>",
    "                    <tr class=\"datarow\">",
    "                        <td class=\"sublabel\">95%</td>",
    "                        <td class=\"val vfloat\"><span id=\"pct95_0\"></span></td>",
    "                        <td class=\"unit\">ms</td>",
    "                    </tr>",
    "                    <tr class=\"datarow\">",
    "                        <td class=\"sublabel\">99%</td>",
    "                        <td class=\"val vfloat\"><span id=\"pct99_0\"></span></td>",
    "                        <td class=\"unit\">ms</td>",
    "                    </tr>",
    "                    <tr class=\"headrow\">",
    "                        <td colspan=\"3\" class=\"superlabel\">Dispatch</td>",
    "                    </tr>",
    "                    <tr class=\"datarow\">",
    "                        <td class=\"sublabel\">ExecLoad</td>",
    "                        <td class=\"val vint\"><span class=\"alertable\" id=\"loadfactor\"></span></td>",
    "                        <td class=\"unit\">%</td>",
    "                    </tr>",
    "                    <tr class=\"datarow\">",
    "                        <td class=\"sublabel\">ExecWait</td>",
    "                        <td class=\"val vint\"><span id=\"waiting\"></span></td>",
    "                        <td class=\"unit\">requests</td>",
    "                    </tr>",
    "                    <tr class=\"datarow\">",
    "                        <td class=\"sublabel\">Matrix</td>",
    "                        <td class=\"val vint\"><span id=\"matrix_channels\"></span></td>",
    "                        <td class=\"unit\">channels</td>",
    "                    </tr>",
    "                    <tr class=\"datarow\">",
    "                        <td class=\"sublabel\">MatrixWait</td>",
    "                        <td class=\"val vint\"><span id=\"matrix_backlog\"></span></td>",
    "                        <td class=\"unit\">requests</td>",
    "                    </tr>",
    "                    <tr class=\"headrow\">",
    "                        <td colspan=\"3\" class=\"superlabel\">Connection</td>",
    "                    </tr>",
    "                    <tr class=\"datarow\">",
    "                        <td class=\"sublabel\">Connected</td>",
    "                        <td class=\"val vint\"><span id=\"clients\"></span></td>",
    "                        <td class=\"unit\">clients</td>",
    "                    </tr>",
    "                    <tr class=\"datarow\">",
    "                        <td class=\"sublabel\">Lifetime</td>",
    "                        <td class=\"val vint\"><span id=\"total_clients\"></span></td>",
    "                        <td class=\"unit\">clients</td>",
    "                    </tr>",
    "                    <tr class=\"datarow\">",
    "                        <td class=\"sublabel\">Inbound</td>",
    "                        <td class=\"val vkib\"><span id=\"data_in\"></span></td>",
    "                        <td class=\"unit\">kiB</td>",
    "                    </tr>",
    "                    <tr class=\"datarow\">",
    "                        <td class=\"sublabel\">Outbound</td>",
    "                        <td class=\"val vkib\"><span id=\"data_out\"></span></td>",
    "                        <td class=\"unit\">kiB</td>",
    "                    </tr>",
    "                    <tr class=\"headrow\">",
    "                        <td colspan=\"3\" class=\"superlabel\">Error</td>",
    "                    </tr>",
    "                    <tr class=\"datarow\">",
    "                        <td class=\"sublabel\">Rate</td>",
    "                        <td class=\"val vfloat\"><span id=\"err_rate\"></span></td>",
    "                        <td class=\"unit\">err/s</td>",
    "                    </tr>",
    "                    <tr class=\"datarow\">",
    "                        <td class=\"sublabel\">Service</td>",
    "                        <td class=\"val vint\"><span id=\"err_service\"></span></td>",
    "                        <td class=\"unit\">errors</td>",
    "                    </tr>",
    "                    <tr class=\"datarow\" id=\"http_codes_row\">",
    "                        <td class=\"sublabel\">HTTP Code</td>",
    "                        <td class=\"val vint\"><span id=\"err_http\"></span></td>",
    "                        <td class=\"vlist vstr wrap-list wrap-codes\"><span id=\"http_codes\"></span></td>",
    "                    </tr>",
    "                </table>",
    "            </div>",
    "            <div id=\"transaction_io\">",
    "                <h3>Transaction</h3>",
    "                <div class=\"transaction_metrics\">",
    "                    <table id=\"transaction_status\" class=\"transaction_panel databox\">",
    "                        <tr class=\"headrow\">",
    "                            <td colspan=\"2\" class=\"superlabel\">Data Input Service</td>",
    "                        </tr>",
    "                        <tr class=\"datarow\">",
    "                            <td class=\"sublabel\">Persistence</td>",
    "                            <td class=\"val vstr\"><span id=\"tx_durable\"></span></td>",
    "                        </tr>",
    "                        <tr class=\"datarow\">",
    "                            <td class=\"sublabel\">Expiration</td>",
    "                            <td class=\"val vstr\"><span id=\"tx_events\"></span></td>",
    "                        </tr>",
    "                        <tr class=\"datarow\">",
    "                            <td class=\"sublabel\">Snapshot Age</td>",
    "                            <td class=\"val vstr\"><span id=\"snapshot_age\"></span></td>",
    "                        </tr>",
    "                        <tr class=\"datarow\">",
    "                            <td class=\"sublabel\">Execution</td>",
    "                            <td class=\"val vstr\"><span id=\"tx_exec\"></span></td>",
    "                        </tr>",
    "                        <tr class=\"datarow\">",
    "                            <td class=\"sublabel\">Master Serial</td>",
    "                            <td class=\"val vstr\"><span id=\"masterSerial\"></span></td>",
    "                        </tr>",
    "                        <tr class=\"datarow\">",
    "                            <td class=\"sublabel\">Fingerprint</td>",
    "                            <td class=\"val vstr\"><span id=\"fingerprint\"></span></td>",
    "                        </tr>",
    "                    </table>",
    "                    <table id=\"transaction_metrics_data\" class=\"transaction_panel databox\">",
    "                        <tr class=\"headrow\">",
    "                            <td class=\"superlabel\">In</td>",
    "                            <td class=\"superlabel\">Out</td>",
    "                            <td class=\"empty\"></td>",
    "                        </tr>",
    "                        <tr class=\"datarow\">",
    "                            <td class=\"val vkib\"><span id=\"tx_in_kib_rate\"></span></td>",
    "                            <td class=\"val vkib\"><span id=\"tx_out_kib_rate\"></span></td>",
    "                            <td class=\"unit\">kiB/sec<span id=\"tx_out_kib_multiplier\"></span></td>",
    "                        </tr>",
    "                        <tr class=\"datarow\">",
    "                            <td class=\"val vkib\"><span id=\"tx_in_kib\"></span></td>",
    "                            <td class=\"val vkib\"><span id=\"tx_out_kib\"></span></td>",
    "                            <td class=\"unit\">kiB</td>",
    "                        </tr>",
    "                        <tr class=\"datarow\">",
    "                            <td class=\"val vkib\"><span id=\"tx_in_codes\"></span></td>",
    "                            <td class=\"val vkib\"><span id=\"tx_out_codes\"></span></td>",
    "                            <td class=\"unit\">opcodes</td>",
    "                        </tr>",
    "                        <tr class=\"datarow\">",
    "                            <td class=\"val vkib\"><span id=\"tx_in_ops\"></span></td>",
    "                            <td class=\"val vkib\"><span id=\"tx_out_ops\"></span></td>",
    "                            <td class=\"unit\">operations</td>",
    "                        </tr>",
    "                        <tr class=\"datarow\">",
    "                            <td class=\"val vkib\"><span id=\"tx_in_txs\"></span></td>",
    "                            <td class=\"val vkib\"><span id=\"tx_out_txs\"></span></td>",
    "                            <td class=\"unit\">transactions</td>",
    "                        </tr>",
    "                    </table>",
    "                    <table id=\"transaction_input_throttle\" class=\"transaction_panel databox\">",
    "                        <tr class=\"headrow\">",
    "                            <td colspan=\"3\" class=\"superlabel\">Throttle</td>",
    "                        </tr>",
    "                        <tr class=\"datarow\">",
    "                            <td class=\"empty\"></td>",
    "                            <td class=\"val vfloat\"><span id=\"tx_in_bytes_throttle\"></span></td>",
    "                            <td class=\"unit\">bytes/sec</td>",
    "                        </tr>",
    "                        <tr class=\"datarow\">",
    "                            <td class=\"empty\"></td>",
    "                            <td class=\"val vfloat\"><span id=\"tx_in_opcodes_throttle\"></span></td>",
    "                            <td class=\"unit\">opcodes/sec</td>",
    "                        </tr>",
    "                        <tr class=\"datarow\">",
    "                            <td class=\"empty\"></td>",
    "                            <td class=\"val vfloat\"><span id=\"tx_in_operations_throttle\"></span></td>",
    "                            <td class=\"unit\">operations/sec</td>",
    "                        </tr>",
    "                        <tr class=\"datarow\">",
    "                            <td class=\"empty\"></td>",
    "                            <td class=\"val vfloat\"><span id=\"tx_in_transactions_throttle\"></span></td>",
    "                            <td class=\"unit\">transactions/sec</td>",
    "                        </tr>",
    "                    </table>",
    "                    <table id=\"transaction_connection_status\" class=\"transaction_panel databox\">",
    "                        <tr class=\"headrow\">",
    "                            <td colspan=\"3\" class=\"superlabel\">Connection Status</td>",
    "                        </tr>",
    "                        <tr class=\"datarow\">",
    "                            <td class=\"sublabel\">Listen Port</td>",
    "                            <td class=\"val vint\"><span id=\"tx_port\"></span></td>",
    "                            <td class=\"val vstr\"><span id=\"tx_status\"></span></td>",
    "                        </tr>",
    "                        <tr class=\"datarow\">",
    "                            <td class=\"sublabel\">Input Lag</td>",
    "                            <td class=\"val vfloat\"><span id=\"tx_lag\"></span></td>",
    "                            <td class=\"unit\">seconds</td>",
    "                        </tr>",
    "                        <tr class=\"datarow\">",
    "                            <td class=\"sublabel\">Data Provider</td>",
    "                            <td class=\"val vstr\" colspan=\"2\"><span id=\"txprovider\"></span></td>",
    "                        </tr>",
    "                        <tr class=\"datarow\" id=\"subscribers_row\">",
    "                            <td class=\"sublabel\">Subscribers</td>",
    "                            <td id=\"txsubscribers_td\" class=\"vstr\" colspan=\"2\"><pre class=\"val vstr\" id=\"txsubscribers\"></pre></td>",
    "                        </tr>",
    "                    </table>",
    "                </div>",
    "            </div>",
    "            <div id=\"graph_engine\">",
    "                <h3>Graph</h3>",
    "                <table id=\"graph_status\" class=\"databox\">",
    "                    <tr class=\"headrow\">",
    "                        <td colspan=\"2\" class=\"superlabel\">Resident</td>",
    "                    </tr>",
    "                    <tr class=\"datarow\" id=\"graph_names_row\">",
    "                        <td class=\"sublabel\"><span id=\"graphs_label\">-</span></td>",
    "                        <td class=\"val vlist vstr\"><span id=\"graph_names\"></span></td>",
    "                    </tr>",
    "                    <tr class=\"datarow\" id=\"local_graph_names_row\">",
    "                        <td class=\"sublabel\"><span id=\"local_graphs_label\">Local Only</span></td>",
    "                        <td class=\"val vlist vstr\"><span id=\"local_graph_names\"></span></td>",
    "                    </tr>",
    "                    <tr class=\"datarow\">",
    "                        <td class=\"sublabel\">Digest</td>",
    "                        <td class=\"sublabel\" style=\"text-align:center\">",
    "                            <span style=\"position: relative; text-align: left\" id=\"digest\"></span>",
    "                        </td>",
    "                    </tr>",
    "                    <tr class=\"headrow\">",
    "                        <td colspan=\"2\" class=\"superlabel\">Object Summary</td>",
    "                    </tr>",
    "                    <tr class=\"datarow\">",
    "                        <td class=\"sublabel\">Vertex</td>",
    "                        <td class=\"val vint\"><span id=\"order\"></span></td>",
    "                    </tr>",
    "                    <tr class=\"datarow\">",
    "                        <td class=\"sublabel\">Arc</td>",
    "                        <td class=\"val vint\"><span id=\"size\"></span></td>",
    "                    </tr>",
    "                    <tr class=\"datarow\">",
    "                        <td class=\"sublabel\">Property</td>",
    "                        <td class=\"val vint\"><span id=\"nprop\"></span></td>",
    "                    </tr>",
    "                    <tr class=\"datarow\">",
    "                        <td class=\"sublabel\">Vector</td>",
    "                        <td class=\"val vint\"><span id=\"nvec\"></span></td>",
    "                    </tr>",
    "                    <tr class=\"headrow\">",
    "                        <td colspan=\"2\" class=\"superlabel\">Enumerator Summary</td>",
    "                    </tr>",
    "                    <tr class=\"datarow\">",
    "                        <td class=\"sublabel\">Relationship</td>",
    "                        <td class=\"val vint\"><span id=\"nrel\"></span></td>",
    "                    </tr>",
    "                    <tr class=\"datarow\">",
    "                        <td class=\"sublabel\">Vertex Type</td>",
    "                        <td class=\"val vint\"><span id=\"nvtx\"></span></td>",
    "                    </tr>",
    "                    <tr class=\"datarow\">",
    "                        <td class=\"sublabel\">Property Key</td>",
    "                        <td class=\"val vint\"><span id=\"nkey\"></span></td>",
    "                    </tr>",
    "                    <tr class=\"datarow\">",
    "                        <td class=\"sublabel\">String Value</td>",
    "                        <td class=\"val vint\"><span id=\"nval\"></span></td>",
    "                    </tr>",
    "                    <tr class=\"datarow\">",
    "                        <td class=\"sublabel\">Dimension</td>",
    "                        <td class=\"val vint\"><span id=\"ndim\"></span></td>",
    "                    </tr>",
    "                    <tr class=\"headrow\">",
    "                        <td colspan=\"2\" class=\"superlabel\">Virtual Property</td>",
    "                    </tr>",
    "                    <tr class=\"datarow\">",
    "                        <td class=\"sublabel\">Count</td>",
    "                        <td class=\"val vint\"><span id=\"vprop_count\"></span></td>",
    "                    </tr>",
    "                    <tr class=\"datarow\">",
    "                        <td class=\"sublabel\">Bytes</td>",
    "                        <td class=\"val vint\"><span id=\"vprop_bytes\"></span></td>",
    "                    </tr>",
    "                    <tr class=\"headrow\">",
    "                        <td colspan=\"2\" class=\"superlabel\">Internal Query</td>",
    "                    </tr>",
    "                    <tr class=\"datarow\">",
    "                        <td class=\"sublabel\">Total Count</td>",
    "                        <td class=\"val vint\"><span id=\"qcnt\"></span></td>",
    "                    </tr>",
    "                    <tr class=\"datarow\">",
    "                        <td class=\"sublabel\">Latency (&#956;s)</td>",
    "                        <td class=\"val vint\"><span id=\"qtime\"></span></td>",
    "                    </tr>",
    "                    <tr class=\"headrow\">",
    "                        <td colspan=\"2\" class=\"superlabel\">Exception Count</td>",
    "                    </tr>",
    "                    <tr class=\"datarow\">",
    "                        <td class=\"sublabel\">Warning</td>",
    "                        <td class=\"val vint\"><span id=\"nWarning\"></span></td>",
    "                    </tr>",
    "                    <tr class=\"datarow\">",
    "                        <td class=\"sublabel\">Error</td>",
    "                        <td class=\"val vint\" id=\"errorcell\"><span id=\"nError\"></span></td>",
    "                    </tr>",
    "                    <tr class=\"datarow\">",
    "                        <td class=\"sublabel\">Critical</td>",
    "                        <td class=\"val vint\" id=\"criticalcell\"><span id=\"nCritical\"></span></td>",
    "                    </tr>",
    "                </table>",
    "            </div>",
    "            <div id=\"memory_usage\">",
    "                <h3>Memory</h3>",
    "                <table id=\"memory_status\" class=\"databox\">",
    "                    <tr class=\"headrow\">",
    "                        <td class=\"superlabel\" id=\"usage\">Usage</td>",
    "                        <td class=\"superlabel\" id=\"vgx_memory\" colspan=\"2\">VGX Memory</td>",
    "                        <td class=\"superlabel\" id=\"of_total\" colspan=\"3\">of Total</td>",
    "                        <td class=\"superlabel\" id=\"total_usage\" colspan=\"2\">Total Usage</td>",
    "                    </tr>",
    "                    <tr class=\"datarow\">",
    "                        <td class=\"sublabel\">Current</td>",
    "                        <td class=\"val vint\"><span id=\"mem_MiB\"></span></td>",
    "                        <td class=\"unit\">MiB</td>",
    "                        <td class=\"unit\">=</td>",
    "                        <td class=\"val vfloat\"><span id=\"mempct_total\"></span></td>",
    "                        <td class=\"unit\">%</td>",
    "                        <td class=\"val vfloat\"><span id=\"mempct_used\"></span></td>",
    "                        <td class=\"unit\">%</td>",
    "                    </tr>",
    "                    <tr class=\"datarow\">",
    "                        <td class=\"sublabel\">Peak</td>",
    "                        <td class=\"val vint\"><span id=\"max_mem_MiB\"></span></td>",
    "                        <td class=\"unit\">MiB</td>",
    "                        <td class=\"unit\">=</td>",
    "                        <td class=\"val vfloat\"><span id=\"max_mempct_total\"></span></td>",
    "                        <td class=\"unit\">%</td>",
    "                        <td class=\"val vfloat\"><span id=\"max_mempct_used\"></span></td>",
    "                        <td class=\"unit\">%</td>",
    "                    </tr>",
    "                </table>",
    "            </div>",
    "        </div>",
    "        <div id=\"commonFooterDiv\"></div>",
    "    </div>",
    "</body>",
    "</html>",
    "",
    "<style>",
    "    .container {",
    "        width: 1024px;",
    "    }",
    "",
    "    .container > div {",
    "        float: left;",
    "    }",
    "",
    "    .databox {",
    "        border: 3px solid #D0D0D0;",
    "        border-collapse: collapse;",
    "    }",
    "",
    "    #graph_engine {",
    "        margin-bottom: 0px;",
    "    }",
    "",
    "    #memory_usage {",
    "        /* width: 850px; */",
    "        margin-top: -18px;",
    "    }",
    "",
    "    .container .headrow {",
    "        background-color: #D0D0D0;",
    "    }",
    "",
    "    .container .datarow:nth-child(odd) {",
    "        background-color: #F4F4F4;",
    "    }",
    "",
    "    .container .datarow:nth-child(even) {",
    "        background-color: #FCFCFC;",
    "    }",
    "",
    "    .superlabel {",
    "        font-size: 105%;",
    "        font-weight: bold;",
    "        padding-left: 10px;",
    "    }",
    "",
    "    .sublabel {",
    "        text-align: right;",
    "        padding-left: 10px;",
    "    }",
    "",
    "    .val {",
    "        min-width: 70px;",
    "        padding-right: 10px;",
    "        text-align: right;",
    "        font-family: Consolas, monospace;",
    "        font-size: 90%;",
    "        transition: transform 200ms;",
    "    }",
    "",
    "    .val.highlight {",
    "        transform: scale(1.1);",
    "        background: transparent;",
    "        font-weight: bold;",
    "    }",
    "",
    "    .vstr {",
    "        text-align: left;",
    "    }",
    "",
    "    .vemph {",
    "        font-weight: bold;",
    "    }",
    "",
    "    .unit {",
    "        padding-right: 10px;",
    "    }",
    "",
    "    .wrap-list {",
    "        word-wrap: break-word;",
    "    }",
    "",
    "    .wrap-codes {",
    "        max-width: 120px;",
    "        text-align: left;",
    "    }",
    "",
    "    .wrap-hosts {",
    "        min-width: 150px;",
    "        max-width: 298px;",
    "        text-align: left;",
    "    }",
    "",
    "    .transaction_panel {",
    "        min-width: 298px;",
    "    }",
    "",
    "    #transaction_status .sublabel {",
    "       width: 120px;",
    "    }",
    "",
    "    #memory_status .val {",
    "        min-width: 40px;",
    "    }",
    "",
    "    #memory_status td.superlabel#usage {",
    "        padding-left: 44px;",
    "        padding-right: 23px;",
    "    }",
    "",
    "    #memory_status td.superlabel#vgx_memory {",
    "        padding-left: 12px;",
    "        padding-right: 20px;",
    "    }",
    "",
    "    #memory_status td.superlabel {",
    "        padding-left: 49px;",
    "        padding-right: 18px;",
    "    }",
    "",
    "    #memory_status td.sublabel {",
    "        text-align: center;",
    "        padding-left: 26px;",
    "    }",
    "",
    "    #http_codes_row {",
    "        height: 30px;",
    "        vertical-align: top;",
    "    }",
    "",
    "    #subscribers_row {",
    "        height: 59px;",
    "        vertical-align: top;",
    "    }",
    "",
    "    #digest {",
    "        font-size: 14px;",
    "    }",
    "",
    "    #masterSerial {",
    "        font-size: 13px;",
    "    }",
    "</style>",
    "",
    "<script>",
    "",
    "    function main() {",
    "        const goneopacity = 0.25;",
    "        const fadein_duration = 200;",
    "        const fadeout_duration = 1500;",
    "        const color_critical = \"#FF0000\";",
    "        const color_high = \"#FF6000\";",
    "        const color_normal = \"#0000C0\";",
    "",
    "        let digestObj = new Digest($('#digest'));",
    "",
    "        let timeDown = false;",
    "        let graphDown = false;",
    "        let metricsDown = false;",
    "        let txDown = false;",
    "        let txPeersDown = false;",
    "        let memoryDown = false;",
    "",
    "        let loadfactor = -1.0;",
    "",
    "        function blinkAlert() {",
    "            $('.alertable').fadeOut(100);",
    "            $('.alertable').fadeIn(10);",
    "            $('.alertable').fadeOut(500);",
    "            $('.alertable').fadeIn(10);",
    "            setTimeout(blinkAlert, 800);",
    "        }",
    "        setTimeout(blinkAlert, 800);",
    "",
    "        let uptimeRefresher = new UptimeRefresher('uptime', function () {",
    "            if (timeDown) {",
    "                $(\"#commonHeaderDiv\").fadeTo(fadein_duration, 1);",
    "                $(\"#commonFooterDiv\").fadeTo(fadein_duration, 1);",
    "                timeDown = false;",
    "            }",
    "        }, function (err) {",
    "            $(\"#commonHeaderDiv\").fadeTo(fadeout_duration, goneopacity);",
    "            $(\"#commonFooterDiv\").fadeTo(fadeout_duration, goneopacity);",
    "            timeDown = true;",
    "        });",
    "",
    "        uptimeRefresher.start();",
    "",
    "        // Graph Info",
    "        let last_digest = null;",
    "        function updateGraph() {",
    "            $.get(\"/vgx/graphsum\", function (data, textStatus, jqXHR) {",
    "                if (graphDown) {",
    "                    $(\"#graph_engine\").fadeTo(fadein_duration, 1);",
    "                    graphDown = false;",
    "                }",
    "",
    "                const graphs = data[\"response\"][\"graphsum\"];",
    "                const names = graphs[\"names\"];",
    "                const local_names = graphs[\"local-only\"];",
    "                const enums = graphs[\"enumerator\"];",
    "                const vprop = graphs[\"vprop\"];",
    "                const query = graphs[\"query\"];",
    "                const engine = graphs[\"engine\"];",
    "                const exceptions = engine[\"exceptions\"];",
    "                let graph_names = \"-\";",
    "                let local_graph_names = \"-\";",
    "                let digest = null;",
    "                let masterSerial = null;",
    "                let order = 0;",
    "                let size = 0;",
    "                let nprop = 0;",
    "                let nvec = 0;",
    "                let nrel = 0;",
    "                let nvtx = 0;",
    "                let nkey = 0;",
    "                let nval = 0;",
    "                let ndim = 0;",
    "                let vprop_bytes = 0;",
    "                let vprop_count = 0;",
    "                let qcnt = 0;",
    "                let qns = 0.0;",
    "                let nWarning = 0;",
    "                let nError = 0;",
    "                let nCritical = 0;",
    "                let orderstr = \"-\";",
    "                let sizestr = \"-\";",
    "                let propstr = \"-\";",
    "                let vecstr = \"-\";",
    "                let relstr = \"-\";",
    "                let vtxstr = \"-\";",
    "                let keystr = \"-\";",
    "                let valstr = \"-\";",
    "                let dimstr = \"-\";",
    "                let vprop_bytes_str = \"-\";",
    "                let vprop_count_str = \"-\";",
    "                let qcntstr = \"-\";",
    "                let qtimestr = \"-\";",
    "                let warningStr = \"-\";",
    "                let errorStr = \"-\";",
    "                let criticalStr = \"-\";",
    "                if (names.length > 0) {",
    "                    $('#graphs_label').html(names.length > 1 ? \"Graphs\" : \"Graph\");",
    "                    graph_names = names.length > 1 ? \"[\" : \"\";",
    "                    graph_names += names.join(\", \");",
    "                    graph_names += names.length > 1 ? \"]\" : \"\";",
    "                    digest = graphs[\"digest\"];",
    "                    masterSerial = graphs[\"master-serial\"];",
    "                    order = parseInt(graphs[\"order\"]);",
    "                    size = parseInt(graphs[\"size\"]);",
    "                    nprop = parseInt(graphs[\"properties\"]);",
    "                    nvec = parseInt(graphs[\"vectors\"]);",
    "                    nrel = parseInt(enums[\"relationship\"]);",
    "                    nvtx = parseInt(enums[\"vertextype\"]);",
    "                    nkey = parseInt(enums[\"key\"]);",
    "                    nval = parseInt(enums[\"string\"]);",
    "                    ndim = parseInt(enums[\"dimension\"]);",
    "                    vprop_bytes = parseInt(vprop[\"bytes\"]);",
    "                    vprop_count = parseInt(vprop[\"count\"]);",
    "                    qcnt = parseInt(query[\"count\"]);",
    "                    qns = parseInt(query[\"ns-acc\"]);",
    "                    nWarning = parseInt(exceptions[\"warning\"]);",
    "                    nError = parseInt(exceptions[\"error\"]);",
    "                    nCritical = parseInt(exceptions[\"critical\"]);",
    "                    orderstr = order.toLocaleString(\"en-US\");",
    "                    sizestr = size.toLocaleString(\"en-US\");",
    "                    propstr = nprop.toLocaleString(\"en-US\");",
    "                    vecstr = nvec.toLocaleString(\"en-US\");",
    "                    relstr = nrel.toLocaleString(\"en-US\");",
    "                    vtxstr = nvtx.toLocaleString(\"en-US\");",
    "                    keystr = nkey.toLocaleString(\"en-US\");",
    "                    valstr = nval.toLocaleString(\"en-US\");",
    "                    dimstr = ndim.toLocaleString(\"en-US\");",
    "                    vprop_bytes_str = vprop_bytes.toLocaleString(\"en-US\");",
    "                    vprop_count_str = vprop_count.toLocaleString(\"en-US\");",
    "                    qcntstr = qcnt.toLocaleString(\"en-US\");",
    "                    if (qcnt > 0) {",
    "                        qtimestr = ((qns / qcnt) / 1000).toFixed(2);",
    "                    }",
    "",
    "                    warningStr = nWarning.toLocaleString(\"en-US\");",
    "                    errorStr = nError.toLocaleString(\"en-US\");",
    "                    criticalStr = nCritical.toLocaleString(\"en-US\");",
    "                }",
    "                else {",
    "                    $('#graphs_label').html(\"No Graph\");",
    "                }",
    "                if (local_names.length > 0) {",
    "                    local_graph_names = local_names.length > 1 ? \"[\" : \"\";",
    "                    local_graph_names += local_names.join(\", \");",
    "                    local_graph_names += local_names.length > 1 ? \"]\" : \"\";",
    "                }",
    "                $('#graph_names').html(graph_names);",
    "                $('#local_graph_names').html(local_graph_names);",
    "                $('#order').html(orderstr);",
    "                $('#size').html(sizestr);",
    "                $('#nprop').html(propstr);",
    "                $('#nvec').html(vecstr);",
    "                $('#nrel').html(relstr);",
    "                $('#nvtx').html(vtxstr);",
    "                $('#nkey').html(keystr);",
    "                $('#nval').html(valstr);",
    "                $('#ndim').html(dimstr);",
    "                $('#vprop_bytes').html(vprop_bytes_str);",
    "                $('#vprop_count').html(vprop_count_str);",
    "                $('#qcnt').html(qcntstr);",
    "                $('#qtime').html(qtimestr);",
    "                $('#nWarning').html(warningStr);",
    "                $('#nError').html(errorStr);",
    "                $('#nCritical').html(criticalStr);",
    "",
    "                digestObj.update(digest);",
    "                $('#masterSerial').html( MasterSerial.render( masterSerial ) );",
    "                $('#fingerprint').html( digest.slice(14) );",
    "",
    "                if (nError > 0) {",
    "                    $('#nError').css(\"color\", \"#FF6000\");",
    "                }",
    "                if (nCritical > 0) {",
    "                    $('#nCritical').css(\"color\", \"#FF0000\");",
    "                }",
    "",
    "                if (digest === last_digest) {",
    "                    setTimeout(updateGraph, 500);",
    "                }",
    "                else {",
    "                    setTimeout(updateGraph, 57);",
    "                    last_digest = digest;",
    "                }",
    "",
    "                let enginebox = $('#graph_engine');",
    "                let fontsize = 90;",
    "                $('#graph_engine').find('td.vstr').css(\"font-size\", \"90%\");",
    "                while (enginebox.width() > 300 && fontsize > 3) {",
    "                    fontsize -= 1;",
    "                    $('#graph_engine').find('td.vstr').css(\"font-size\", fontsize + \"%\");",
    "                }",
    "",
    "",
    "            }).fail(function (xhr, txt, err) {",
    "                $(\"#graph_engine\").fadeTo(fadeout_duration, goneopacity);",
    "                graphDown = true;",
    "                setTimeout(updateGraph, 5000);",
    "            });",
    "        }",
    "",
    "        let last_tx_count = 0;",
    "        // Transaction Metrics",
    "        function updateTX() {",
    "            $.get(\"/vgx/txstat\", function (data, textStatus, jqXHR) {",
    "                if (txDown) {",
    "                    $(\"#transaction_io\").fadeTo(fadein_duration, 1);",
    "                    $(\"#transaction_metrics_data\").fadeTo(fadein_duration, 1);",
    "                    txDown = false;",
    "                }",
    "                const response = data[\"response\"];",
    "                const iodata = response[\"data\"];",
    "                const input_lag_ms = parseInt(response[\"input-lag\"]);",
    "                const bytes = iodata[\"bytes\"];",
    "                const rate = iodata[\"rate\"];",
    "                const opcodes = iodata[\"opcodes\"];",
    "                const operations = iodata[\"operations\"];",
    "                const transactions = iodata[\"transactions\"];",
    "                const bytes_throttle = parseFloat(bytes[\"throttle\"]).toFixed(1);",
    "                const bytes_in = parseInt(bytes[\"in\"]);",
    "                const bytes_out = parseInt(bytes[\"out\"]);",
    "                const rate_in = parseFloat(rate[\"in\"]);",
    "                const rate_out = parseFloat(rate[\"out\"]);",
    "                const opcodes_throttle = parseFloat(opcodes[\"throttle\"]).toFixed(1);",
    "                const opcodes_in = parseInt(opcodes[\"in\"]);",
    "                const opcodes_out = parseInt(opcodes[\"out\"]);",
    "                const operations_throttle = parseFloat(operations[\"throttle\"]).toFixed(1);",
    "                const operations_in = parseInt(operations[\"in\"]);",
    "                const operations_out = parseInt(operations[\"out\"]);",
    "                const transactions_throttle = parseFloat(transactions[\"throttle\"]).toFixed(1);",
    "                const transactions_in = parseInt(transactions[\"in\"]);",
    "                const transactions_out = parseInt(transactions[\"out\"]);",
    "                const tx_lag_sec = input_lag_ms / 1024;",
    "                const kiB_in = Math.round(bytes_in / 1024);",
    "                const kiB_out = Math.round(bytes_out / 1024);",
    "                const kiB_rate_in = Math.round(rate_in / 1024);",
    "                const kiB_rate_out = Math.round(rate_out / 1024);",
    "",
    "                if (tx_lag_sec > 120.0) {",
    "                    $('#tx_lag').css(\"color\", color_critical);",
    "                    $('#tx_lag').addClass(\"alertable\");",
    "                }",
    "                else {",
    "                    if (tx_lag_sec > 30.0) {",
    "                        $('#tx_lag').css(\"color\", color_high);",
    "                    }",
    "                    else {",
    "                        $('#tx_lag').css(\"color\", color_normal);",
    "                    }",
    "                    $('#tx_lag').removeClass(\"alertable\");",
    "                }",
    "",
    "                $('#tx_lag').html(tx_lag_sec.toFixed(3));",
    "                $('#tx_in_kib').html(kiB_in.toLocaleString(\"en-US\"));",
    "                $('#tx_out_kib').html(kiB_out.toLocaleString(\"en-US\"));",
    "                $('#tx_in_kib_rate').html(kiB_rate_in.toLocaleString(\"en-US\"));",
    "                $('#tx_out_kib_rate').html(kiB_rate_out.toLocaleString(\"en-US\"));",
    "                $('#tx_in_codes').html(opcodes_in.toLocaleString(\"en-US\"));",
    "                $('#tx_out_codes').html(opcodes_out.toLocaleString(\"en-US\"));",
    "                $('#tx_in_ops').html(operations_in.toLocaleString(\"en-US\"));",
    "                $('#tx_out_ops').html(operations_out.toLocaleString(\"en-US\"));",
    "                $('#tx_in_txs').html(transactions_in.toLocaleString(\"en-US\"));",
    "                $('#tx_out_txs').html(transactions_out.toLocaleString(\"en-US\"));",
    "",
    "                let throttled = 0;",
    "                if( bytes_throttle <= 0.0 ) {",
    "                    $('#tx_in_bytes_throttle').closest(\"tr\").hide();",
    "                }",
    "                else {",
    "                    $('#tx_in_bytes_throttle').html(bytes_throttle.toLocaleString(\"en-US\"));",
    "                    $('#tx_in_bytes_throttle').closest(\"tr\").show();",
    "                    throttled++;",
    "                }",
    "                if( opcodes_throttle <= 0.0 ) {",
    "                    $('#tx_in_opcodes_throttle').closest(\"tr\").hide();",
    "                }",
    "                else {",
    "                    $('#tx_in_opcodes_throttle').html(opcodes_throttle.toLocaleString(\"en-US\"));",
    "                    $('#tx_in_opcodes_throttle').closest(\"tr\").show();",
    "                    throttled++;",
    "                }",
    "                if( operations_throttle <= 0.0 ) {",
    "                    $('#tx_in_operations_throttle').closest(\"tr\").hide();",
    "                }",
    "                else {",
    "                    $('#tx_in_operations_throttle').html(operations_throttle.toLocaleString(\"en-US\"));",
    "                    $('#tx_in_operations_throttle').closest(\"tr\").show();",
    "                    throttled++;",
    "                }",
    "                if( transactions_throttle <= 0.0 ) {",
    "                    $('#tx_in_transactions_throttle').closest(\"tr\").hide();",
    "                }",
    "                else {",
    "                    $('#tx_in_transactions_throttle').html(transactions_throttle.toLocaleString(\"en-US\"));",
    "                    $('#tx_in_transactions_throttle').closest(\"tr\").show();",
    "                    throttled++;",
    "                }",
    "                if (throttled>0) {",
    "                    $('#transaction_input_throttle').show();",
    "                }",
    "                else {",
    "                    $('#transaction_input_throttle').hide();",
    "                }",
    "",
    "",
    "                const tx_count = bytes_in + bytes_out + opcodes_in + opcodes_out + operations_in + operations_out + transactions_in + transactions_out;",
    "                if (tx_count != last_tx_count) {",
    "                    setTimeout(updateTX, 200);",
    "                    last_tx_count = tx_count;",
    "                }",
    "                else {",
    "                    setTimeout(updateTX, 1300);",
    "                }",
    "",
    "                let metricsbox = $('#transaction_metrics_data');",
    "                let fontsize = 90;",
    "                $('#transaction_metrics_data').find('td.vint').css(\"font-size\", \"90%\");",
    "                while (metricsbox.width() > 296 && fontsize > 3) {",
    "                    fontsize -= 1;",
    "                    $('#transaction_metrics_data').find('td.val').css(\"font-size\", fontsize + \"%\");",
    "                }",
    "",
    "            }).fail(function (xhr, txt, err) {",
    "                $(\"#transaction_metrics_data\").fadeTo(fadeout_duration, goneopacity);",
    "                txDown = true;",
    "                setTimeout(updateTX, 5000);",
    "            });",
    "        }",
    "",
    "        // Transaction Peers",
    "        function updateTXPeers() {",
    "            $.get(\"/vgx/peerstat\", function (data, textStatus, jqXHR) {",
    "                if (txPeersDown) {",
    "                    $(\"#transaction_metrics_data\").fadeTo(fadein_duration, 1);",
    "                    $(\"#transaction_io\").fadeTo(fadein_duration, 1);",
    "                    txPeersDown = false;",
    "                }",
    "                const response = data[\"response\"];",
    "                const port = parseInt(response[\"port\"]);",
    "                const durable = response[\"durable\"];",
    "                const events = response[\"events\"];",
    "                const executing = response[\"executing\"];",
    "                const persist_age = response[\"persist-age\"];",
    "                const persisting = response[\"persisting\"];",
    "                let provider = response[\"provider\"];",
    "                let subscribers = response[\"subscribers\"];",
    "                let statusStr = null;",
    "",
    "                if (provider != null) {",
    "                    statusStr = \"attached\";",
    "                }",
    "                else if (port > 0) {",
    "                    statusStr = \"detached\";",
    "                }",
    "                else {",
    "                    statusStr = \"down\";",
    "                }",
    "                $('#tx_status').html(statusStr);",
    "",
    "                $('#tx_port').html(port > 0 ? port : \"-\");",
    "                $('#tx_durable').html(durable ? \"durable\" : \"volatile\");",
    "                $('#tx_events').html(events ? \"auto\" : \"passive\");",
    "",
    "                let execStr = null;",
    "",
    "                if (parseInt(persisting) > 0) {",
    "                    execStr = \"persisting\";",
    "                }",
    "                else if (provider == null) {",
    "                    execStr = \"idle\";",
    "                }",
    "                else if (executing) {",
    "                    execStr = \"running\";",
    "                }",
    "                else {",
    "                    execStr = \"suspended\";",
    "                }",
    "                $('#tx_exec').html(execStr);",
    "",
    "                $('#snapshot_age').html(persist_age);",
    "",
    "                if (provider != null) {",
    "                    const preRex = /vgx:\\/\\//;",
    "                    const postRex = /:(\\d+)/;",
    "                    provider = provider.replace(preRex, \"\").replace(postRex, \"\");",
    "                    $('#txprovider').html(provider);",
    "                }",
    "                else {",
    "                    $('#txprovider').html(\"-\");",
    "                }",
    "",
    "                if (subscribers.length > 0) {",
    "                    let sub_names = \"\";",
    "                    let max_len = 0;",
    "                    for (var i = 0; i < subscribers.length; i++) {",
    "                        let sub_name = subscribers[i][0];",
    "                        if (sub_name.length > max_len) {",
    "                            max_len = sub_name.length;",
    "                        }",
    "                        if (i == 0) {",
    "                            sub_names += sub_name;",
    "                        }",
    "                        else {",
    "                            sub_names += \"\\n\" + sub_name;",
    "                        }",
    "                    }",
    "                    $('#txsubscribers').html(sub_names);",
    "                    let txbox = $('#transaction_connection_status');",
    "                    let fontsize = 90;",
    "                    $('#txsubscribers').css(\"font-size\", \"90%\");",
    "                    while (txbox.width() > 296 && fontsize > 1) {",
    "                        fontsize -= 1;",
    "                        $('#txsubscribers').css(\"font-size\", fontsize + \"%\");",
    "                    }",
    "                    while (txbox.width() > 296 && max_len > 10) {",
    "                        sub_names = \"\";",
    "                        max_len -= 1;",
    "                        for (var i = 0; i < subscribers.length; i++) {",
    "                            let sub_name = subscribers[i][0];",
    "                            if (sub_name.startsWith(\"vgx://\")) {",
    "                                sub_name = sub_name.slice(6);",
    "                            }",
    "                            if (sub_name.length > max_len) {",
    "                                sub_name = sub_name.slice(0, max_len);",
    "                            }",
    "                            if (i == 0) {",
    "                                sub_names += sub_name;",
    "                            }",
    "                            else {",
    "                                sub_names += \"\\n\" + sub_name;",
    "                            }",
    "                        }",
    "                        $('#txsubscribers').html(sub_names);",
    "                    }",
    "                }",
    "                else {",
    "                    $('#txsubscribers').html(\"-\");",
    "                }",
    "",
    "                let multiplier = \"\";",
    "                if (subscribers.length > 1) {",
    "                    multiplier = \" (x\" + subscribers.length + \")\";",
    "                }",
    "                $('#tx_out_kib_multiplier').html(multiplier);",
    "",
    "                setTimeout(updateTXPeers, 5000);",
    "            }).fail(function (xhr, txt, err) {",
    "                $(\"#transaction_io\").fadeTo(fadeout_duration, goneopacity);",
    "                txPeersDown = true;",
    "                setTimeout(updateTXPeers, 5000);",
    "            });",
    "        }",
    "",
    "",
    "        // Server Info",
    "        function updateMetrics() {",
    "            $.get(\"/vgx/status\", function (data, textStatus, jqXHR) {",
    "                if (metricsDown) {",
    "                    $(\"#http_server\").fadeTo(fadein_duration, 1);",
    "                    metricsDown = false;",
    "                }",
    "                const response = data[\"response\"];",
    "                let service_name = response[\"name\"];",
    "                const bytes_in = response[\"data\"][\"in\"];",
    "                const bytes_out = response[\"data\"][\"out\"];",
    "                const clients = response[\"connected_clients\"];",
    "                const total_clients = response[\"total_clients\"];",
    "                const request = response[\"request\"];",
    "                const service_in = request[\"serving\"] > 0 ? true : false;",
    "                const rate = parseFloat(request[\"rate\"]);",
    "                const waiting = request[\"waiting\"];",
    "                const working = parseFloat(request[\"working\"]);",
    "                const executors = request[\"executors\"];",
    "                const total = request[\"count\"];",
    "                const plugin = request[\"plugin\"];",
    "                const dispatcher = response[\"dispatcher\"];",
    "                const matrix_enabled = dispatcher[\"enabled\"];",
    "                const main_port = dispatcher[\"front-port\"];",
    "                const matrix_width = dispatcher[\"matrix-width\"];",
    "                const matrix_height = dispatcher[\"matrix-height\"];",
    "                const matrix_backlog = dispatcher[\"matrix-backlog\"];",
    "                const matrix_channels = dispatcher[\"matrix-active-channels\"];",
    "                const proxy = dispatcher[\"proxy\"];",
    "                const errors = response[\"errors\"];",
    "                const err_service = errors[\"service\"];",
    "                const err_http = errors[\"http\"];",
    "                const err_rate = parseFloat(errors[\"rate\"]);",
    "                const codes = errors[\"codes\"];",
    "                let http_error_codes = \"-\";",
    "                if (Object.keys(codes).length > 0) {",
    "                    http_error_codes = \"[\";",
    "                    let first = true;",
    "                    for (const err_code in codes) {",
    "                        if (first == true) {",
    "                            http_error_codes += err_code + \":\" + codes[err_code];",
    "                            first = false;",
    "                        }",
    "                        else {",
    "                            http_error_codes += \", \" + err_code + \":\" + codes[err_code];",
    "                        }",
    "                    }",
    "                    http_error_codes += \"]\";",
    "                }",
    "                const latency = response[\"response_ms\"];",
    "                const mean = parseFloat(latency[\"mean\"]);",
    "                const pct50_0 = parseFloat(latency[\"50.0\"]);",
    "                const pct90_0 = parseFloat(latency[\"90.0\"]);",
    "                const pct95_0 = parseFloat(latency[\"95.0\"]);",
    "                const pct99_0 = parseFloat(latency[\"99.0\"]);",
    "                const kiB_in = Math.round(bytes_in / 1024);",
    "                const kiB_out = Math.round(bytes_out / 1024);",
    "",
    "                const wratio = working / executors;",
    "                if (loadfactor < 0.0) {",
    "                    loadfactor = wratio;",
    "                }",
    "                else {",
    "                    loadfactor = (0.95 * loadfactor) + (0.05 * working / executors);",
    "                    if (loadfactor > 1.0) {",
    "                        loadfactor = 1.0;",
    "                    }",
    "                }",
    "",
    "                if (loadfactor > 0.9) {",
    "                    $('#loadfactor').css(\"color\", color_critical);",
    "                    $('#loadfactor').addClass(\"alertable\");",
    "                }",
    "                else {",
    "                    if (loadfactor > 0.75) {",
    "                        $('#loadfactor').css(\"color\", color_high);",
    "                    }",
    "                    else {",
    "                        $('#loadfactor').css(\"color\", color_normal);",
    "                    }",
    "                    $('#loadfactor').removeClass(\"alertable\");",
    "                }",
    "",
    "                if (service_name.length > 32) {",
    "                    service_name = service_name.slice(0, 29) + \"...\";",
    "                }",
    "",
    "                $('#service_name').html(service_name);",
    "                const S_in_out = service_in ? \"S-IN\" : \"S-OUT\";",
    "                $('#service_in').html(S_in_out + \" (\" + (main_port ? main_port : \"?\") + \")\" );",
    "                if (matrix_enabled) {",
    "                    if (proxy) {",
    "                        $('#service_mode').html(\"Proxy (\" + matrix_height + \"R)\" );",
    "                    }",
    "                    else {",
    "                        const dim = \"\" + matrix_height + \"R x \" + matrix_width + \"P\";",
    "                        $('#service_mode').html(\"Dispatch (\" + dim + \")\" );",
    "                    }",
    "                }",
    "                else {",
    "                    $('#service_mode').html(\"Engine\");",
    "                }",
    "                $('#qps').html(rate.toFixed(1));",
    "                $('#loadfactor').html((100.0 * loadfactor).toFixed(1));",
    "                $('#waiting').html(waiting);",
    "                if (matrix_backlog >= 0) {",
    "                    $('#matrix_backlog').html(matrix_backlog);",
    "                }",
    "                else {",
    "                    $('#matrix_backlog').html(\"N/A\");",
    "                }",
    "                if (matrix_enabled  && matrix_channels >= 0) {",
    "                    $('#matrix_channels').html(matrix_channels);",
    "                }",
    "                else {",
    "                    $('#matrix_channels').html(\"N/A\");",
    "                }",
    "                $('#total').html(total.toLocaleString(\"en-US\"));",
    "                $('#plugin').html(plugin.toLocaleString(\"en-US\"));",
    "                $('#mean').html(mean.toFixed(2));",
    "                $('#pct50_0').html(pct50_0.toFixed(2));",
    "                $('#pct90_0').html(pct90_0.toFixed(2));",
    "                $('#pct95_0').html(pct95_0.toFixed(2));",
    "                $('#pct99_0').html(pct99_0.toFixed(2));",
    "                $('#clients').html(clients);",
    "                $('#total_clients').html(total_clients);",
    "                $('#data_in').html(kiB_in.toLocaleString(\"en-US\"));",
    "                $('#data_out').html(kiB_out.toLocaleString(\"en-US\"));",
    "                $('#err_service').html(err_service.toLocaleString(\"en-US\"));",
    "                $('#err_http').html(err_http.toLocaleString(\"en-US\"));",
    "                $('#err_rate').html(err_rate.toFixed(1));",
    "                $('#http_codes').html(http_error_codes);",
    "                setTimeout(updateMetrics, 2300);",
    "",
    "                let serverbox = $('#http_server');",
    "                let fontsize = 90;",
    "                $('#service_name').css(\"font-size\", \"90%\");",
    "                while (serverbox.width() > 300 && fontsize > 3) {",
    "                    fontsize -= 1;",
    "                    $('#service_name').css(\"font-size\", fontsize + \"%\");",
    "                }",
    "",
    "            }).fail(function (xhr, txt, err) {",
    "                $(\"#http_server\").fadeTo(fadeout_duration, goneopacity);",
    "                metricsDown = true;",
    "                setTimeout(updateMetrics, 5000);",
    "            });",
    "        }",
    "",
    "        // Memory Info",
    "        function updateMemory() {",
    "            $.get(\"/vgx/meminfo\", function (data, textStatus, jqXHR) {",
    "                if (memoryDown) {",
    "                    $(\"#memory_usage\").fadeTo(fadein_duration, 1);",
    "                    memoryDown = false;",
    "                }",
    "                const mem = data[\"response\"][\"memory\"];",
    "                const total = parseInt(mem[\"total\"]);",
    "                // current",
    "                const current = mem[\"current\"];",
    "                const current_avail = parseInt(current[\"available\"]);",
    "                const current_process = parseInt(current[\"process\"]);",
    "                const current_usage_total = current_process / total;",
    "                const mempct_used = 100.0 - 100.0 * (current_avail / total);",
    "                const mempct_total = 100.0 * current_usage_total",
    "                const MiB_proc = Math.round(current_process / (1024 * 1024))",
    "                $('#mem_MiB').html(MiB_proc.toLocaleString(\"en-US\"));",
    "                $('#mempct_used').html(mempct_used.toFixed(0));",
    "                $('#mempct_total').html(mempct_total.toFixed(1));",
    "                // worst-case",
    "                const worst_case = mem[\"worst-case\"];",
    "                const min_avail = parseInt(worst_case[\"available\"]);",
    "                const max_process = parseInt(worst_case[\"process\"]);",
    "                const max_usage_total = max_process / total;",
    "                const max_mempct_used = 100.0 - 100.0 * (min_avail / total);",
    "                const max_mempct_total = 100.0 * max_usage_total;",
    "                const max_MiB_proc = Math.round(max_process / (1024 * 1024))",
    "                $('#max_mem_MiB').html(max_MiB_proc.toLocaleString(\"en-US\"));",
    "                $('#max_mempct_used').html(max_mempct_used.toFixed(0));",
    "                $('#max_mempct_total').html(max_mempct_total.toFixed(1));",
    "                // Color",
    "                const pct_critical = 90.0;",
    "                const pct_high = 75.0;",
    "                const fields = [[mempct_used, '#mempct_used'],",
    "                [mempct_total, '#mempct_total'],",
    "                [max_mempct_used, '#max_mempct_used'],",
    "                [max_mempct_total, '#max_mempct_total']];",
    "                for (var i = 0; i < fields.length; i++) {",
    "                    const value = fields[i][0];",
    "                    const dest = fields[i][1];",
    "                    if (value > pct_critical) {",
    "                        $(dest).css(\"color\", color_critical);",
    "                        $(dest).addClass(\"alertable\");",
    "                    }",
    "                    else {",
    "                        if (value > pct_high) {",
    "                            $(dest).css(\"color\", color_high);",
    "                        }",
    "                        else {",
    "                            $(dest).css(\"color\", color_normal);",
    "                        }",
    "                        $(dest).removeClass(\"alertable\");",
    "                    }",
    "                }",
    "",
    "                setTimeout(updateMemory, 3100);",
    "            }).fail(function (xhr, txt, err) {",
    "                $(\"#memory_usage\").fadeTo(fadeout_duration, goneopacity);",
    "                memoryDown = true;",
    "                setTimeout(updateMemory, 5000);",
    "            });",
    "        }",
    "",
    "        const params = new Proxy(new URLSearchParams(window.location.search), {",
    "            get: (searchParams, prop) => searchParams.get(prop),",
    "        });",
    "",
    "        //updateTime();",
    "        updateGraph();",
    "        updateMetrics();",
    "        updateTX();",
    "        updateTXPeers();",
    "        updateMemory();",
    "",
    "        $('.label').css(\"color\", \"#000000\");",
    "        $('.superlabel').css(\"color\", \"#000000\");",
    "        $('.sublabel').css(\"color\", \"#000000\");",
    "        $('.unit').css(\"color\", \"#808080\");",
    "        $('.vint').css(\"color\", \"#0000C0\");",
    "        $('.vfloat').css(\"color\", \"#0000C0\");",
    "        $('.vstr').css(\"color\", \"#007050\");",
    "        $('.vkib').css(\"color\", \"#0000C0\");",
    "        $('.datarow').on(\"mouseover\", function () {",
    "            $(this).find('.val').addClass(\"highlight\");",
    "        });",
    "        $('.datarow').on(\"mouseout\", function () {",
    "            $(this).find('.val').removeClass(\"highlight\");",
    "        });",
    "",
    "    }",
    "",
    "    CommonHeader.ready(main, 12);",
    "",
    "</script>",
    "",
    0
};



const char *VGX_BUILTIN_HTML_system[] = {
    "<!DOCTYPE html>",
    "<!--",
    "",
    "  VGX Server",
    "  Distributed engine for plugin-based graph and vector search",
    "",
    "  Module:  vgx",
    "  File:    system.html",
    "  Author:  Stian Lysne <...>",
    "",
    "  Copyright Â© 2025 Rakuten, Inc.",
    "",
    "  Licensed under the Apache License, Version 2.0 (the \"License\");",
    "  you may not use this file except in compliance with the License.",
    "  You may obtain a copy of the License at",
    "",
    "      http://www.apache.org/licenses/LICENSE-2.0",
    "",
    "  Unless required by applicable law or agreed to in writing, software",
    "  distributed under the License is distributed on an \"AS IS\" BASIS,",
    "  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
    "  See the License for the specific language governing permissions and",
    "  limitations under the License.",
    "",
    "-->",
    "",
    "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
    "",
    "<html lang=\"en\">",
    "<head>",
    "    <meta charset=\"UTF-8\"/>",
    "    <title>VGX System Overview</title>",
    "    <script src=\"jquery.js\"></script>",
    "    <script src=\"header.js\"></script>",
    "    <script src=\"clock.js\"></script>",
    "    <script src=\"boxstate.js\"></script>",
    "    <script src=\"digest.js\"></script>",
    "    <link rel=\"stylesheet\" href=\"vgx.css\">",
    "</head>",
    "<body class=\"disable_select\">",
    "    <div>",
    "        <div id=\"commonHeaderDiv\"></div>",
    "",
    "        <div class=\"container\" id=\"mainBody\">",
    "            <div id=\"templateArea\" style=\"visibility: hidden\">",
    "                <table>",
    "                    <tr id=\"rowTemplate\">",
    "                        <td class=\"nodennum nodebox nodecell\"><input class=\"nodeident\" type=\"text\" value=\"\"></td>",
    "                        <td class=\"nodentyp nodebox nodecell\"><input type=\"text\" value=\"\"></td>",
    "                        <td class=\"nodestat nodebox nodecell\"><input type=\"text\" value=\"\"></td>",
    "                        <td class=\"nodeuptm nodebox nodecell nodeinfo nodefade\"><input type=\"text\" value=\"\"></td>",
    "                        <td class=\"nodehost nodecell nodeinfo\"><input type=\"text\" value=\"\"></td>",
    "                        <td class=\"nodemtrx nodebox nodecell nodeinfo nodefade\"><input type=\"text\" value=\"\"></td>",
    "                        <td class=\"nodencli nodebox nodecell nodefade\"><input type=\"text\" value=\"\"></td>",
    "                        <td class=\"nodencha nodebox nodecell nodefade\"><input type=\"text\" value=\"\"></td>",
    "                        <td class=\"nodeqbal nodebox nodecell nodefade\"><input class=\"nodebars\" type=\"text\" value=\"\"></td>",
    "                        <td class=\"noderate nodebox nodecell nodevalu nodefade\"><input type=\"text\" value=\"\"></td>",
    "                        <td class=\"nodeqlat nodebox nodecell nodevalu nodefade\"><input type=\"text\" value=\"\"></td>",
    "                        <td class=\"nodeload nodebox nodecell nodefade\">",
    "                            <span class=\"memusage\">",
    "                                <input class=\"nodemprc nodebars\" type=\"text\" value=\"\">",
    "                                <span class=\"memnode\">",
    "                                    <input class=\"nodemmry nodebars\" type=\"text\" value=\"\">",
    "                                    <input class=\"nodemtot nodebars\" type=\"text\" value=\"\">",
    "                                </span>",
    "                            </span>",
    "                        </td>",
    "                        <td class=\"nodeordr nodebox nodecell nodevalu nodefade\"><input type=\"text\" value=\"\"></td>",
    "                        <td class=\"nodesize nodebox nodecell nodevalu nodefade\"><input type=\"text\" value=\"\"></td>",
    "                        <td class=\"nodetsub nodebox nodecell nodefade\">",
    "                            <input class=\"nodetx nodesubs nodebars\" type=\"text\" value=\"\">",
    "                        </td>",
    "                        <td class=\"nodetout nodebox nodecell nodefade\">",
    "                            <span class=\"txoutput\" >",
    "                                <input class=\"nodetx nodetxro nodebars\" type=\"text\" value=\"\">",
    "                                <input class=\"nodeprov\" type=\"text\" value=\"\">",
    "                            </span>",
    "                        </td>",
    "                        <td class=\"nodetinp nodebox nodecell nodefade\">",
    "                            <span class=\"txinput\" >",
    "                                <input class=\"nodetx nodetxri nodebars\" type=\"text\" value=\"\">",
    "                            </span>",
    "                        </td>",
    "                        <td class=\"nodeslag nodebox nodecell nodefade\">",
    "                            <input class=\"nodetx nodesndf nodebars\" type=\"text\" value=\"\">",
    "                        </td>",
    "                        <td class=\"nodedgst nodefade\">",
    "                            <span class=\"digest\">",
    "                            </span>",
    "                        </td>",
    "                        <td class=\"nodemser nodecell nodeinfo nodefade\"><input type=\"text\" value=\"\"></td>",
    "                        <td class=\"nodetlog nodebox nodefade\">",
    "                            <input class=\"nodeztxl nodebars\" type=\"text\" value=\"\">",
    "                        </td>",
    "                    </tr>",
    "                </table>",
    "            </div>",
    "",
    "            <div id=\"descriptorArea\">",
    "                <div class=\"systemname\">",
    "                    <div id=\"descriptorName\"></div>",
    "                </div>",
    "                <div id=\"descriptorBottom\">",
    "                  <div id=\"descriptorSysinfoArea\">",
    "                      <table id=\"descriptor\" class=\"infolist\" style=\"visibility: hidden\">",
    "                          <tbody>",
    "                              <tr>",
    "                                  <td><span class=\"sysinfoname\">Status</span></td>",
    "                                  <td><span class=\"sysinfo enable_select\" id=\"systemStatus\"></span></td>",
    "                              </tr>",
    "                              <tr>",
    "                                  <td><span class=\"sysinfoname\">Instances</span></td>",
    "                                  <td><span class=\"sysinfo enable_select\" id=\"totalInstances\"></span></td>",
    "                              </tr>",
    "                              <tr>",
    "                                  <td><span class=\"sysinfoname\">Partitions</span></td>",
    "                                  <td><span class=\"sysinfo enable_select\" id=\"builderPartitions\"></span></td>",
    "                              </tr>",
    "                              <tr>",
    "                                  <td><span class=\"sysinfoname\">Vertices</span></td>",
    "                                  <td><span class=\"sysinfo enable_select\" id=\"builderSumOrder\"></span></td>",
    "                              </tr>",
    "                              <tr>",
    "                                  <td><span class=\"sysinfoname\">Arcs</span></td>",
    "                                  <td><span class=\"sysinfo enable_select\" id=\"builderSumSize\"></span></td>",
    "                              </tr>",
    "                              <tr>",
    "                                  <td><span class=\"sysinfoname\">Properties</span></td>",
    "                                  <td><span class=\"sysinfo enable_select\" id=\"builderSumProperties\"></span></td>",
    "                              </tr>",
    "                               <tr>",
    "                                  <td><span class=\"sysinfoname\">Vectors</span></td>",
    "                                  <td><span class=\"sysinfo enable_select\" id=\"builderSumVectors\"></span></td>",
    "                              </tr>",
    "                              <tr>",
    "                                  <td><span class=\"sysinfoname\">CPU</span></td>",
    "                                  <td><span class=\"sysinfo enable_select\" id=\"cpuBrand\"></span></td>",
    "                              </tr>",
    "                              <tr>",
    "                                  <td><span class=\"sysinfoname\">Memory</span></td>",
    "                                  <td><span class=\"sysinfo enable_select\" id=\"totalMemory\"></span></td>",
    "                              </tr>",
    "                              <!--tr>",
    "                                  <td><span class=\"sysinfoname\">ZZZ</span></td>",
    "                                  <td><span class=\"sysinfo enable_select\" id=\"zzz\"></td>",
    "                              </tr-->",
    "",
    "                          </tbody>",
    "                      </table>",
    "                  </div>",
    "                  <span id=\"descriptorActionArea\">",
    "                      <textarea class=\"infolist disable_select scheme-dark1\" id=\"recentAction\" name=\"recentAction\" rows=\"2\"  value=\"\" readonly=\"readonly\" style=\"visibility: hidden\"></textarea>",
    "                  </span>",
    "                </div>",
    "            </div>",
    "",
    "            <div id=\"nodeListArea\">",
    "                <table id=\"nodeList\" class=\"hostlist\">",
    "                    <thead>",
    "                        <tr>",
    "                            <th colspan=\"21\"><hr></th>",
    "                        </tr>",
    "                        <tr id=\"nodeListHeader2\" class=\"nodeListHeader\">",
    "                            <th colspan=\"5\"><span class=\"colSubGroup\">Instance</span></th>",
    "                            <th colspan=\"6\"><span class=\"colSubGroup\">Server Load</span></th>",
    "                            <th colspan=\"1\"><span class=\"colSubGroup\">Memory</span></th>",
    "                            <th colspan=\"2\"><span class=\"colSubGroup\">Graph</span></th>",
    "                            <th colspan=\"4\"><span class=\"colSubGroup\">Interconnect</span></th>",
    "                            <th colspan=\"3\"><span class=\"colSubGroup\">Transaction</span></th>",
    "                        </tr>",
    "                        <tr id=\"nodeListHeader3\" class=\"nodeListHeader\">",
    "                            <th class=\"nodennum\" title=\"Unique Instance Identifier\">",
    "                                <span class=\"colHead\">Id</span>",
    "                            </th>",
    "                            <th class=\"nodentyp\" title=\"Instance Type\">",
    "                                <span class=\"colHead\">Type</span>",
    "                            </th>",
    "                            <th class=\"nodestat\" title=\"Instance Status\">",
    "                                <span class=\"colHead\">Status</span>",
    "                            </th>",
    "                            <th class=\"nodeuptm\" title=\"Time Elapsed Since VGX Server Startup\">",
    "                                <span class=\"colHead\">Uptime</span>",
    "                            </th>",
    "                            <th class=\"nodehost\" title=\"Hostname/IP : Admin Port\">",
    "                                <span class=\"colHead\">Address</span>",
    "                            </th>",
    "                            <th class=\"nodemtrx\" title=\"Dispatcher Matrix Shape&#013Service In/Out Indicator\">",
    "                                <span class=\"colHead\">Matrix</span>",
    "                            </th>",
    "                            <th class=\"nodencli\" title=\"Number of Connected Client Sockets\">",
    "                                <span class=\"colHead\">In</span>",
    "                            </th>",
    "                            <th class=\"nodencha\" title=\"Number of Connected Backend&#13Matrix Sockets (channels)\">",
    "                                <span class=\"colHead\">Out</span>",
    "                            </th>",
    "                            <th class=\"nodeqbal\" title=\"Request Load Balance&#13Indicator within Group\">",
    "                                <span class=\"colHead\">Bal</span>",
    "                            </th>",
    "                            <th class=\"noderate\" title=\"Requests per Second\">",
    "                                <span class=\"colHead\">RPS</span>",
    "                            </th>",
    "                            <th class=\"nodeqlat\" title=\"95th Percentile Request&#13Latency (milliseconds)\">",
    "                                <span class=\"colHead\">95th ms</span>",
    "                            </th>",
    "                            <th class=\"nodeload\" title=\"Left: Memory Used by Instance (GiB)&#13Right: Physical Host Memory Usage / Total (GiB)\">",
    "                                <span class=\"colHead\">Instance / Host</span>",
    "                            </th>",
    "                            <th class=\"nodeordr\" title=\"Number of Vertices in Graph(s)\">",
    "                                <span class=\"colHead\">Order</span>",
    "                            </th>",
    "                            <th class=\"nodesize\" title=\"Number of Arcs in Graph(s)\">",
    "                                <span class=\"colHead\">Size</span>",
    "                            </th>",
    "                            <th class=\"nodetsub\" title=\"Subscriber Status for Provider Instance&#13Indicates Number of Attached Subscribers\">",
    "                                <span class=\"colHead\">Subs</span>",
    "                            </th>",
    "                            <th class=\"nodetout\" title=\"Provider Transaction&#13Data Output Indicator\">",
    "                                <span class=\"colHead\">Out</span>",
    "                            </th>",
    "                            <th class=\"nodetinp\" title=\"Subscriber Transaction&#13Data Input Indicator\">",
    "                                <span class=\"colHead\">In</span>",
    "                            </th>",
    "                            <th class=\"nodeslag\" title=\"Subscriber Transaction&#13Input Lag Indicator\">",
    "                                <span class=\"colHead\">Lag</span>",
    "                            </th>",
    "                            <th class=\"nodedgst\" title=\"Identicon Representing Digest&#13of Instance Graph Data\">",
    "                                <span class=\"colHead\">Digest</span>",
    "                            </th>",
    "                            <th class=\"nodemser\" title=\"Most Recent Transaction Serial Number\">",
    "                                <span class=\"colHead\">S/N</span>",
    "                            </th>",
    "                            <th class=\"nodetlog\" title=\"Transaction Log Size Indicator&#13for Durable TXProxy Instance\">",
    "                                <span class=\"colHead\">TX Log</span>",
    "                            </th>",
    "                        </tr>",
    "                    </thead>",
    "                    <tbody>",
    "                    </tbody>",
    "                </table>",
    "            </div>",
    "        </div>",
    "",
    "        <div id=\"commonFooterDiv\"></div>",
    "    </div>",
    "",
    "",
    "    <!-- Modal HTML -->",
    "    <div id=\"modalprompt\" class=\"modalprompt\">",
    "      <div class=\"modalprompt-content\">",
    "        <div id=\"modalprompt-title\"></div>",
    "        <div id=\"modalprompt-message\"></div>",
    "        <div id=\"modalprompt-inputlabel\"></div>",
    "        <input type=\"text\" id=\"modalprompt-input\" style=\"display: none;\">",
    "        <div class=\"modalprompt-buttons\">",
    "            <button id=\"modalprompt-ok\">OK</button>",
    "            <button id=\"modalprompt-cancel\">Cancel</button>",
    "        </div>",
    "      </div>",
    "    </div>",
    "",
    "</body>",
    "</html>",
    "",
    "<style>",
    "",
    "    .container {",
    "        overflow: visible;",
    "    }",
    "",
    "    .container .headrow {",
    "        background-color: #D0D0D0;",
    "    }",
    "",
    "    body {",
    "        overflow: auto;",
    "        background-color: #D7D7D7;",
    "    }",
    "",
    "    input[disabled] {",
    "        pointer-events: none;",
    "    }",
    "",
    "    #commonHeaderTable {",
    "        position: sticky;",
    "        left: 0;",
    "    }",
    "",
    "    #templateArea {",
    "        height: 0px;",
    "    }",
    "",
    "    #nodeList {",
    "        margin-left: 0px;",
    "    }",
    "",
    "    #nodeList thead {",
    "        position: sticky;",
    "        top: 0px;",
    "        z-index: 1000;",
    "        background: linear-gradient(",
    "            to bottom,",
    "            rgba( 215, 215, 215, 1.0 ) 70%,",
    "            rgba( 215, 215, 215, 0.5 ) 95%,",
    "            rgba( 215, 215, 215, 0.0 ) 100%",
    "        );",
    "    }",
    "",
    "    #nodeListHeader1 th {",
    "        text-align: center;",
    "        padding-left: 3px;",
    "        padding-right: 3px;",
    "        padding-bottom: 3px;",
    "    }",
    "",
    "    #nodeListHeader2 th {",
    "        text-align: center;",
    "        padding-left: 3px;",
    "        padding-right: 3px;",
    "        padding-bottom: 3px;",
    "    }",
    "",
    "    #nodeListHeader3 th {",
    "        text-align: center;",
    "        padding-top: 3px;",
    "        padding-left: 3px;",
    "        padding-right: 3px;",
    "        padding-bottom: 3px;",
    "    }",
    "",
    "    .colTopGroup {",
    "        align-items: center;",
    "        display: inline-block;",
    "        width: 100%;",
    "        background: #E0E0E0;",
    "        padding: 2px;",
    "        border-radius: 3px;",
    "    }",
    "",
    "    .colSubGroup {",
    "        align-items: center;",
    "        display: inline-block;",
    "        font-size: 17px;",
    "        width: 100%;",
    "        color: #F1F1F1;",
    "        background: #444444;",
    "        padding: 2px;",
    "        border-radius: 3px;",
    "    }",
    "",
    "    .colHead {",
    "        align-items: center;",
    "        display: inline-block;",
    "        font-size: 15px;",
    "        width: 100%;",
    "        color: #F1F1F1;",
    "        background: #444444;",
    "        padding: 2px;",
    "        border-radius: 3px;",
    "    }",
    "",
    "    #rowTemplate {",
    "        visibility: hidden;",
    "    }",
    "",
    "    tr#rowTemplate td {",
    "        padding-top: 0px;",
    "        padding-bottom: 0px;",
    "    }",
    "",
    "    #descriptor td {",
    "        display: inline-flex;",
    "        font-size: 18px;",
    "        font-weight: bold;",
    "    }",
    "",
    "    #descriptor td, #descriptor td span {",
    "        vertical-align: middle;",
    "    }",
    "",
    "    .sysinfoname {",
    "        display: inline-flex;",
    "        align-items: center;",
    "        padding-top: 0px;",
    "        padding-bottom: 0px;",
    "        padding-left: 5px;",
    "        border-radius: 3px;",
    "        font-size: 17px;",
    "        font-family: Cambria;",
    "        font-weight: bold;",
    "        height: 24px;",
    "        overflow: hidden;",
    "        max-width: 110px;",
    "        margin-left: -3px;",
    "    }",
    "",
    "    .sysinfo {",
    "        display: inline-flex;",
    "        align-items: center;",
    "        padding-top: 0px;",
    "        padding-bottom: 0px;",
    "        padding-left: 5px;",
    "        border-radius: 3px;",
    "        border: solid 1px;",
    "        font-size: 16px;",
    "        font-weight: bold;",
    "        height: 24px;",
    "        font-family: Consolas, Menlo, courier;",
    "        overflow: hidden;",
    "        max-width: 365px;",
    "    }",
    "",
    "    .sysinfo:hover {",
    "        font-weight: bold;",
    "    }",
    "",
    "    #cpuBrand {",
    "        text-align: left;",
    "        text-overflow: ellipsis;",
    "    }",
    "",
    "    .hostlist {",
    "        border-spacing: 0px;",
    "        /*margin-top: -20px;*/",
    "        /*margin-bottom: 30px;*/",
    "    }",
    "",
    "    .hostlist td {",
    "        font-size: 14px;",
    "        font-family: Consolas, Menlo, courier;",
    "    }",
    "",
    "    .hostlist input {",
    "        font-size: 14px;",
    "        font-family: Consolas, Menlo, courier;",
    "        font-weight: bold;",
    "    }",
    "",
    "/*",
    "    .hostlist th {",
    "        text-align: left;",
    "        padding-left: 5px;",
    "    }",
    "",
    "    .hostlist tr th {",
    "        padding-bottom: 15px;",
    "    }",
    "*/",
    "",
    "    .hostlist tr td {",
    "        padding-top: 1px;",
    "        padding-bottom: 1px;",
    "    }",
    "",
    "    .infolist {",
    "        float: left;",
    "    }",
    "",
    "    .infolist input {",
    "        font-size: 18px;",
    "        font-family: Consolas, Menlo, courier;",
    "        font-weight: bold;",
    "        /*background-color: transparent;*/",
    "        border-style: solid;",
    "        min-width: 24ch;",
    "        height: 22px;",
    "        padding-bottom: 1px;",
    "        border: solid 1px;",
    "        border-color: #EEEEEE;",
    "        background: #EEEEEE;",
    "    }",
    "",
    "    #descriptorArea {",
    "        display: inline-flex;",
    "        flex-direction: column;",
    "        align-items: flex-start;",
    "        position: sticky;",
    "        left: 0;",
    "        width: 900px;",
    "        min-width: 0px;",
    "    }",
    "",
    "    #descriptorArea, #descriptorArea span {",
    "        white-space: nowrap;",
    "        /*vertical-align: top;*/",
    "    }",
    "",
    "    .systemname {",
    "        display: flex;",
    "        width: calc(100% - 4px);",
    "        align-items: center;",
    "        justify-content: center;",
    "        margin-left: 4px;",
    "        margin-bottom: 8px;",
    "        padding-bottom: 5px;",
    "        border-radius: 3px;",
    "        font-size: 19px;",
    "        font-family: Cambria;",
    "        font-weight: bold;",
    "        height: 32px;",
    "        overflow: hidden;",
    "    }",
    "",
    "    #descriptorName {",
    "        max-width: 100%;",
    "        padding-left: 5px;",
    "        white-space: nowrap;",
    "        text-align: left;",
    "        text-overflow: ellipsis;",
    "        overflow: hidden;",
    "        cursor: pointer;",
    "    }",
    "",
    "    #descriptorBottom {",
    "        display: flex;",
    "        align-items: stretch;",
    "        width: 100%;",
    "    }",
    "",
    "    #descriptorSysinfoArea {",
    "/*        display: inline-flex; */",
    "        margin-right: 15px;",
    " /*       flex-shrink: 0; */",
    "        border-color: #D0D0D0;",
    "        background: #D7D7D7;",
    "",
    "    }",
    "",
    "    .hidearea {",
    "        display: none !important;",
    "    }",
    "",
    "    #descriptorActionArea {",
    "        display: flex;",
    "        flex: 1;",
    "        min-width: 0px;",
    "    }",
    "",
    "    #recentAction {",
    "        flex: 1;",
    "        resize: none;",
    "        font-size: 12px;",
    "        font-family: Cambria;",
    "        font-weight: normal;",
    "        /*border-style: solid;*/",
    "        min-width: 0px;",
    "        width: auto;",
    "        box-sizing: border-box;",
    "        padding-bottom: 1px;",
    "        margin-top: 3px;",
    "        margin-left: 5px;",
    "        /*border: solid 1px;*/",
    "        pointer-events: auto;",
    "        cursor: pointer;",
    "        outline: none;",
    "    }",
    "",
    "    .mousedown {",
    "        transform: translate(1px, 2px);",
    "        box-shadow: -1px -2px 1px #CCCCCC;",
    "    }",
    "",
    "    .nodebox input {",
    "        border-style: solid;",
    "        border: solid 1px;",
    "        border-radius: 3px;",
    "        border-color: #444444;",
    "    }",
    "",
    "    .nodecell input {",
    "        background-color: transparent;",
    "        height: 20px;",
    "    }",
    "",
    "    .nodeinfo input {",
    "        font-size: 12px;",
    "        padding-bottom: 1px;",
    "        background: #EEEEEE;",
    "    }",
    "",
    "    .nodevalu input {",
    "        font-size: 12px;",
    "        text-align: right;",
    "        padding-right: 4px;",
    "        padding-left: 4px;",
    "        color: #0000C0;",
    "    }",
    "",
    "    input.nodeident {",
    "        font-family: Consolas, Menlo, courier;",
    "        font-size: 12px;",
    "        text-align: left;",
    "        padding-left: 2px;",
    "        padding-bottom: 2px;",
    "        margin-top: 4px;",
    "        margin-bottom: 4px;",
    "    }",
    "",
    "    .nodennum input.localnode {",
    "        background-color: #444444;",
    "        color: #F8F8F8;",
    "        border-color: #888888;",
    "    }",
    "",
    "    .nodennum input.remotenode {",
    "        color: #000000;",
    "        background-color: #F8F8F8;",
    "    }",
    "",
    "    input.nodebars {",
    "        font-family: \"Arial Black\", sans-serif;",
    "        letter-spacing: -2px;",
    "        border-style: none;",
    "        background-color: #444444;",
    "        color: rgb(240,240,240);",
    "        font-size: 10px;",
    "        text-align: left;",
    "        padding-left: 4px;",
    "        padding-bottom: 4px;",
    "    }",
    "",
    "    .groupid {",
    "        color: #A0A0A0;",
    "    }",
    "",
    "    .grouptitle {",
    "        display: inline-block;",
    "        padding-top: 3px;",
    "        padding-bottom: 7px;",
    "        font-family: Consolas, Menlo, courier;",
    "        font-size: 16px;",
    "        font-weight: bold;",
    "        color: #000000;",
    "        margin-right: 10px;",
    "        z-index: 750;",
    "    }",
    "",
    "    /* Id */",
    "    .nodennum {",
    "        position: sticky;",
    "        left: 0;",
    "        z-index: 500;",
    "        background: linear-gradient(",
    "            to right,",
    "            rgba( 215, 215, 215, 1.0 ) 70%,",
    "            rgba( 215, 215, 215, 1.0 ) 80%,",
    "            rgba( 215, 215, 215, 0.0 ) 100%",
    "        );",
    "        /*position: relative;*/",
    "    }",
    "",
    "    .nodennum input {",
    "        max-width: 40px;",
    "        min-width: 40px;",
    "        text-align: center;",
    "        font-size: 14px;",
    "        background-color: #F1F1F1;",
    "        color: #000000;",
    "        border: solid 2px;",
    "        border-color: #888888;",
    "    }",
    "",
    "    /* Type */",
    "    th.nodentyp {",
    "        text-align: left;",
    "    }",
    "",
    "    .nodentyp input {",
    "        max-width: 80px;",
    "        font-weight: bold;",
    "        text-align: center;",
    "        text-align: center;",
    "        padding-left: 2px;",
    "        padding-right: 2px;",
    "    }",
    "",
    "    /* Status */",
    "    th.nodestat {",
    "        text-align: left;",
    "    }",
    "",
    "    .nodestat input {",
    "        max-width: 80px;",
    "        font-weight: bold;",
    "        text-align: center;",
    "        padding-left: 2px;",
    "        padding-right: 2px;",
    "    }",
    "",
    "    .nodetlag input {",
    "        max-width: 50px;",
    "    }",
    "",
    "    /* Uptime */",
    "    .nodeuptm input {",
    "        font-family: Consolas, Menlo, courier;",
    "        font-size: 12px;",
    "        font-weight: bold;",
    "        text-align: center;",
    "        width: 100px;",
    "        padding-left: 1px;",
    "        padding-right: 1px;",
    "        background: #444444;",
    "        color: #A5F342;",
    "        border-style: none;",
    "    }",
    "",
    "    /* Host */",
    "    .nodehost input {",
    "        text-align: left;",
    "    }",
    "",
    "    /* Matrix */",
    "    .nodemtrx input {",
    "        text-align: center;",
    "        max-width: 70px;",
    "    }",
    "",
    "    /* I/O Sockets */",
    "    .iosockets {",
    "        display: inline-flex;",
    "        width: 80px;",
    "    }",
    "",
    "    /* Clients */",
    "    .nodencli input {",
    "        max-width: 30px;",
    "        padding-left: 2px;",
    "        padding-right: 2px;",
    "        font-family: Consolas, Menlo, courier;",
    "        font-size: 10px;",
    "        text-align: center;",
    "        background-color: #444444;",
    "        color: rgb(240,240,240);",
    "    }",
    "",
    "    /* Channels */",
    "    .nodencha input {",
    "        max-width: 30px;",
    "        padding-left: 2px;",
    "        padding-right: 2px;",
    "        font-family: Consolas, Menlo, courier;",
    "        font-size: 10px;",
    "        text-align: center;",
    "        background-color: #444444;",
    "        color: rgb(240,240,240);",
    "    }",
    "",
    "    /* Query Balance */",
    "    .nodeqbal input {",
    "        max-width: 36px;",
    "        /*font-size: 11px;",
    "        text-align: center;",
    "        padding-left: 5px;",
    "        padding-right: 5px;",
    "        font-family: Consolas, Menlo, courier;",
    "        background-color: #444444;",
    "        color: rgb(240,240,240);*/",
    "    }",
    "",
    "    /* QPS */",
    "    .noderate input {",
    "        max-width: 70px;",
    "    }",
    "",
    "    /* 95th */",
    "    .nodeqlat input {",
    "        max-width: 70px;",
    "    }",
    "",
    "    /* Memory */",
    "    .nodeload {",
    "        position: relative;",
    "        max-width: 175px;",
    "    }",
    "",
    "    .memusage {",
    "        display: inline-flex;",
    "        width: 146px;",
    "    }",
    "",
    "    .memusage input {",
    "        vertical-align: middle;",
    "    }",
    "",
    "    .memnode {",
    "        display: inline-flex;",
    "    }",
    "",
    "    input.nodemprc {",
    "        max-width: 40px;",
    "        font-family: Consolas, Menlo, courier;",
    "        letter-spacing: 0px;",
    "        font-size: 11px;",
    "        text-align: center;",
    "        margin-right: 10px;",
    "    }",
    "",
    "    input.nodemmry {",
    "        max-width: 70px;",
    "        z-index:12;",
    "    }",
    "",
    "    input.nodemtot {",
    "        margin-left: -6px;",
    "        max-width: 32px;",
    "        font-family: Consolas, Menlo, courier;",
    "        letter-spacing: 0px;",
    "        font-size: 11px;",
    "        text-align: center;",
    "        z-index:11;",
    "    }",
    "",
    "    /* Order */",
    "    .nodeordr input {",
    "        max-width: 90px;",
    "    }",
    "",
    "    /* Size */",
    "    .nodesize input {",
    "        max-width: 90px;",
    "    }",
    "",
    "    /* Subs */",
    "    .nodetsub {",
    "        position: relative;",
    "        max-width: 51px;",
    "    }",
    "",
    "    .nodetsub input {",
    "        max-width: 41px;",
    "    }",
    "",
    "    input.nodesubs {",
    "        max-width: 40px;",
    "        /*font-family: Consolas, Menlo, courier;*/",
    "        letter-spacing: 0px;",
    "        font-size: 10px;",
    "        text-align: center;",
    "        /*color: #A5F342;*/",
    "        /*color: #FF8080;*/",
    "",
    "    }",
    "",
    "    .nodesubs {",
    "    }",
    "",
    "    /* Out */",
    "    .txoutput {",
    "        display: inline-block;",
    "        /* width: 88px; */",
    "        width: 77px;",
    "    }",
    "",
    "    .nodetout {",
    "        position: relative;",
    "        /*max-width: 23px;*/",
    "        max-width: 52px;",
    "    }",
    "",
    "    .nodetout input {",
    "        max-width: 41px;",
    "    }",
    "",
    "    input.nodeprov {",
    "        position: relative;",
    "        /* max-width: 20px; */",
    "        max-width: 22px;",
    "        /* left: 29px; */",
    "        left: 3px;",
    "        padding-left: 2px;",
    "        padding-bottom: 1px;",
    "        border-style: none;",
    "        font-family: \"Arial\", sans-serif;",
    "        font-size: 11px;",
    "        text-align: center;",
    "        background: transparent;",
    "        color: #EEEEEE;",
    "        z-index:10;",
    "    }",
    "",
    "    .nodetxro {",
    "    }",
    "",
    "",
    "    /* In */",
    "    .txinput {",
    "        display: inline-block;",
    "        width: 88px;",
    "    }",
    "",
    "    .nodetinp {",
    "        position: relative;",
    "        /* max-width: 120px; */",
    "        max-width: 70px;",
    "    }",
    "",
    "    th.nodetinp {",
    "        /* left: 30px; */",
    "    }",
    "",
    "",
    "    input.nodetxri {",
    "        position: relative;",
    "        max-width: 58px;",
    "        padding-left: 20px;",
    "    }",
    "",
    "    /* Digest */",
    "    .nodedgst {",
    "    }",
    "",
    "    .nodedgst .digest {",
    "        width: 75px;",
    "        height: 24px;",
    "    }",
    "",
    "    .nodedgst .digestX {",
    "        font-size: 14px;",
    "    }",
    "",
    "    /* S/N */",
    "    .nodemser input {",
    "        text-align: center;",
    "        width: 150px;",
    "    }",
    "",
    "    /* Lag */",
    "    .nodeslag {",
    "        position: relative;",
    "        max-width: 51px;",
    "    }",
    "",
    "    .nodeslag input {",
    "        max-width: 41px;",
    "        padding-right: 5px;",
    "    }",
    "",
    "    .nodesndf {",
    "",
    "    }",
    "",
    "",
    "    /* TXLog */",
    "    .nodetlog {",
    "        position: relative;",
    "        max-width: 80px;",
    "    }",
    "",
    "    .nodetlog input {",
    "        max-width: 70px;",
    "    }",
    "",
    "    .nodeztxl {",
    "    }",
    "",
    "    input.scheme-nominal, .scheme-nominal {",
    "        border-color: #444444;",
    "        color: #0000C0;",
    "        background-color: #EEEEEE;",
    "    }",
    "",
    "    input.scheme-nominalblack, .scheme-nominalblack {",
    "        border-color: #444444;",
    "        color: #444444;",
    "        background-color: #EEEEEE;",
    "    }",
    "",
    "    input.scheme-disabled, .scheme-disabled {",
    "        border-color: #B8B8B8;",
    "        color: #808080;",
    "        background-color: #E8E8E8;",
    "    }",
    "",
    "    input.scheme-green, .scheme-green {",
    "        border-color: #007050;",
    "        color: #007050;",
    "        background-color: #EAFAF1;",
    "    }",
    "",
    "    input.scheme-greeninv, .scheme-greeninv {",
    "        border-color: #007050;",
    "        color: #EAFAF1;",
    "        background-color: #007050;",
    "    }",
    "",
    "    input.scheme-gray, .scheme-gray {",
    "        border-color: #AAAAAA;",
    "        color: #AAAAAA;",
    "        background-color: #EEEEEE;",
    "    }",
    "",
    "    input.scheme-gray2 {",
    "        border-color: #888888;",
    "        color: #888888;",
    "        background-color: #EEEEEE;",
    "    }",
    "",
    "    input.scheme-gray3, .scheme-gray3 {",
    "        border-color: #F8F8F8;",
    "        color: #3F3F3F;",
    "        background-color: #F8F8F8;",
    "    }",
    "",
    "    input.scheme-gray4, .scheme-gray4 {",
    "        border-color: #F8F8F8;",
    "        color: #3F3F3F;",
    "        background-color: #F1F1F1;",
    "    }",
    "",
    "    input.scheme-grayinv, .scheme-grayinv {",
    "        border-color: #AAAAAA;",
    "        color: #EEEEEE;",
    "        background-color: #AAAAAA;",
    "    }",
    "",
    "    input.scheme-black, .scheme-black {",
    "        border-color: #000000;",
    "        color: #000000;",
    "        background-color: #EEEEEE;",
    "    }",
    "",
    "    input.scheme-blackinv, .scheme-blackinv {",
    "        border-color: #000000;",
    "        color: #EEEEEE;",
    "        background-color: #000000;",
    "    }",
    "",
    "    input.scheme-dark1, .scheme-dark1 {",
    "        border-color: #AAAAAA;",
    "        color: #000000;",
    "        background-color: #CCCCCC;",
    "    }",
    "",
    "    input.scheme-dark2, .scheme-dark2 {",
    "        border-color: #444444;",
    "        color: #F1F1F1;",
    "        background-color: #444444;",
    "    }",
    "",
    "    input.scheme-orange1, .scheme-orange1{",
    "        border-color: #6E2C00;",
    "        color: #6E2C00;",
    "        background-color: #F9E79F;",
    "    }",
    "",
    "    input.scheme-orange2, .scheme-orange2 {",
    "        border-color: #6E2C00;",
    "        color: #6E2C00;",
    "        background-color: #F4D03F;",
    "    }",
    "",
    "    input.scheme-orange3, .scheme-orange3 {",
    "        border-color: #6E2C00;",
    "        color: #6E2C00;",
    "        background-color: #F1C40F;",
    "    }",
    "",
    "    input.scheme-orange4, .scheme-orange4 {",
    "        border-color: #582300;",
    "        color: #582300;",
    "        background-color: #FDA112;",
    "    }",
    "",
    "    input.scheme-orange5, .scheme-orange5 {",
    "        border-color: #6E2C00;",
    "        color: #F6DDCC;",
    "        background-color: #E67E22;",
    "    }",
    "",
    "    input.scheme-orange6, .scheme-orange6 {",
    "        border-color: #D35400;",
    "        color: #F6DDCC;",
    "        background-color: #D35400;",
    "    }",
    "",
    "    input.scheme-orangeinv, .scheme-orangeinv {",
    "        border-color: #7d6608;",
    "        color: #F9E79F;",
    "        background-color: #7d6608;",
    "    }",
    "",
    "    input.scheme-blue, .scheme-blue {",
    "        border-color: #1F618D;",
    "        color: #1F618D;",
    "        background-color: #EAF2F8;",
    "    }",
    "",
    "    input.scheme-blueinv, .scheme-blueinv {",
    "        border-color: #1F618D;",
    "        color: #EAF2F8;",
    "        background-color: #1F618D;",
    "    }",
    "",
    "    input.scheme-purple, .scheme-purple {",
    "        border-color: #6C3483;",
    "        color: #6C3483;",
    "        background-color: #E8DAEF;",
    "    }",
    "",
    "    input.scheme-purpleinv, .scheme-purpleinv {",
    "        border-color: #6C3483;",
    "        color: #E8DAEF;",
    "        background-color: #6C3483;",
    "    }",
    "",
    "    input.scheme-red, .scheme-red {",
    "        border-color: #DD2000;",
    "        color: #DD2000;",
    "        background-color: #FDEDEC;",
    "    }",
    "",
    "    input.scheme-redinv, .scheme-redinv {",
    "        border-color: #DD2000;",
    "        color: #FDEDEC;",
    "        background-color: #DD2000;",
    "    }",
    "",
    "    input.actionable {",
    "        font-family: Helvetica, sans-serif;",
    "        font-weight: bold;",
    "        font-size: 12px !important;",
    "        background-color: #E8E8E8;",
    "        color: #000000 !important;",
    "        text-align: center;",
    "        border-color: #000000;",
    "        border-style: groove;",
    "        border: groove 2px;",
    "    }",
    "",
    "    input.mtrx-actionable {",
    "        font-family: Helvetica, sans-serif;",
    "        font-weight: bold;",
    "        font-size: 12px !important;",
    "        text-align: center;",
    "        border-color: #000000;",
    "        border-style: groove;",
    "        border: groove 2px;",
    "    }",
    "",
    "    input.txactionable {",
    "        font-weight: bold !important;",
    "        font-size: 9px !important;",
    "        color: #EEEEEE !important;",
    "        text-align: center !important;",
    "        border: solid 1px;",
    "        border-color: #000000;",
    "",
    "    }",
    "",
    "    input.txactionable-gr {",
    "        color: #000000 !important;",
    "        border-color: #000000 !important;",
    "        background-color: #E0E0E0 !important;",
    "        opacity: 1.0 !important;",
    "    }",
    "",
    "    input.nodialog {",
    "        /*color: #260c0c !important;*/",
    "        border-color: #d7c2c2 !important;",
    "    }",
    "",
    "    input.action-confirming {",
    "        background-image: linear-gradient(to right, #E0E0E0, #E0E0E0);",
    "        background-color: unset;",
    "        color: #000000;",
    "    }",
    "",
    "    input.action-confirmed {",
    "        background-image: unset;",
    "        background-color: #E0C0C0;",
    "        color: #000000 !important;",
    "    }",
    "",
    "    .busy {",
    "        filter: blur(1px);",
    "        opacity: 0.5;",
    "        cursor: progress !important;",
    "    }",
    "",
    "    input.clickable {",
    "        cursor: pointer !important;",
    "    }",
    "",
    "    td.clickable {",
    "        cursor: pointer !important;",
    "    }",
    "",
    "",
    "    .blinktext {",
    "        animation: softBlinkText 0.5s infinite;",
    "    }",
    "",
    "    @keyframes softBlinkText {",
    "        0% { color: #ffffff; }",
    "        90% { color: #ffcccc; }",
    "        100% { color: #ff0000; }",
    "    }",
    "",
    "    /* Modal Styling */",
    "    .modalprompt {",
    "        display: none;",
    "        position: fixed;",
    "        top: 0;",
    "        left: 0;",
    "        width: 100%;",
    "        height: 100%;",
    "        background-color: rgba(0, 0, 0, 0.5);",
    "        justify-content: center;",
    "        align-items: center;",
    "        z-index: 1000;",
    "    }",
    "",
    "    .modalprompt-content {",
    "        display: flex;",
    "        flex-direction: column;",
    "        gap: 10px;",
    "        background-color: #F1F1F1;",
    "        padding: 20px;",
    "        border-radius: 5px;",
    "        border: solid 1px;",
    "        border-color: #444444;",
    "        width: 435px;",
    "        text-align: center;",
    "    }",
    "",
    "    .modalprompt-content input {",
    "        width: 100%;",
    "        padding: 8px;",
    "        margin: 10px 0;",
    "    }",
    "",
    "    .modalprompt-content button {",
    "        display: inline-flex;",
    "        justify-content: center;",
    "        align-items: center;",
    "        height: 25px;",
    "        width: 80px;",
    "        padding: 0 16px;",
    "        box-sizing: border-box;",
    "        line-height: 1;",
    "        font-size: 14px;",
    "        border: groove 2px;",
    "        cursor: pointer;",
    "        background-color: #DCDCDC;",
    "    }",
    "",
    "    /* Wrapper for buttons to place them side by side */",
    "    .modalprompt-content .modalprompt-buttons {",
    "        display: flex; /* Flexbox to arrange buttons horizontally */",
    "        flex-direction: row; /* Side by side */",
    "        justify-content: center; /* Center buttons in the container */",
    "        gap: 10px; /* Space between buttons */",
    "    }",
    "",
    "    #modalprompt-ok:hover, #modalprompt-cancel:hover {",
    "        border: solid 1px;",
    "    }",
    "",
    "    #modalprompt-ok:active, #modalprompt-cancel:active {",
    "        transform: translate(1px, 1px);",
    "        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);",
    "    }",
    "",
    "    #modalprompt-title {",
    "        display: flex;",
    "        margin-top: -10px;",
    "        background: #444444;",
    "        color: #F1F1F1;",
    "        justify-content: center;",
    "        align-items: center;",
    "        height: 30px;",
    "        border-radius: 5px;",
    "        font-size: 18px;",
    "        font-weight: bold;",
    "    }",
    "",
    "    #modalprompt-message {",
    "        display: flex;",
    "        margin-top: 30px;",
    "        margin-bottom: 30px;",
    "        justify-content: center;",
    "        align-items: center;",
    "        text-align: center;",
    "        font-family: Consolas, Menlo, courier;",
    "        font-size: 16px;",
    "        font-weight: normal;",
    "        white-space: pre-wrap;",
    "    }",
    "",
    "    #modalprompt-inputlabel {",
    "        display: flex;",
    "        margin-top: 0px;",
    "        margin-bottom: 0px;",
    "        justify-content: left;",
    "        align-items: center;",
    "        font-size: 16px;",
    "        font-weight: normal;",
    "    }",
    "",
    "    #modalprompt-input {",
    "        margin-top: 0px;",
    "        font-family: Consolas, Menlo, courier;",
    "        font-weight: bold;",
    "    }",
    "",
    "</style>",
    "",
    "<script>",
    "",
    "",
    "    async function showModal(title, message, inputlabel, dflt=null, isConfirm=false, isError=false) {",
    "        return new Promise((resolve) => {",
    "            // Modal elements",
    "            const modalPrompt = document.getElementById('modalprompt');",
    "            const modalTitle = document.getElementById('modalprompt-title');",
    "            const modalMessage = document.getElementById('modalprompt-message');",
    "            const modalInputLabel = document.getElementById('modalprompt-inputlabel');",
    "            const modalInput = document.getElementById('modalprompt-input');",
    "            const modalOk = document.getElementById('modalprompt-ok');",
    "            const modalCancel = document.getElementById('modalprompt-cancel');",
    "",
    "            modalTitle.textContent = title;",
    "            modalMessage.textContent = message;",
    "            modalMessage.style.fontWeight = isConfirm ? 'bold' : 'normal';",
    "",
    "            modalInputLabel.textContent = inputlabel != null ? inputlabel : '';",
    "            modalInput.style.display = (isConfirm || isError) ? 'none' : 'flex';",
    "            modalCancel.style.display = isError ? 'none' : 'flex';",
    "            modalPrompt.style.display = 'flex';",
    "",
    "            // Clear input and focus",
    "            modalInput.value = dflt != null ? dflt : '';",
    "",
    "            // Show modal after a microtask to ensure event loop clears",
    "            queueMicrotask(() => {",
    "                // Focus appropriate element",
    "                if (isConfirm || isError) {",
    "                    modalOk.focus(); // Focus OK button in confirm mode",
    "                } else {",
    "                    modalInput.focus(); // Focus input in input mode",
    "                }",
    "            });",
    "",
    "            // OK button handler",
    "            const okHandler = () => {",
    "                modalPrompt.style.display = 'none';",
    "                resolve((isConfirm || isError) ? true : modalInput.value);",
    "                cleanup();",
    "            };",
    "            modalOk.onclick = okHandler;",
    "",
    "            // Cancel button handler",
    "            const cancelHandler = () => {",
    "                modalPrompt.style.display = 'none';",
    "                resolve(false);",
    "                cleanup();",
    "            };",
    "            modalCancel.onclick = cancelHandler;",
    "",
    "            // Enter key handler for input mode",
    "            const enterKeyHandler = (e) => {",
    "                if (e.key === 'Enter' || e.keyCode === 13) {",
    "                    e.preventDefault(); // Prevent form submission or other defaults",
    "                    e.stopPropagation(); // Stop event from bubbling",
    "                    if (document.activeElement === modalInput || document.activeElement === modalOk) {",
    "                        okHandler(); // Trigger OK action",
    "                    }",
    "                    else if (document.activeElement === modalCancel) {",
    "                        cancelHandler();",
    "                    }",
    "                }",
    "            };",
    "            if (isConfirm || isError) {",
    "                modalPrompt.addEventListener('keydown', enterKeyHandler);",
    "            }",
    "            else {",
    "                modalInput.addEventListener('keydown', enterKeyHandler);",
    "            }",
    "",
    "            // Esc key handler (already in place)",
    "            const escHandler = (e) => {",
    "                if (e.key === 'Escape') {",
    "                    e.preventDefault();",
    "                    e.stopPropagation(); // Stop event from bubbling",
    "                    modalPrompt.style.display = 'none';",
    "                    resolve(false);",
    "                    cleanup();",
    "                }",
    "            };",
    "            document.addEventListener('keydown', escHandler);",
    "",
    "            // Cleanup event listeners",
    "            function cleanup() {",
    "                modalOk.onclick = null;",
    "                modalCancel.onclick = null;",
    "                if (isConfirm || isError) {",
    "                    modalPrompt.removeEventListener('keydown', enterKeyHandler);",
    "                }",
    "                else {",
    "                    modalInput.removeEventListener('keydown', enterKeyHandler);",
    "                }",
    "                document.removeEventListener('keydown', escHandler);",
    "            }",
    "        });",
    "    }",
    "",
    "    // getUserInput",
    "    function getUserInput(title, message, inputlabel, dflt, callback) {",
    "        showModal(title, message, inputlabel, dflt).then( (result) => callback(result) );",
    "    }",
    "",
    "    // getUserConfirm",
    "    function getUserConfirm(title, message, inputlabel, dflt, callback) {",
    "        showModal(title, message, inputlabel, dflt, true).then( (result) => callback(result) );",
    "    }",
    "",
    "    // showUserError",
    "    function showUserError(title, message, callback) {",
    "        showModal(title, message, null, null, false, true).then( (result) => callback(result) );",
    "    }",
    "",
    "",
    "",
    "",
    "    class StatusColor {",
    "",
    "        static update( elem, colorScheme ) {",
    "            let classList = elem.attr(\"class\").split(/\\s+/);",
    "            for (let i = classList.length - 1; i >= 0; i--) {",
    "                const name = classList[i];",
    "                if (name.startsWith('scheme-')) {",
    "                    elem.removeClass(name);",
    "                }",
    "            }",
    "            if (colorScheme != null) {",
    "                elem.addClass(\"scheme-\" + colorScheme);",
    "            }",
    "        }",
    "    }",
    "",
    "",
    "    class NodeStatus {",
    "        static OK           = Symbol(\"OK\");",
    "        static Busy         = Symbol(\"Busy\");",
    "        static SerialDiff   = Symbol(\"SerialDiff\");",
    "        static NoInput      = Symbol(\"NoInput\");",
    "        static ServiceOut   = Symbol(\"ServiceOut\");",
    "        static Sync         = Symbol(\"Sync\");",
    "        static Persist      = Symbol(\"Persist\");",
    "        static Down         = Symbol(\"Down\");",
    "        static Partial      = Symbol(\"Partial\");",
    "        static Inconsistent = Symbol(\"Inconsistent\");",
    "        static Degraded     = Symbol(\"Degraded\");",
    "        static Warning      = Symbol(\"Warning\");",
    "        static MemWarningLO = Symbol(\"MemWarningLO\");",
    "        static MemWarningHI = Symbol(\"MemWarningHI\");",
    "        static MemCritical  = Symbol(\"MemCritical\");",
    "        static Readonly     = Symbol(\"Readonly\");",
    "        static Initializing = Symbol(\"Initializing\");",
    "        static Unknown      = Symbol(\"Unknown\");",
    "",
    "        static warnings = new Set([",
    "            NodeStatus.SerialDiff,",
    "            NodeStatus.NoInput,",
    "            NodeStatus.ServiceOut,",
    "            NodeStatus.Down,",
    "            NodeStatus.Partial,",
    "            NodeStatus.Inconsistent,",
    "            NodeStatus.Degraded,",
    "            NodeStatus.Warning,",
    "            NodeStatus.MemWarningHI,",
    "            NodeStatus.MemCritical",
    "        ]);",
    "",
    "",
    "        static update(element, state, cache) {",
    "",
    "            switch (state) {",
    "            case NodeStatus.OK:",
    "                element.val( \"OK\" );",
    "                StatusColor.update( element, \"green\" );",
    "                break;",
    "            case NodeStatus.Busy:",
    "                element.val( \"Busy\" );",
    "                StatusColor.update( element, \"orange1\" );",
    "                break;",
    "            case NodeStatus.SerialDiff:",
    "                if (cache.sndiff < 1000) {",
    "                    element.val(\"S/N -\" + cache.sndiff);",
    "                    StatusColor.update(element, \"green\");",
    "                }",
    "                else {",
    "                    element.val(\"S/N\");",
    "                    StatusColor.update(element, \"orange2\");",
    "                }",
    "                break;",
    "            case NodeStatus.NoInput:",
    "                element.val( \"No Input\" );",
    "                StatusColor.update( element, \"orange2\" );",
    "                break;",
    "            case NodeStatus.ServiceOut:",
    "                element.val( \"S-OUT\" );",
    "                StatusColor.update( element, \"grayinv\" );",
    "                break;",
    "            case NodeStatus.Sync:",
    "                element.val( \"Sync \" + cache.sync_progress + \"%\" );",
    "                StatusColor.update( element, \"orange1\" );",
    "                break;",
    "            case NodeStatus.Persist:",
    "                element.val( \"Snapshot\" );",
    "                StatusColor.update( element, \"orange1\" );",
    "                break;",
    "            case NodeStatus.Down:",
    "                element.val( \"Down\" );",
    "                StatusColor.update( element, \"redinv\" );",
    "                break;",
    "            case NodeStatus.Partial:",
    "                element.val( \"Partial\" );",
    "                StatusColor.update( element, \"orange4\" );",
    "                break;",
    "            case NodeStatus.Inconsistent:",
    "                element.val( \"OK/Delta\" );",
    "                StatusColor.update( element, \"orange2\" );",
    "                break;",
    "            case NodeStatus.Degraded:",
    "                element.val( \"Degraded\" );",
    "                StatusColor.update( element, \"orange3\" );",
    "                break;",
    "            case NodeStatus.Warning:",
    "                element.val( \"Warning\" );",
    "                StatusColor.update( element, \"orange2\" );",
    "                break;",
    "            case NodeStatus.MemWarningLO:",
    "                element.val( \"Memory\" );",
    "                StatusColor.update( element, \"orange2\" );",
    "                break;",
    "            case NodeStatus.MemWarningHI:",
    "                {",
    "                const total_pct = (100 * (cache.mem_tot - cache.mem_avail) / cache.mem_tot).toFixed(0);",
    "                element.val( \"Mem \" + total_pct + \"%\" );",
    "                StatusColor.update( element, \"orange4\" );",
    "                }",
    "                break;",
    "            case NodeStatus.MemCritical:",
    "                {",
    "                const total_pct = (100 * (cache.mem_tot - cache.mem_avail) / cache.mem_tot).toFixed(0);",
    "                element.val( \"! MEM \" + total_pct + \"%\" );",
    "                StatusColor.update( element, \"orange6\" );",
    "                }",
    "                break;",
    "            case NodeStatus.Readonly:",
    "                element.val( \"Readonly\" );",
    "                StatusColor.update( element, \"purple\" );",
    "                break;",
    "            case NodeStatus.Initializing:",
    "                element.val( \"Init...\" );",
    "                StatusColor.update( element, \"black\" );",
    "                break;",
    "            case NodeStatus.Unknown:",
    "                element.val( \"...\" );",
    "                StatusColor.update( element, \"black\" );",
    "                break;",
    "            default:",
    "                element.val( \"???\" );",
    "                StatusColor.update( element, \"purple\" );",
    "            }",
    "        }",
    "",
    "        static isWarning(state) {",
    "            return NodeStatus.warnings.has(state);",
    "        }",
    "",
    "    }",
    "",
    "",
    "    class NodeType {",
    "        static Admin      = Symbol(\"Admin\");",
    "        static Builder    = Symbol(\"Builder\");",
    "        static TXProxy    = Symbol(\"TXProxy\");",
    "        static Search     = Symbol(\"Search\");",
    "        static Dispatch   = Symbol(\"Dispatch\");",
    "        static Generic    = Symbol(\"Generic\");",
    "        static Aggregate  = Symbol(\"Aggregate\");",
    "",
    "",
    "        static update(element, ntyp) {",
    "            element.addClass(\"disable-select\");",
    "            element.prop(\"disabled\", true);",
    "            element.css(\"text-align\", \"center\");",
    "",
    "            switch (ntyp) {",
    "            case NodeType.Admin:",
    "                element.val( \"Admin\" );",
    "                StatusColor.update( element, \"greeninv\" );",
    "                break;",
    "            case NodeType.Builder:",
    "                element.val( \"Builder\" );",
    "                StatusColor.update( element, \"purpleinv\" );",
    "                break;",
    "            case NodeType.TXProxy:",
    "                element.val( \"TXProxy\" );",
    "                StatusColor.update( element, \"purple\" );",
    "                break;",
    "            case NodeType.Search:",
    "                element.val( \"Search\" );",
    "                StatusColor.update( element, \"blueinv\" );",
    "                break;",
    "            case NodeType.Dispatch:",
    "                element.val( \"Dispatch\" );",
    "                StatusColor.update( element, \"blue\" );",
    "                break;",
    "            case NodeType.Generic:",
    "                element.val( \"Generic\" );",
    "                StatusColor.update( element, \"black\" );",
    "                break;",
    "            case NodeType.Aggregate:",
    "                element.val( \"Aggregate\" );",
    "                StatusColor.update( element, \"gray2\" );",
    "                break;",
    "            default:",
    "                element.val( \"?\" );",
    "            }",
    "        }",
    "",
    "",
    "        static hasTX(ntyp) {",
    "            switch (ntyp) {",
    "            case NodeType.Builder:",
    "            case NodeType.TXProxy:",
    "            case NodeType.Search:",
    "            case NodeType.Generic:",
    "                return true;",
    "            }",
    "            return false;",
    "        }",
    "",
    "",
    "        static hasData(ntyp) {",
    "            switch (ntyp) {",
    "            case NodeType.Builder:",
    "            case NodeType.TXProxy:",
    "            case NodeType.Search:",
    "            case NodeType.Generic:",
    "                return true;",
    "            }",
    "            return false;",
    "        }",
    "",
    "",
    "        static isSearch(ntyp) {",
    "            switch (ntyp) {",
    "            case NodeType.Search:",
    "            case NodeType.Dispatch:",
    "            case NodeType.Generic:",
    "                return true;",
    "            }",
    "            return false;",
    "        }",
    "",
    "",
    "    }",
    "",
    "",
    "",
    "    // The Page object",
    "    let page = null;",
    "",
    "    function showWelcomeInfo() {",
    "        const actionBypassToggle = \"to bypass dialog for state toggle operations\";",
    "        const actionBypassData = \"three times to bypass dialog for data transfer operations\";",
    "        const actionEdit = \"Edit instance ID in dialogs to perform multi-node operations (using '*')\";",
    "        const openNewWindow = \"to open link in new window\";",
    "        const openThisWindow = \"to open link in this window\";",
    "        const openNewTab = \"to open link in new tab\";",
    "",
    "        let shiftAltClick;",
    "        let ctrlClick;",
    "        if (window.navigator.platform.toLowerCase().includes(\"mac\")) {",
    "            shiftAltClick = \"Shift-Opt-click \";",
    "            ctrlClick = \"Cmd-click \";",
    "        }",
    "        else {",
    "            shiftAltClick = \"Shift-Alt-click \";",
    "            ctrlClick = \"Ctrl-click \";",
    "        }",
    "",
    "        const info =",
    "            \"Actions:\\n\" +",
    "            \"    * \" + shiftAltClick + actionBypassToggle + \"\\n\" +",
    "            \"    * \" + shiftAltClick + actionBypassData + \"\\n\" +",
    "            \"    * \" + actionEdit + \"\\n\" +",
    "            \"\\n\" +",
    "            \"Links:\\n\" +",
    "            \"    * \" + \"Click \" + openNewWindow + \"\\n\" +",
    "            \"    * \" + \"Shift-click \" + openThisWindow + \"\\n\" +",
    "            \"    * \" + ctrlClick + openNewTab + \"\\n\";",
    "",
    "        $('#descriptorSysinfoArea').removeClass( \"hidearea\" );",
    "        $('#recentAction').val(info);",
    "        $('#recentAction').css(\"visibility\", \"visible\");",
    "",
    "    }",
    "",
    "",
    "",
    "    function showActionButtons() {",
    "        page.pause();",
    "        $('.nodeRow').each(function (i) {",
    "            let row = $(this);",
    "            if (row.data('up') == true) {",
    "                // Matrix",
    "                let mtrxElem = row.find('.nodemtrx input');",
    "                let s_in = mtrxElem.data('s_in');",
    "                if (s_in != null) {",
    "                    mtrxElem.addClass('actionable');",
    "                    mtrxElem.data('s_in_txt', mtrxElem.val());",
    "                    if (s_in) {",
    "                        mtrxElem.val(\"S-OUT\");",
    "                    }",
    "                    else {",
    "                        mtrxElem.val(\"S-IN\");",
    "                    }",
    "                }",
    "                // Rate",
    "                let rateElem = row.find('.noderate input');",
    "                if (rateElem.data('rate') != null) {",
    "                    rateElem.addClass('actionable');",
    "                    rateElem.val(\"\\u{21BB} Restart\");",
    "                }",
    "                // Memory",
    "                let mmryElem = row.find('.nodemmry');",
    "                let mprcElem = row.find('.nodemprc');",
    "                let mtotElem = row.find('.nodemtot');",
    "                mmryElem.data(\"rmmry\", mmryElem.val());",
    "                mmryElem.addClass('actionable');",
    "                mmryElem.removeClass('nodebars');",
    "                mmryElem.parent().addClass('nodecell nodevalu');",
    "                mmryElem.data(\"max-width\", mmryElem.css(\"max-width\"));",
    "                mmryElem.css(\"max-width\", \"97px\");",
    "                mmryElem.val(\"Snapshot\");",
    "                mprcElem.data(\"rmprc\", mprcElem.val());",
    "                mprcElem.val(\"\\u{2026}\");",
    "                mtotElem.data(\"rmtot\", mtotElem.val());",
    "                mtotElem.val(\"\\u{2026}\");",
    "                mtotElem.css(\"visibility\", \"hidden\");",
    "                // Order",
    "                let ordrElem = row.find('.nodeordr input');",
    "                if (ordrElem.data('order') != null && ordrElem.data('subs') == true) {",
    "                    ordrElem.addClass('actionable');",
    "                    ordrElem.val(\"\\u{25C0}\\u{25C0} RevSync\");",
    "                }",
    "                // Size",
    "                let sizeElem = row.find('.nodesize input');",
    "                if (sizeElem.data('size') != null && sizeElem.data('subs') == true) {",
    "                    sizeElem.addClass('actionable');",
    "                    sizeElem.val(\"FwdSync \\u{25B6}\\u{25B6}\");",
    "                }",
    "                // TX",
    "                let txElem = row.find('.nodetx');",
    "                txElem.each(function (i) {",
    "                    let e = $(this);",
    "                    if (e.attr('id') != null) {",
    "                        e.addClass('txactionable');",
    "                        let tx = e.val();",
    "                        e.data('tx', tx);",
    "                        switch (e.data('txtype')) {",
    "                            case \"subs\":",
    "                                if (tx == \"\") {",
    "                                    //e.val(\"\\u{25EF}\");",
    "                                    e.val(\"\\u{25B6}\");",
    "                                    e.addClass('txactionable-gr');",
    "                                }",
    "                                else {",
    "                                    e.val(\"\\u{2573}\");",
    "                                }",
    "                                break;",
    "                            case \"out\":",
    "                            case \"in\":",
    "                                if (tx != \"\") {",
    "                                    if (e.data('tx').includes(\"\\u{258D}\")) {",
    "                                        e.val(\"\\u{25BA}\");",
    "                                    }",
    "                                    else {",
    "                                        e.val(\"\\u{258D}\\u{258D}\");",
    "                                    }",
    "                                }",
    "                                break;",
    "                            case \"lag\":",
    "                                if (tx != \"\") {",
    "                                    e.val(\"\\u{23CF}\");",
    "                                }",
    "                                break;",
    "                        }",
    "                    }",
    "                });",
    "                // Digest",
    "                let dgstSpan = row.find('.digest');",
    "                if (dgstSpan.data('digest') != null && dgstSpan.data('subs') == true) {",
    "                    let width = dgstSpan.width()-5;",
    "                    dgstSpan.html('<input class=\"disable_select actionable\" type=\"text\" disabled>');",
    "                    let elem = dgstSpan.children(\"input\");",
    "                    elem.val(\"Repair\");",
    "                    elem.css(\"width\", width + \"px\");",
    "                    //elem.css(\"height\", 1+height + \"px\");",
    "                    dgstSpan.addClass('nodecell nodevalu');",
    "                    dgstSpan.off(\"mousedown\");",
    "                    dgstSpan.off(\"mouseup\");",
    "                    dgstSpan.on(\"mousedown\", function (eventObj) {",
    "                        this.addClass(\"mousedown\");",
    "                    }.bind(elem));",
    "                    dgstSpan.on(\"mouseup\", function (eventObj) {",
    "                        this.removeClass(\"mousedown\");",
    "                    }.bind(elem));",
    "                }",
    "                // S/N",
    "                let mserElem = row.find(\".nodemser input\");",
    "                if (mserElem.data('serial') != null && mserElem.data('subs') == true) {",
    "                    mserElem.addClass('actionable');",
    "                    mserElem.parent().addClass('nodevalu');",
    "                    mserElem.val(\"Rolling Update\");",
    "                }",
    "            }",
    "        });",
    "    }",
    "",
    "",
    "",
    "    function hideActionButtons() {",
    "        repeatedActionCounter = 0;",
    "        $('.nodialog').removeClass(\"nodialog\");",
    "        $('.nodeRow').each(function (i) {",
    "            let row = $(this);",
    "            row.find('input').css('background-image', '');",
    "            clearActionButtonConfirming();",
    "            // Matrix",
    "            let mtrxElem = row.find('.nodemtrx input');",
    "            mtrxElem.removeClass('actionable');",
    "            let s_in_txt = mtrxElem.data('s_in_txt');",
    "            if (s_in_txt != null) {",
    "                mtrxElem.val(s_in_txt);",
    "            }",
    "            // Rate",
    "            let rateElem = row.find('.noderate input');",
    "            rateElem.removeClass('actionable');",
    "            let rate = rateElem.data('rate');",
    "            if (rate != null) {",
    "                if (mtrxElem.data('s_in') == true) {",
    "                    rateElem.val(rate.toFixed(1));",
    "                }",
    "                else {",
    "                    rateElem.val(\"-.-\");",
    "                }",
    "            }",
    "            // Memory",
    "            let mmryElem = row.find('.nodemmry');",
    "            let mprcElem = row.find('.nodemprc');",
    "            let mtotElem = row.find('.nodemtot');",
    "            mmryElem.removeClass('actionable');",
    "            mmryElem.css(\"max-width\", mmryElem.data(\"max-width\"));",
    "            mmryElem.addClass('nodebars');",
    "            mprcElem.removeClass('txactionable');",
    "            mtotElem.removeClass('txactionable');",
    "            mmryElem.parent().removeClass('nodecell nodevalu');",
    "            let rmmry = mmryElem.data('rmmry');",
    "            if (rmmry != null) {",
    "                mmryElem.val(rmmry);",
    "            }",
    "            let rmprc = mprcElem.data('rmprc');",
    "            if (rmprc != null) {",
    "                mprcElem.val(rmprc);",
    "            }",
    "            let rmtot = mtotElem.data('rmtot');",
    "            if (rmtot != null) {",
    "                mtotElem.val(rmtot);",
    "                mtotElem.css(\"visibility\", \"visible\");",
    "            }",
    "            // Order",
    "            let ordrElem = row.find('.nodeordr input');",
    "            ordrElem.removeClass('actionable');",
    "            let order = ordrElem.data('order');",
    "            if (order != null) {",
    "                ordrElem.val(order.toLocaleString(\"en-US\"));",
    "            }",
    "            // Size",
    "            let sizeElem = row.find('.nodesize input');",
    "            sizeElem.removeClass('actionable');",
    "            let size = sizeElem.data('size');",
    "            if (size != null) {",
    "                sizeElem.val(size.toLocaleString(\"en-US\"));",
    "            }",
    "            // TX",
    "            let txElem = row.find('.nodetx');",
    "            txElem.removeClass('txactionable txactionable-gr');",
    "            txElem.each(function (i) {",
    "                let e = $(this);",
    "                if (e.data('tx') != null) {",
    "                    e.val(e.data('tx'));",
    "                }",
    "            });",
    "            // Digest",
    "            let dgstSpan = row.find('.digest');",
    "            let digest = dgstSpan.data('digest');",
    "            let elem = dgstSpan.children(\"input\");",
    "            elem.removeClass('actionable');",
    "            if (digest != null) {",
    "                new Digest(dgstSpan).update(digest);",
    "            }",
    "            // S/N",
    "            let mserElem = row.find('.nodemser input');",
    "            let serial = mserElem.data('serial');",
    "            if (serial != null) {",
    "                mserElem.removeClass('actionable');",
    "                mserElem.parent().removeClass('nodevalu');",
    "                mserElem.val(serial);",
    "            }",
    "        });",
    "        page.resume();",
    "    }",
    "",
    "",
    "",
    "    function bypassDialog() {",
    "        let a = $('.actionable');",
    "        a.addClass('nodialog');",
    "    }",
    "",
    "",
    "",
    "    function requireDialog() {",
    "        $('.nodialog').removeClass(\"nodialog\");",
    "    }",
    "",
    "",
    "",
    "",
    "    function clearActionButtonConfirming() {",
    "        $('.action-confirmed').each(function (i) {",
    "            $(this).removeClass(\"action-confirmed\");",
    "        });",
    "        $('.action-confirming').each(function (i) {",
    "            $(this).removeClass(\"action-confirming\");",
    "        });",
    "    }",
    "",
    "",
    "    function clearActionIndicators() {",
    "        $('#recentAction').removeClass(\"softblink\");",
    "        $('#mainBody').removeClass(\"busy\");",
    "        clearActionButtonConfirming();",
    "        hideActionButtons();",
    "    }",
    "",
    "",
    "    function parseIdSpec(idSpec) {",
    "        let idSpecClean = idSpec.replace(/\\s*,\\s*/g, \",\");",
    "        idSpecClean = idSpecClean.replace(/\\s+/g, \",\");",
    "        let idSpecList = [...new Set(idSpecClean.split(\",\"))];",
    "        idSpecClean = idSpecList.join(\",\");",
    "        const m = idSpecClean.match(/\\*/g);",
    "        if (m !== null && m.length > 1) {",
    "            throw \"Invalid instance name(s)\";",
    "        }",
    "        return idSpecClean;",
    "    }",
    "",
    "",
    "    function execVGXAdmin(vgxadmin) {",
    "        $('#recentAction').val(\"Performing:\\n\\n\" + vgxadmin + \"\\n...\");",
    "        $('#recentAction').addClass(\"softblink\");",
    "        $('#mainBody').addClass(\"busy\");",
    "        $.get(\"/vgx/builtin/ADMIN_GetAuthToken\", function (data, textStatus, jqXHR) {",
    "            const authToken = data[\"response\"][\"authtoken\"];",
    "            let url = \"/vgx/builtin/ADMIN_Console?graph=_system&authtoken=\" + authToken;",
    "            $.post(url, vgxadmin, function (data, textStatus, jqXHR) {",
    "                try {",
    "                    const responseRaw = data[\"response\"];",
    "                    if (responseRaw != null) {",
    "                        const resultArray = responseRaw[\"result\"];",
    "                        if (resultArray == null) {",
    "                            throw \"\" + responseRaw;",
    "                        }",
    "                        else if (!Array.isArray(resultArray)) {",
    "                            throw \"\" + resultArray;",
    "                        }",
    "                        const resultOutput = resultArray.slice(1);",
    "                        let results = [];",
    "                        for (const output of resultOutput) {",
    "                            let item = null;",
    "                            if (typeof output === 'string') {",
    "                                item = output;",
    "                            }",
    "                            else {",
    "                                let instance = output[0].split(\" \")[0];",
    "                                let performed = output[1];",
    "                                let action = null;",
    "                                if (performed == null) {",
    "                                    action = \"No Action\";",
    "                                }",
    "                                else if (typeof performed === 'object' && \"action\" in performed) {",
    "                                    action = performed[\"action\"];",
    "                                }",
    "                                else if (typeof performed === 'object') {",
    "                                    action = Object.keys(performed).join(\", \");",
    "                                }",
    "                                else if (performed) {",
    "                                    action = JSON.stringify(performed, null, 4);",
    "                                }",
    "                                item = instance + \": \" + action;",
    "                            }",
    "                            results.push(item);",
    "                        }",
    "                        results.sort();",
    "                        let result = \"\";",
    "                        for (const item of results) {",
    "                            result = result + item + \"\\n\";",
    "                        }",
    "                        const recent = \"Last Action:\\n\" + vgxadmin + \"\\n\\nResult:\\n\" + result;",
    "                        $('#recentAction').val(recent);",
    "                    }",
    "                    else {",
    "                        const messageRaw = data[\"message\"];",
    "                        if (messageRaw != null) {",
    "                            const message = JSON.stringify(messageRaw, null, 4);",
    "                            $('#recentAction').val(message);",
    "                        }",
    "                        else {",
    "                            $('#recentAction').val(\"\" + data);",
    "                        }",
    "                    }",
    "                }",
    "                catch (error) {",
    "                    $('#recentAction').val(\"ERROR: \" + error);",
    "                }",
    "                finally {",
    "                    clearActionIndicators();",
    "                }",
    "            }, \"json\").fail(function (xhr, txt, err) {",
    "                $('#recentAction').val(xhr[\"responseText\"] + \" | \" + txt + \" | \" + err);",
    "                clearActionIndicators();",
    "            });",
    "        }).fail(function (xhr, txt, err) {",
    "            $('#recentAction').val(xhr[\"responseText\"] + \" | \" + txt + \" | \" + err);",
    "            clearActionIndicators();",
    "        });",
    "",
    "    }",
    "",
    "",
    "    function performVGXAdmin(command, idSpec, commandExt = null) {",
    "        let vgxadmin = \"vgxadmin\";",
    "        if (typeof command === 'string') {",
    "            vgxadmin += \" \" + command + \" \" + idSpec;",
    "        }",
    "        else {",
    "            for (let subcmd of command) {",
    "                vgxadmin += \" \" + subcmd + \" \" + idSpec;",
    "            }",
    "        }",
    "        if (commandExt != null) {",
    "            vgxadmin = vgxadmin + commandExt;",
    "        }",
    "        if (idSpec.includes(\"--\")) {",
    "            $('#recentAction').val(\"Illegal action: \" + vgxadmin);",
    "            return;",
    "        }",
    "",
    "        if (idSpec.includes(\"*\")) {",
    "            getUserConfirm(\"Perform MULTI-NODE command\", vgxadmin, null, null, (answer) => {",
    "                if (answer == true) {",
    "                    execVGXAdmin(vgxadmin);",
    "                }",
    "            });",
    "        }",
    "        else {",
    "            execVGXAdmin(vgxadmin);",
    "        }",
    "",
    "    }",
    "",
    "",
    "    function reallyMeanIt(eventObj) {",
    "        return eventObj.shiftKey && eventObj.altKey;",
    "    }",
    "",
    "",
    "    function transitionState(idSpec, command, current, next, title, noConfirm) {",
    "        let idSpecAnswer = idSpec;",
    "        if (!noConfirm) {",
    "            const transition = \"[\" + current + \"] \\u2794 [\" + next + \"]\";",
    "            const message = \"\" + transition;",
    "            getUserInput(title, message, 'Specify instance(s)', idSpec, (idSpecAnswer) => {",
    "                if (idSpecAnswer) {",
    "                    try {",
    "                        const idSpecClean = parseIdSpec(idSpecAnswer);",
    "                        const confirmMessage = idSpecClean + \" \\u2794 [\" + next + \"]\";",
    "                        getUserConfirm(title, confirmMessage, null, null, (answer) => {",
    "                            if (answer == true) {",
    "                                performVGXAdmin( command, idSpecClean );",
    "                            }",
    "                        });",
    "                    }",
    "                    catch(error) {",
    "                        showUserError(title, \"\"+error, () => {",
    "                        });",
    "                    }",
    "                }",
    "            });",
    "",
    "        }",
    "        else {",
    "            performVGXAdmin( command, idSpecAnswer );",
    "        }",
    "    }",
    "",
    "",
    "    let lastAction = null;",
    "    let repeatedActionCounter = 0;",
    "",
    "    function performOperation(target, idSpec, command, title, commandExt = null, message = null, confirmKey = null, noConfirm = false, repeatToConfirm = 0) {",
    "        let idSpecAnswer = idSpec;",
    "        if (!noConfirm) {",
    "            if (message == null) {",
    "                message = \"\";",
    "            }",
    "            message += \"\\n\\n\";",
    "",
    "            getUserInput(title, message, 'Specify instance(s)', idSpec, (idSpecAnswer) => {",
    "                if (idSpecAnswer) {",
    "                    const idSpecClean = parseIdSpec(idSpecAnswer);",
    "                    let question = idSpecClean + \" \" + \"\\n\\n\" + message;",
    "                    let answer = false;",
    "                    if (confirmKey == null) {",
    "                        question = question + \"Are You Sure ?\";",
    "                        getUserConfirm(title, question, null, null, (answer) => {",
    "                            if (answer == true) {",
    "                                performVGXAdmin( command, idSpecClean, commandExt );",
    "                            }",
    "                        });",
    "",
    "                    }",
    "                    else {",
    "                        const howToConfirm = \"Enter '\" + confirmKey + \"' to proceed\";",
    "                        getUserInput(title, question, howToConfirm, null, (value) => {",
    "                            if (value == confirmKey) {",
    "                                performVGXAdmin( command, idSpecClean, commandExt );",
    "                            }",
    "                        });",
    "                    }",
    "                }",
    "            });",
    "        }",
    "        else {",
    "            let actionIdent = \"\";",
    "            if (typeof command === 'string') {",
    "                actionIdent += command;",
    "            }",
    "            else {",
    "                actionIdent += command.join(\"--\");",
    "            }",
    "            actionIdent += \"__\" + idSpecAnswer + \"__\" + (commandExt != null ? commandExt : \"\");",
    "            if (actionIdent == lastAction) {",
    "                repeatedActionCounter += 1;",
    "            }",
    "            else {",
    "                repeatedActionCounter = 1;",
    "                lastAction = actionIdent;",
    "            }",
    "            let inputs = target.getElementsByTagName('input');",
    "            for (let elem of inputs) {",
    "                //elem.style.background = \"rgb(255,\" + n + \",\" + n + \")\";",
    "                let remain = repeatToConfirm - repeatedActionCounter;",
    "                if (remain > 0) {",
    "                    elem.classList.remove('action-confirmed');",
    "                    elem.classList.add('action-confirming');",
    "                    let pink = \"#E0C0C0\";",
    "                    let pivots = [];",
    "                    for (let i = 0; i < repeatToConfirm; i++) {",
    "                        pivots.push(pink);",
    "                    }",
    "                    for (let i = pivots.length-1; i >= repeatedActionCounter ; i--) {",
    "                        pivots[i] = \"#E0E0E0\";",
    "                    }",
    "                    pivots.join(\",\");",
    "                    elem.style.backgroundImage = \"linear-gradient(to right, \" + pivots + \")\";",
    "                }",
    "                else {",
    "                    elem.style.backgroundImage = \"\";",
    "                    elem.classList.remove('action-confirming');",
    "                    elem.classList.add('action-confirmed');",
    "                }",
    "            }",
    "            if (repeatedActionCounter < repeatToConfirm) {",
    "                return;",
    "            }",
    "            repeatedActionCounter = 0;",
    "            lastAction = null;",
    "            performVGXAdmin( command, idSpecAnswer, commandExt );",
    "        }",
    "    }",
    "",
    "",
    "    class Nodes {",
    "",
    "        // Thresholds",
    "        static memoryLowThreshold = 0.8;",
    "        static memoryHighThreshold = 0.83;",
    "        static memoryCriticalThreshold = 0.9;",
    "",
    "        static simulateBars = false;",
    "",
    "        lastRender = null;",
    "        pageDown = true;",
    "",
    "        nodeCache = {};",
    "",
    "        frozen = false;",
    "",
    "        idLabelSize = 2;",
    "",
    "        currentGroupInstances = [];",
    "        currentGroup = -1.0;",
    "        currentGroupTitle = null;",
    "        prevGroup = -1.0;",
    "        builderOrders = [];",
    "        builderSizes = [];",
    "        builderProperties = [];",
    "        builderVectors = [];",
    "        builderPartitions = 0;",
    "        totalInstances = 0;",
    "        uniqueHosts = [];",
    "        totalConsumedMemory = 0;",
    "        totalPhysicalMemory = 0;",
    "        systemStatus = \"\";",
    "",
    "        static noDigest = \"0\".repeat(32);",
    "",
    "        static simLog = {};",
    "        static simLinear = {};",
    "",
    "        static maxSerialLag = 1 << 14;",
    "",
    "        static simulateLogBars( N ) {",
    "            if (Nodes.simLog[N] == null) {",
    "                Nodes.simLog[N] = {",
    "                    \"last\": 0,",
    "                    \"dir\": 1",
    "                };",
    "            }",
    "            let sim = Nodes.simLog[N];",
    "            sim.last += sim.dir;",
    "            if (sim.last >= N) {",
    "                sim.dir = -1;",
    "            }",
    "            else if (sim.last <= 0) {",
    "                sim.dir = 1;",
    "            }",
    "            return sim.last;",
    "        }",
    "",
    "",
    "        static simulateLinearBars( N ) {",
    "            if (Nodes.simLinear[N] == null) {",
    "                Nodes.simLinear[N] = {",
    "                    \"last\": 0,",
    "                    \"dir\": 1",
    "                };",
    "            }",
    "            let sim = Nodes.simLinear[N];",
    "            sim.last += sim.dir;",
    "            if (sim.last >= N) {",
    "                sim.dir = -1;",
    "            }",
    "            else if (sim.last <= 0) {",
    "                sim.dir = 1;",
    "            }",
    "            return sim.last;",
    "        }",
    "",
    "",
    "        constructor() {",
    "            this.refreshSoon = true;",
    "            this.objCount = 0;",
    "        }",
    "",
    "",
    "        setTitleLink( elem, host, httpPort, page, descr = \"\" ) {",
    "            elem.off(\"click\");",
    "            if (httpPort != null && httpPort > 0) {",
    "                const path = page ? \"/\" + page : \"\";",
    "                const uri = \"http://\" + host + \":\" + httpPort + path;",
    "                elem.prop( \"title\", \"\" + descr + \"\\n\" + uri );",
    "                elem.addClass('clickable');",
    "                elem.off(\"click\");",
    "                elem.on(\"click\", function(eventObj) {",
    "                    if( eventObj.shiftKey ) {",
    "                        window.open( uri, \"_parent\" );",
    "                    }",
    "                    else {",
    "                        window.open( uri, \"_blank\", \"height=850, width=925\" );",
    "                    }",
    "                }.bind(this));",
    "            }",
    "            else {",
    "                elem.removeProp(\"title\");",
    "                elem.removeClass('clickable');",
    "            }",
    "        }",
    "",
    "",
    "        setAction( actionElem, visualElem, title, callback, cache ) {",
    "            actionElem.off(\"click\");",
    "            actionElem.off(\"mousedown\");",
    "            actionElem.off(\"mouseup\");",
    "            if (title != null) {",
    "                actionElem.prop(\"title\", title);",
    "            }",
    "            else {",
    "                actionElem.removeProp(\"title\");",
    "            }",
    "            if (callback != null) {",
    "                actionElem.addClass('clickable');",
    "                //actionElem.css(\"cursor\", \"pointer\");",
    "                actionElem.off(\"click\");",
    "                actionElem.off(\"mousedown\");",
    "                actionElem.off(\"mouseup\");",
    "                actionElem.on(\"click\", callback.bind(cache));",
    "                actionElem.on(\"mousedown\", function (eventObj) {",
    "                    this.addClass(\"mousedown\");",
    "                }.bind(visualElem));",
    "                actionElem.on(\"mouseup\", function (eventObj) {",
    "                    this.removeClass(\"mousedown\");",
    "                }.bind(visualElem));",
    "            }",
    "            else {",
    "                actionElem.css(\"cursor\", \"default\");",
    "            }",
    "        }",
    "",
    "",
    "        getRGB_0_12( value ) {",
    "            const n = Math.max(0, Math.min(12, value));",
    "            let red, green, blue = 0; // Blue is always 0 for green-orange-red transition",
    "            const pivot = 10;",
    "            if (n <= pivot) {",
    "                red = Math.round((n / pivot) * 180); // Red: 0 to 180",
    "                if (n <= 8) {",
    "                    green = 230;",
    "                }",
    "                // 0 to pivot: Green (0, 230, 0) to less green (180, 220, 0)",
    "                else {",
    "                    green = Math.round(230 - (n / pivot) * (230 - 220)); // Green: 230 to 220",
    "                }",
    "            } else {",
    "                // pivot to 12: Orange (255, 165, 0) to Red (255, 0, 0)",
    "                red = 255; // Red stays 255",
    "                green = Math.round(165 - ((n - pivot) / 3) * 165); // Green: 165 to 0",
    "            }",
    "            let rgb = \"rgb(\" + red + \",\" + green + \",\" + blue + \")\";",
    "            return rgb;",
    "        }",
    "",
    "",
    "        getLogBars(rate, maxBars, simulate=false) {",
    "            const x = 126976684; // rate -> 12",
    "            const a = maxBars / 12;",
    "            let n;",
    "            if (!simulate) {",
    "                n = Math.round( a * Math.log2(1 + (rate)/1024 ) / 1.41 );",
    "                if (n<1) {",
    "                    n = 1;",
    "                }",
    "                else if (n > maxBars) {",
    "                    n = maxBars;",
    "                }",
    "            }",
    "            else {",
    "                n = Nodes.simulateLogBars(maxBars);",
    "            }",
    "            let bars = \"|\".repeat(n);",
    "            return bars;",
    "        }",
    "",
    "",
    "        renderLogBars( rateElem, maxBars, rate ) {",
    "            let mult = 1;",
    "            if (rateElem.css(\"letter-spacing\") == \"-2px\") {",
    "                mult = 3;",
    "                maxBars = Math.round( maxBars * mult );",
    "            }",
    "",
    "            if (rateElem == null) {",
    "                return false;",
    "            }",
    "            if (rate == null) {",
    "                rateElem.css(\"opacity\", \"0.2\");",
    "                rateElem.val(\"\");",
    "                return false;",
    "            }",
    "            else if (rate < 0) {",
    "                StatusColor.update(rateElem, \"blueinv\");",
    "                rateElem.css(\"opacity\", \"0.5\");",
    "                rateElem.css(\"text-align\", \"center\");",
    "                const pause = \"\\u{258D}\\u{258D}\";",
    "                rateElem.val( pause );",
    "                return true;",
    "            }",
    "            else {",
    "                let bars = this.getLogBars(rate, maxBars, Nodes.simulateBars);",
    "                let rgb = \"rgb(66,176,243)\";",
    "                if (rate > 256 || Nodes.simulateBars) {",
    "                    const n = Math.round(12 * bars.length / maxBars);",
    "                    rgb = this.getRGB_0_12(n);",
    "                }",
    "                rateElem.css(\"color\", rgb);",
    "                rateElem.val(bars);",
    "                return true;",
    "            }",
    "        }",
    "",
    "",
    "        getLinearBars( maxBars, value, maxValue, simulate=false ) {",
    "            if (value != null && maxValue != null) {",
    "                let n;",
    "                if (!simulate) {",
    "                    n = Math.round( maxBars * value / maxValue );",
    "                    if (n>maxBars) {",
    "                        n = maxBars;",
    "                    }",
    "                    else if (n<1) {",
    "                        n = 1;",
    "                    }",
    "                }",
    "                else {",
    "                    n = Nodes.simulateLinearBars(maxBars);",
    "                }",
    "                let bars = \"|\".repeat(n);",
    "                return bars;",
    "            }",
    "            else {",
    "                return \"\";",
    "            }",
    "        }",
    "",
    "",
    "        renderLinearBars(valueElem, maxBars, value, maxValue, right=false, color=null) {",
    "            if (valueElem.css(\"letter-spacing\") == \"-2px\") {",
    "                maxBars = Math.round( maxBars * 3 );",
    "            }",
    "",
    "            /*if (Math.random() > 0.5) {",
    "                if (Math.random() > 0.5) {",
    "                    value = maxValue;",
    "                }",
    "                else {",
    "                    value = maxValue/2;",
    "                }",
    "            }*/",
    "",
    "            if (valueElem == null) {",
    "                return false;",
    "            }",
    "            if (maxBars == null || value == null) {",
    "                valueElem.css(\"opacity\", \"0.2\");",
    "                valueElem.val(\"\");",
    "                return false;",
    "            }",
    "            else {",
    "                let bars = this.getLinearBars(maxBars, value, maxValue, Nodes.simulateBars);",
    "                let rgb = \"rgb(66,176,243)\";",
    "                if ((value > 0 && color == null) || Nodes.simulateBars) {",
    "                    let n = Math.round(12 * bars.length / maxBars);",
    "                    rgb = this.getRGB_0_12(n);",
    "                }",
    "                else if (value > 0) {",
    "                    rgb = color;",
    "                }",
    "                else {",
    "                    bars = \"|\";",
    "                    rgb = \"rgb(66,176,243)\";",
    "                }",
    "                valueElem.css(\"color\", rgb);",
    "                valueElem.val(bars + \" \");",
    "                if (right) {",
    "                    valueElem.css(\"text-align\", \"right\");",
    "                }",
    "                return true;",
    "            }",
    "        }",
    "",
    "",
    "        bytesToSuffix( bytes ) {",
    "            let suffix = \"\";",
    "            let divisor = 1;",
    "            if (bytes > 0x80000000) {",
    "                suffix = \"GiB\";",
    "                divisor = 0x40000000;",
    "            }",
    "            else if (bytes > 0x200000) {",
    "                suffix = \"MiB\";",
    "                divisor = 0x100000;",
    "            }",
    "            else {",
    "                suffix = \"kiB\";",
    "                divisor = 0x400;",
    "            }",
    "            let value = bytes / divisor;",
    "            if (value<999) {",
    "                return value.toFixed(1) + \" \" + suffix;",
    "            }",
    "            else {",
    "                return Math.round(value) + \" \" + suffix;",
    "            }",
    "        }",
    "",
    "        renderMatrix(cache, elem) {",
    "            let titleMatrix = cache.id + \" Matrix State\\n\\nToggle S-IN/S-OUT\";",
    "            if (!cache.s_in) {",
    "                elem.css(\"text-align\", \"center\");",
    "                StatusColor.update(elem, \"orange6\");",
    "                elem.val(\"S-OUT\");",
    "            }",
    "            else if (cache.matrix != null) {",
    "                const width = cache.matrix.length;",
    "                const height = width > 0 ? cache.matrix[0].length : 0;",
    "                let degraded = [];",
    "                let matrix = [];",
    "                let partial = false;",
    "                const dim = \"\" + height + \"R x \" + width + \"P\";",
    "                elem.val(dim);",
    "                for (const partition of cache.matrix) {",
    "                    let row = []",
    "                    let serving = 0;",
    "                    for (const replica of partition) {",
    "                        if (replica[\"serving\"] != true) {",
    "                            degraded.push( replica[\"id\"] );",
    "                            row.push(0);",
    "                        }",
    "                        else {",
    "                            serving++;",
    "                            row.push(1);",
    "                        }",
    "                    }",
    "                    matrix.push(row);",
    "                    if (serving < 1) {",
    "                        partial = true;",
    "                    }",
    "                }",
    "                if (height > 1) {",
    "                    titleMatrix += \"\\n\\n\" + height + \" Rows, \";",
    "                }",
    "                else if (height == 1) {",
    "                    titleMatrix += \"\\n\\n1 Row,\";",
    "                }",
    "                else {",
    "                    titleMatrix += \"\\n\\nEmpty\";",
    "                }",
    "                if (width > 1) {",
    "                    titleMatrix += width + \" Partitions\";",
    "                }",
    "                else if (width == 1) {",
    "                    titleMatrix += \"1 Partition\";",
    "                }",
    "                let missing = \"\";",
    "                for (const ident of degraded) {",
    "                    missing += ident + \"\\n\";",
    "                }",
    "                if (partial) {",
    "                    StatusColor.update(elem, \"orange4\");",
    "                    titleMatrix += \"\\n\\nALL Unavailable:\\n\" + missing;",
    "                }",
    "                else if (degraded.length > 0) {",
    "                    StatusColor.update(elem, \"orange2\");",
    "                    titleMatrix += \"\\n\\nUnavailable:\\n\" + missing;",
    "                }",
    "                else if (width > 0) {",
    "                    if (!(cache.matrix_complete === true)) {",
    "                        StatusColor.update(elem, \"orange4\");",
    "                        titleMatrix += \"\\n\\nA sub-dispatcher is incomplete\";",
    "                    }",
    "                    else if (!(cache.matrix_degraded === false)) {",
    "                        StatusColor.update(elem, \"orange2\");",
    "                        titleMatrix += \"\\n\\nA sub-dispatcher is degraded\";",
    "                    }",
    "                    else {",
    "                        StatusColor.update(elem, \"green\");",
    "                    }",
    "                }",
    "                else {",
    "                    StatusColor.update(elem, \"disabled\");",
    "                }",
    "                let matrixArt = \"\\n\\n\";",
    "                for (let r = 0; r < height; r++) {",
    "                    let symbol = 0x2460 + (r <= 20 ? r : 0x2473);",
    "                    let row = String.fromCodePoint(symbol) + \"    \";",
    "                    for (let p = 0; p < width; p++) {",
    "                        try {",
    "                            if (matrix[p][r] == 1) {",
    "                                symbol = 0x2705; // v",
    "                            }",
    "                            else {",
    "                                symbol = 0x274C; // x",
    "                            }",
    "                        }",
    "                        catch {",
    "                            symbol = 0x2753; // ?",
    "                        }",
    "                        row += \"    \" + String.fromCodePoint(symbol) + \"    \";",
    "                    }",
    "                    matrixArt += row + \"\\n\";",
    "                }",
    "                titleMatrix += matrixArt;",
    "            }",
    "            else if (NodeType.hasData(cache.ntyp)) {",
    "                elem.val( \"S-IN\" );",
    "                StatusColor.update(elem, \"green\");",
    "            }",
    "            else {",
    "                elem.closest(\"td\").css( \"visibility\", \"hidden\" );",
    "            }",
    "            elem.closest(\"td\").prop(\"title\", titleMatrix );",
    "        }",
    "",
    "",
    "        toggleSinSout(eventObj) {",
    "            const states = [\"S-OUT\", \"S-IN\"];",
    "            const id = this.id;",
    "            let DO_SOUT = this.s_in;",
    "            let cur = DO_SOUT ? states[1] : states[0];",
    "            let nxt = DO_SOUT ? states[0] : states[1];",
    "            let cmd = DO_SOUT ? \"--serviceout\" : \"--servicein\";",
    "            let noConfirm = reallyMeanIt(eventObj);",
    "            transitionState(id, cmd, cur, nxt, \"Service In / Service Out\", noConfirm);",
    "        }",
    "",
    "",
    "        performRestartHTTP(eventObj) {",
    "            const id = this.id;",
    "            let cmd = \"--restarthttp\";",
    "            let noConfirm = reallyMeanIt(eventObj);",
    "            performOperation(eventObj.target, id, cmd, \"Restart HTTP Server\", null, \"HTTP Server will stop and restart\", null, noConfirm, 3 );",
    "        }",
    "",
    "",
    "        performPersist(eventObj) {",
    "            const id = this.id;",
    "            let cmd = \"--persist\";",
    "            let noConfirm = reallyMeanIt(eventObj);",
    "            performOperation(eventObj.target, id, cmd, \"Persist to Disk\", null, \"All graph data will be written to disk\", null, noConfirm, 3 );",
    "        }",
    "",
    "",
    "        performHardSync(eventObj) {",
    "            const id = this.id;",
    "            let cmd = \"--sync\";",
    "            let subs = this.subscriber_ids.join(\"\\n\\u2794 \");",
    "            let noConfirm = reallyMeanIt(eventObj);",
    "            let warn = \"WARNING: Subscribers will be truncated and synchronized\\n\\n\\u2794 \" + subs;",
    "            performOperation(eventObj.target, id, cmd, \"Hard Forward Sync\", \",hard\", warn, \"HARDSYNC\", noConfirm, 3);",
    "        }",
    "",
    "",
    "        performReverseSync(eventObj) {",
    "            const id = this.id;",
    "            let cmd = \"--reversesync\";",
    "            let noConfirm = reallyMeanIt(eventObj);",
    "            let warn = \"WARNING: Provider instance will be truncated and reverse-synchronized from subscriber with highest serial number\";",
    "            performOperation(eventObj.target, id, cmd, \"Hard Reverse Sync\", null, warn, \"REVERSESYNC\", noConfirm, 3);",
    "        }",
    "",
    "",
    "        toggleAttachDetach(eventObj) {",
    "            const states = [\"Detached\", \"Attached\"];",
    "            const id = this.id;",
    "            let DO_DET = this.txout != null;",
    "            let cur = DO_DET ? states[1] : states[0];",
    "            let nxt = DO_DET ? states[0] : states[1];",
    "            let cmd = DO_DET ? \"--detach\" : \"--attach\";",
    "            let noConfirm = reallyMeanIt(eventObj);",
    "            transitionState(id, cmd, cur, nxt, \"Attach / Detach\", noConfirm);",
    "        }",
    "",
    "",
    "        toggleSubscribe(eventObj) {",
    "            const states = [\"Unsubscribed\", \"Subscribed\"];",
    "            const id = this.id;",
    "            let NO_SUB = this.provider_id == null;",
    "            if (NO_SUB) {",
    "                return;",
    "            }",
    "            let cur = NO_SUB ? states[0] : states[1];",
    "            let nxt = NO_SUB ? states[1] : states[0];",
    "            let cmd = \"--unsubscribe\";",
    "            let noConfirm = reallyMeanIt(eventObj);",
    "            transitionState(id, cmd, cur, nxt, \"Unsubscribe\", noConfirm);",
    "        }",
    "",
    "",
    "        togglePauseResumeOutput(eventObj) {",
    "            const states = [\"Resume\", \"Pause\"];",
    "            const id = this.id;",
    "            let IS_RUN = this.txout >= 0;",
    "            let cur = IS_RUN ? states[0] : states[1];",
    "            let nxt = IS_RUN ? states[1] : states[0];",
    "            let cmd = IS_RUN ? \"--pauseout\" : \"--resumeout\";",
    "            let noConfirm = reallyMeanIt(eventObj);",
    "            transitionState(id, cmd, cur, nxt, \"Output Pause / Resume\", noConfirm);",
    "        }",
    "",
    "",
    "        togglePauseResumeInput(eventObj) {",
    "            const states = [\"Resume\", \"Pause\"];",
    "            const id = this.id;",
    "            let IS_RUN = this.txin >= 0;",
    "            let cur = IS_RUN ? states[0] : states[1];",
    "            let nxt = IS_RUN ? states[1] : states[0];",
    "            let cmd = IS_RUN ? \"--pausein\" : \"--resumein\";",
    "            let noConfirm = reallyMeanIt(eventObj);",
    "            transitionState(id, cmd, cur, nxt, \"Input Pause / Resume\", noConfirm);",
    "        }",
    "",
    "",
    "        performRollingUpdate(eventObj) {",
    "            const id = this.id;",
    "            let cmd = \"--rollingupdate\";",
    "            let noConfirm = reallyMeanIt(eventObj);",
    "            let warn = \"Subscribers will Service-OUT and receive hard-sync one by one\";",
    "            performOperation(eventObj.target, id, cmd, \"Rolling Update\", null, warn, null, noConfirm, 3);",
    "        }",
    "",
    "",
    "        performSyncRepair(eventObj) {",
    "            const id = this.id;",
    "            let cmd = [\"--attach\", \"--waitforidle\", \"--sync\"];",
    "            let noConfirm = reallyMeanIt(eventObj);",
    "            performOperation(eventObj.target, id, cmd, \"Synchronize / Repair\", null, null, null, noConfirm, 3);",
    "        }",
    "",
    "",
    "        renderIOSockets(cache) {",
    "            if (cache.ncliElem != null) {",
    "                if (cache.clients != null) {",
    "                    if (cache.s_in && cache.clients > 0) {",
    "                        cache.ncliElem.val(cache.clients);",
    "                        let sz = cache.clients > 999 ? \"9px\" : \"10px\";",
    "                        cache.ncliElem.css( \"font-size\", sz );",
    "                        let redness = cache.clients / 1024;",
    "                        let gb = redness < 0.2 ? 255 : Math.round(255 * (1 - 0.4*redness));",
    "                        cache.ncliElem.css(\"color\", \"rgb(255,\" + gb + \",\" + gb + \")\");",
    "                    }",
    "                    else {",
    "                        cache.ncliElem.val(\"\");",
    "                        //StatusColor.update(cache.ncliElem, \"disabled\");",
    "                        cache.ncliElem.css(\"opacity\", \"0.2\")",
    "                    }",
    "                }",
    "                else if (cache.ncliElem != null) {",
    "                    cache.ncliElem.val(\"\");",
    "                }",
    "            }",
    "            if (cache.nchaElem != null) {",
    "                if (cache.ntyp == NodeType.Dispatch && cache.matrix_nch != null) {",
    "                    if (cache.s_in && cache.matrix_nch > 0) {",
    "                        cache.nchaElem.val(cache.matrix_nch);",
    "                        let sz = (cache.matrix_nch > 9999) ? \"8px\" : (cache.matrix_nch > 999) ? \"9px\" : \"10px\";",
    "                        cache.nchaElem.css( \"font-size\", sz );",
    "                        if (cache.matrix_maxch > 0) {",
    "                            let redness = cache.matrix_nch / cache.matrix_maxch;",
    "                            let gb = redness < 0.2 ? 240 : Math.round(240 * (1 - 0.4*redness));",
    "                            cache.nchaElem.css(\"color\", \"rgb(240,\" + gb + \",\" + gb + \")\");",
    "                            /*if (redness > 0.75) {",
    "                                cache.nchaElem.addClass(\"blinktext\");",
    "                            }",
    "                            else {",
    "                                cache.nchaElem.removeClass(\"blinktext\");",
    "                            }*/",
    "                        }",
    "                    }",
    "                    else {",
    "                        cache.nchaElem.val(\"\");",
    "                        //StatusColor.update(cache.nchaElem, \"disabled\");",
    "                        cache.nchaElem.css(\"opacity\", \"0.2\")",
    "                    }",
    "                }",
    "                else if (cache.nchaElem != null) {",
    "                    cache.nchaElem.css(\"visibility\", \"hidden\");",
    "                }",
    "            }",
    "        }",
    "",
    "",
    "        renderQueryLoadBalance(cache) {",
    "            if (cache.qbalElem != null) {",
    "                if (cache.group_size != null && cache.group_size[cache.group] > 1) {",
    "                    const groupRate = cache.group_rate[cache.group];",
    "                    if (groupRate > 0) {",
    "                        const rate = cache.s_in ? cache.rate : 0.0;",
    "                        const qbal = rate > 0 ? Math.round( 100*rate / groupRate ) : 0;",
    "                        this.renderLinearBars( cache.qbalElem, 11, qbal, 100, false, \"#eafaf1\" );",
    "                    }",
    "                    else {",
    "                        cache.qbalElem.val(\"\");",
    "                        //StatusColor.update(cache.qbalElem, \"disabled\");",
    "                    }",
    "                    cache.qbalElem.css(\"visibility\", \"visible\");",
    "                }",
    "                else {",
    "                    cache.qbalElem.css(\"visibility\", \"hidden\");",
    "                }",
    "            }",
    "        }",
    "",
    "",
    "        renderQueryRate(cache) {",
    "            if (!cache.rateElem.hasClass('actionable')) {",
    "                if (cache.rate != null) {",
    "                    if (cache.s_in) {",
    "                        cache.rateElem.val(cache.rate.toFixed(1));",
    "                        StatusColor.update(cache.rateElem, \"nominal\");",
    "                    }",
    "                    else {",
    "                        cache.rateElem.val(\"-.-\");",
    "                        StatusColor.update(cache.rateElem, \"disabled\");",
    "                    }",
    "                }",
    "                else {",
    "                    cache.rateElem.val(\"\");",
    "                }",
    "            }",
    "        }",
    "",
    "",
    "        renderQueryLatency(cache) {",
    "            if (!cache.qlatElem.hasClass('actionable')) {",
    "                if (cache.qlat95 != null) {",
    "                    if (cache.s_in) {",
    "                        cache.qlatElem.val(cache.qlat95.toFixed(2));",
    "                        StatusColor.update(cache.qlatElem, \"nominal\");",
    "                    }",
    "                    else {",
    "                        cache.qlatElem.val(\"-.--\");",
    "                        StatusColor.update(cache.qlatElem, \"disabled\");",
    "                    }",
    "                }",
    "                else {",
    "                    cache.qlatElem.val(\"\");",
    "                }",
    "            }",
    "        }",
    "",
    "        counterFontSize(value) {",
    "            let m = Math.log10( value );",
    "            if (m < 9) {",
    "                return \"12px\";",
    "            }",
    "            else if (m < 10) {",
    "                return \"11px\";",
    "            }",
    "            else if (m < 12) {",
    "                return \"9px\";",
    "            }",
    "            else {",
    "                return \"8px\";",
    "            }",
    "        }",
    "",
    "",
    "        renderOrder(cache) {",
    "            if (cache.ordrElem != null && !cache.ordrElem.hasClass('actionable')) {",
    "                if (cache.order != null) {",
    "                    let sz = this.counterFontSize(cache.order);",
    "                    cache.ordrElem.val(cache.order.toLocaleString(\"en-US\"));",
    "                    cache.ordrElem.css(\"font-size\", sz);",
    "                    StatusColor.update(cache.ordrElem, \"nominal\");",
    "                }",
    "                else {",
    "                    cache.ordrElem.val(\"\");",
    "                }",
    "            }",
    "        }",
    "",
    "",
    "        renderSize(cache) {",
    "            if (cache.sizeElem != null && !cache.sizeElem.hasClass('actionable')) {",
    "                if (cache.size != null) {",
    "                    let sz = this.counterFontSize(cache.size);",
    "                    cache.sizeElem.val(cache.size.toLocaleString(\"en-US\"));",
    "                    cache.sizeElem.css(\"font-size\", sz);",
    "                    StatusColor.update(cache.sizeElem, \"nominal\");",
    "                }",
    "                else {",
    "                    cache.sizeElem.val(\"\");",
    "                }",
    "            }",
    "        }",
    "",
    "",
    "        renderSerial(cache) {",
    "            if (!cache.mserElem.hasClass('actionable')) {",
    "                if (cache.serial != null) {",
    "                    let rsn = MasterSerial.render(cache.serial);",
    "                    cache.mserElem.data('serial', rsn);",
    "                    cache.mserElem.val(rsn);",
    "                    if (cache.master_serial != null && cache.master_serial != cache.serial) {",
    "                        let red = Math.round((255 * MasterSerial.diff(cache.master_serial, cache.serial)) / (1 << 14));",
    "                        if (red > 224) {",
    "                            red = 224;",
    "                        }",
    "                        else if (red < 64) {",
    "                            red = 64;",
    "                        }",
    "                        const rgb = \"rgb(\" + red + \",0,0)\";",
    "                        cache.mserElem.css(\"color\", rgb);",
    "                    }",
    "                    else {",
    "                        cache.mserElem.css(\"color\", \"initial\");",
    "                    }",
    "                }",
    "                else {",
    "                    cache.mserElem.val(\"\");",
    "                }",
    "            }",
    "        }",
    "",
    "",
    "        hide(elem) {",
    "            elem.find(\"*\").addBack(\"*\").css(\"visibility\", \"hidden\");",
    "        }",
    "",
    "",
    "        nextGroup(grp, cache) {",
    "            this.prevGroup = this.currentGroup;",
    "            this.currentGroup = grp;",
    "            if (this.prevGroup >= 0 && cache.group_size != null && cache.group_size[this.prevGroup] > 1) {",
    "                let has = {};",
    "                for (let ntyp of this.currentGroupInstances) {",
    "                    if (ntyp == NodeType.Builder || ntyp == NodeType.TXProxy || ntyp == NodeType.Search) {",
    "                        has.Engine = true;",
    "                    }",
    "                    else if (ntyp == NodeType.Dispatch) {",
    "                        has.Dispatch = true;",
    "                    }",
    "                    else {",
    "                        has.Other = true;",
    "                    }",
    "                }",
    "                if (Object.keys(has).length == 1) {",
    "                    this.renderRow(\"grp_aggr_\" + grp, NodeType.Aggregate, null, null, null, cache);",
    "                }",
    "                else {",
    "                }",
    "            }",
    "            else {",
    "            }",
    "            this.currentGroupInstances = [];",
    "            this.currentGroupTitle = null;",
    "        }",
    "",
    "",
    "        renderRow(id, ntyp, host, httpPort, nodeStatus, cache) {",
    "",
    "            let nodeList = $('#nodeList tbody');",
    "",
    "            let rowTemplate = $('#rowTemplate').html();",
    "",
    "            const rowID = \"row_\" + id;",
    "",
    "            const grp = parseFloat(cache.group);",
    "            if (ntyp != NodeType.Aggregate && !isNaN(grp) && grp > this.currentGroup) {",
    "                let sep = this.currentGroup >= 0 ? \"<hr>\" : \"<hr>\";",
    "                this.nextGroup(grp, cache);",
    "                let matrix_mode = \"matrix_mode\" in cache ? cache.matrix_mode : \"---\";",
    "                let groupTitleRow =",
    "                    '<tr class=\"nodeRow\">' +",
    "                    '<td colspan=\"21\">' + sep +",
    "                    '<span class=\"nodennum\"><span class=\"grouptitle\" id=\"' + grp + '\"></span>' +",
    "                    '<span class=\"groupid\">' + grp + ' ' + matrix_mode + '</span></span></td></tr>';",
    "                nodeList.append(groupTitleRow);",
    "            }",
    "            this.currentGroupInstances.push(ntyp);",
    "",
    "            if (this.currentGroupTitle == null) {",
    "                let groupLabel;",
    "                if (ntyp == NodeType.Builder) {",
    "                    let pnum = cache.partition >= 0 ? \"\" + (cache.partition + 1) : \"?\";",
    "                    groupLabel = \"Partition \" + pnum + \"/\" + cache.num_partitions;",
    "                }",
    "                else {",
    "                    groupLabel = ntyp.description;",
    "                }",
    "                $(\"#\" + $.escapeSelector(\"\"+grp)).html( groupLabel );",
    "                this.currentGroupTitle = groupLabel + \" \" + grp + \" \" + cache.matrix_mode;",
    "            }",
    "",
    "            nodeList.append('<tr class=\"nodeRow\" id=\"' + rowID + '\">' + rowTemplate + '</tr>');",
    "",
    "            // Row",
    "            let row = nodeList.find(\"#\" + $.escapeSelector(rowID));",
    "            row.find(\"input\").prop(\"disabled\", true);",
    "            row.find(\"input\").addClass(\"disable_select\");",
    "            row.find(\"*\").css(\"vertical-align\", \"middle\");",
    "",
    "            // Id | Type | Status | Uptime | Address | Clients | Channels | RPS | 95th ms | Memory | Order | Size | Subs | Out | In | Lag | Digest | S/N | TX Log",
    "            let nnumElem = row.find(\".nodennum input\");",
    "            let ntypElem = row.find(\".nodentyp input\");",
    "            let statElem = row.find(\".nodestat input\");",
    "            let uptmElem = row.find(\".nodeuptm input\");",
    "            let hostElem = row.find(\".nodehost input\");",
    "            let mtrxElem = row.find(\".nodemtrx input\");",
    "            cache.ncliElem = row.find(\".nodencli input\");",
    "            cache.nchaElem = row.find(\".nodencha input\");",
    "            cache.qbalElem = row.find(\".nodeqbal input\");",
    "            cache.rateElem = row.find(\".noderate input\");",
    "            cache.qlatElem = row.find(\".nodeqlat input\");",
    "            let loadElem = row.find(\".nodeload\");",
    "            let mprcElem = row.find(\".nodemprc\");",
    "            let mtotElem = row.find(\".nodemtot\");",
    "            let mmryElem = row.find(\".nodemmry\");",
    "            cache.ordrElem = row.find(\".nodeordr input\");",
    "            cache.sizeElem = row.find(\".nodesize input\");",
    "            let tsubElem = row.find(\".nodetsub\");",
    "            let subsElem = row.find(\".nodesubs\");",
    "            let toutElem = row.find(\".nodetout\");",
    "            let txroElem = row.find(\".nodetxro\");",
    "            let tinpElem = row.find(\".nodetinp\");",
    "            let provElem = row.find(\".nodeprov\");",
    "            let txriElem = row.find(\".nodetxri\");",
    "            let dgstElem = row.find(\".nodedgst\");",
    "            cache.mserElem = row.find(\".nodemser input\");",
    "            let slagElem = row.find(\".nodeslag\");",
    "            let sndfElem = row.find(\".nodesndf\");",
    "            let tlogElem = row.find(\".nodetlog\");",
    "            let ztxlElem = row.find(\".nodeztxl\");",
    "",
    "",
    "            let txNode = NodeType.hasTX(ntyp);",
    "            let dataNode = NodeType.hasData(ntyp);",
    "            let hasSubs = (cache.subscriber_ids != null && cache.subscriber_ids.length > 0);",
    "",
    "            // Aggregate",
    "            if (ntyp == NodeType.Aggregate) {",
    "                row.find(\"input\").css(\"visibility\", \"hidden\");",
    "                let aggr = {\"s_in\":true, \"rate\":0.0, \"qlat95\":0.0};",
    "                aggr.rateElem = row.find(\".noderate input\");",
    "                aggr.rateElem.css(\"visibility\",\"visible\");",
    "                aggr.rateElem.attr(\"id\", \"rate_\" + id);",
    "                aggr.qlatElem = row.find(\".nodeqlat input\");",
    "                aggr.qlatElem.css(\"visibility\",\"visible\");",
    "                aggr.qlatElem.attr(\"id\", \"qlat_\" + id);",
    "                if (cache.group_rate != null) {",
    "                    if (this.prevGroup in cache.group_rate) {",
    "                        aggr.rate = cache.group_rate[this.prevGroup];",
    "                    }",
    "                }",
    "                this.renderQueryRate(aggr);",
    "                if (cache.group_est_qlat != null) {",
    "                    if (this.prevGroup in cache.group_est_qlat) {",
    "                        aggr.qlat95 = cache.group_est_qlat[this.prevGroup];",
    "                    }",
    "                }",
    "                this.renderQueryLatency(aggr);",
    "                aggr.rateElem.closest(\"td\").prop(\"title\", \"Group Total Requests/sec\\n\\n(\" + this.currentGroupTitle + \")\");",
    "                aggr.qlatElem.closest(\"td\").prop(\"title\", \"Group 95th ms (estimate)\\n\\n(\" + this.currentGroupTitle + \")\");",
    "                return;",
    "            }",
    "",
    "            // Id",
    "            let titleId = id + \"\\n\\nOpen Admin Console\";",
    "            if (cache.this_instance) {",
    "                nnumElem.addClass(\"localnode\");",
    "                titleId += \"\\n(This instance)\";",
    "            }",
    "            else {",
    "                nnumElem.addClass(\"remotenode\");",
    "            }",
    "",
    "            let nodennumTD = row.find(\".nodennum\");",
    "            this.setTitleLink(nodennumTD, host, httpPort, null, titleId );",
    "            nnumElem.attr(\"id\", \"nnum_\" + id);",
    "            nnumElem.val(id);",
    "            let idLabelSize = 1 + id.length*0.5;",
    "            if (idLabelSize > this.idLabelSize) {",
    "                this.idLabelSize = idLabelSize;",
    "                $(\".nodennum input\").css(\"max-width\", this.idLabelSize + \"em\");",
    "            }",
    "",
    "            // Type",
    "            let nodentypTD = row.find(\".nodentyp\");",
    "            ntypElem.attr(\"id\", \"ntyp_\" + id);",
    "            if (ntyp != null) {",
    "                NodeType.update( $('#ntyp_'+$.escapeSelector(id)), ntyp );",
    "                let titleType = id + \" Type\\n\\nOpen Admin Dashboard\";",
    "                this.setTitleLink(nodentypTD, host, httpPort, \"admin\", titleType );",
    "            }",
    "",
    "            // Status",
    "            statElem.attr(\"id\", \"stat_\" + id);",
    "            if (nodeStatus != null) {",
    "                NodeStatus.update( $('#stat_'+$.escapeSelector(id)), nodeStatus, cache );",
    "                let statTD = row.find(\".nodestat\");",
    "                let titleStatus = id + \" Status\\n\\nOpen VGXServer Status\";",
    "                this.setTitleLink(statTD, host, httpPort, \"status\", titleStatus );",
    "            }",
    "            if (nodeStatus == null || nodeStatus == NodeStatus.Down || nodeStatus == NodeStatus.Unknown) {",
    "                row.find('.nodefade').css(\"opacity\", 0.3);",
    "                cache.uptime = -1;",
    "                cache.clock.stop();",
    "                row.data(\"up\", false);",
    "            }",
    "            else {",
    "                row.data(\"up\", true);",
    "            }",
    "",
    "            // Uptime",
    "            uptmElem.attr(\"id\", \"uptime_\" + id);",
    "            cache.clock.setElement(uptmElem);",
    "            const uptime = cache.clock.getTime();",
    "            if (Math.abs(cache.uptime-uptime) > 2) {",
    "                cache.clock.updateTimeReference(cache.uptime);",
    "            }",
    "            cache.clock.refresh();",
    "            let nodeuptmTD = row.find(\".nodeuptm\");",
    "            let titleUptime = id + \" Uptime\\nddd:hh:mm:ss\\n\\nSend Ping Request\";",
    "            this.setTitleLink(nodeuptmTD, host, httpPort, \"vgx/ping\", titleUptime );",
    "",
    "",
    "            // Address",
    "            let nodehostTD = row.find(\".nodehost\");",
    "            hostElem.attr(\"id\", \"host_\" + id);",
    "            if (host != null) {",
    "                this.setTitleLink(nodehostTD, host, httpPort, \"index\");",
    "                let address = host + \":\" + httpPort;",
    "                //StatusColor.update( hostElem, \"gray4\" );",
    "                hostElem.val(address);",
    "                hostElem.attr(\"size\",address.length);",
    "                let totalGiB = cache.mem_tot / 0x40000000;",
    "                let titleAddress =  id +",
    "                                    \" Address\\n\\nhostname: \" + cache.hostname +",
    "                                    \"\\nip: \" + cache.ip +",
    "                                    \"\\nadmin port: \" + httpPort +",
    "                                    \"\\nmain port: \" + (httpPort-1) +",
    "                                    \"\\npid: \" + cache.pid +",
    "                                    \"\\n\\nCPU: \" + cache.cpu +",
    "                                    \"\\nMemory: \" + totalGiB.toFixed(1) + \" GiB\";",
    "                nodehostTD.prop(\"title\", titleAddress );",
    "            }",
    "            else {",
    "                hostElem.val(\"\");",
    "            }",
    "",
    "            if (cache.uptime > 0) {",
    "",
    "              // Matrix",
    "              mtrxElem.data('s_in', cache.s_in);",
    "              mtrxElem.attr(\"id\", \"mtrx_\" + id);",
    "              let nodemtrxTD = row.find(\".nodemtrx\");",
    "              this.setAction(nodemtrxTD, mtrxElem, null, this.toggleSinSout, cache);",
    "              this.renderMatrix(cache, mtrxElem);",
    "",
    "              // I/O Sockets",
    "              cache.ncliElem.data('clients', cache.clients)",
    "              cache.ncliElem.attr(\"id\", \"ncli_\" + id);",
    "              cache.nchaElem.data('active', cache.matrix_nch)",
    "              cache.nchaElem.data('total', cache.matrix_maxch)",
    "              this.renderIOSockets(cache);",
    "              if (cache.clients != null) {",
    "                  let nodencliTD = row.find(\".nodencli\");",
    "                  let titleClients = id + \" Connected Clients\\nActive: \" + cache.clients + \"\\nMax: \" + cache.maxclients;",
    "                  nodencliTD.prop('title', titleClients);",
    "              }",
    "              if (cache.ntyp == NodeType.Dispatch && cache.matrix_nch != null) {",
    "                  let nodenchaTD = row.find(\".nodencha\");",
    "                  const width = cache.matrix.length;",
    "                  let matrixInfo = [];",
    "                  if (width > 0) {",
    "                      let partChannels = 0;",
    "                      for (const engine of cache.matrix[0]) {",
    "                          matrixInfo.push(engine.id + \" ch: \" + engine.channels + \" x \" + width + \" = \" + engine.channels * width);",
    "                          partChannels += engine.channels;",
    "                      }",
    "                      matrixInfo.push(\"Part ch: \" + partChannels + \" x \" + width + \" = \" + partChannels * width);",
    "                  }",
    "",
    "                  let titleMatrixChannels = id + \" Backend Matrix Channels\\nActive: \" + cache.matrix_nch +",
    "                                            \"\\nMax: \" + cache.matrix_maxch + \"\\n\" +",
    "                                            \"\\nDetail:\\n\" + matrixInfo.join(\"\\n\");",
    "                  nodenchaTD.prop('title', titleMatrixChannels);",
    "              }",
    "",
    "              // Query Load Balance",
    "              cache.qbalElem.attr(\"id\", \"qbal_\" + id);",
    "              this.renderQueryLoadBalance(cache);",
    "              if (cache.rate != null && cache.group_size != null && cache.group_size[cache.group] > 1) {",
    "                  let nodeqbalTD = row.find(\".nodeqbal\");",
    "                  let sz = cache.group_size[cache.group];",
    "                  let R = cache.group_rate[cache.group];",
    "                  let pct = R > 0 ? Math.round( 100 * cache.rate / R ) : 0;",
    "                  let titleQBal = id + \" Load Balance \" + pct + \"%\\nGroup \" + cache.group + \" (\" + sz + \")\";",
    "                  nodeqbalTD.prop('title', titleQBal);",
    "              }",
    "",
    "              // RPS",
    "              cache.rateElem.data('rate', cache.rate)",
    "              cache.rateElem.attr(\"id\", \"rate_\" + id);",
    "              this.renderQueryRate(cache);",
    "              if (cache.rate != null) {",
    "                  let noderateTD = row.find(\".noderate\");",
    "                  let titleRPS = id + \" Requests/sec\\n\\nClick to Restart HTTP\";",
    "                  this.setAction(noderateTD, cache.rateElem, titleRPS, this.performRestartHTTP, cache);",
    "              }",
    "",
    "              // 95th ms",
    "              cache.qlatElem.attr(\"id\", \"qlat_\" + id);",
    "              this.renderQueryLatency(cache);",
    "              let nodeqlatTD = row.find(\".nodeqlat\");",
    "              let title95th = id + \" 95th % Latency (ms)\";",
    "              if (cache.qlatAll != null) {",
    "                  title95th += \"\\n\";",
    "                  title95th += \"\\n50th: \" + cache.qlatAll[\"50.0\"].toFixed(2) + \" ms\";",
    "                  title95th += \"\\n90th: \" + cache.qlatAll[\"90.0\"].toFixed(2) + \" ms\";",
    "                  title95th += \"\\n95th: \" + cache.qlatAll[\"95.0\"].toFixed(2) + \" ms\";",
    "                  title95th += \"\\n99th: \" + cache.qlatAll[\"99.0\"].toFixed(2) + \" ms\";",
    "                  nodeqlatTD.prop('title', title95th);",
    "              }",
    "",
    "              // Memory",
    "              mprcElem.attr(\"id\", \"memuse_\" + id);",
    "              mmryElem.attr(\"id\", \"memory_\" + id);",
    "              mtotElem.attr(\"id\", \"memtot_\" + id);",
    "              let vgxInstanceGiB = cache.mem_proc / 0x40000000;",
    "              let totalGiB = cache.mem_tot / 0x40000000;",
    "              let usedGiB = (cache.mem_tot - cache.mem_avail) / 0x40000000;",
    "              mprcElem.val( vgxInstanceGiB.toFixed(1) );",
    "              mtotElem.val( Math.round(totalGiB).toFixed(0) );",
    "              this.renderLinearBars(mmryElem, 27, cache.mem_tot - cache.mem_avail, cache.mem_tot );",
    "              const proc_pct = (100 * cache.mem_proc / cache.mem_tot).toFixed(1);",
    "              const total_pct = (100 * (cache.mem_tot - cache.mem_avail) / cache.mem_tot).toFixed(1);",
    "              //this.setTitleLink(loadElem, host, httpPort, \"vgx/builtin/memory?graph=*\");",
    "              let titleMemory = id + \" Memory\\n\\n\" + vgxInstanceGiB.toFixed(1) +",
    "                  \" GiB (\" + proc_pct + \"%) \" + \"\\nHost: \" + usedGiB.toFixed(1) + \" GiB / \" + totalGiB.toFixed(1) + \" GiB (\" + total_pct + \"%)\" +",
    "                  \"\\n\\nClick to Persist to Disk\";",
    "              this.setAction(loadElem, loadElem, titleMemory, this.performPersist, cache);",
    "",
    "              // Order",
    "              cache.ordrElem.data('order', cache.order);",
    "              cache.ordrElem.data('subs', hasSubs);",
    "              if (dataNode || (cache.order > 0)) {",
    "                  cache.ordrElem.attr(\"id\", \"order_\" + id);",
    "                  this.renderOrder(cache);",
    "                  let nodeordrTD = row.find(\".nodeordr\");",
    "                  let titleOrder = id + \" Vertex Count\";",
    "                  if (hasSubs) {",
    "                      titleOrder += \"\\n\\nClick to perform Reverse Sync\\nfrom attached subscriber\";",
    "                      this.setAction(nodeordrTD, cache.ordrElem, titleOrder, this.performReverseSync, cache);",
    "                  }",
    "                  else {",
    "                      nodeordrTD.prop('title', titleOrder);",
    "                  }",
    "              }",
    "              else {",
    "                  this.hide(cache.ordrElem);",
    "              }",
    "",
    "              // Size",
    "              cache.sizeElem.data('size', cache.size);",
    "              cache.sizeElem.data('subs', hasSubs);",
    "              if (dataNode || (cache.size > 0)) {",
    "                  cache.sizeElem.attr(\"id\", \"size_\" + id);",
    "                  this.renderSize(cache);",
    "                  let nodesizeTD = row.find(\".nodesize\");",
    "                  let titleSize = id + \" Arc Count\";",
    "                  if (hasSubs) {",
    "                      titleSize += \"\\n\\nClick to perform Forward Sync\\nto attached subscribers\";",
    "                      this.setAction(nodesizeTD, cache.sizeElem, titleSize, this.performHardSync, cache);",
    "                  }",
    "                  else {",
    "                      nodesizeTD.prop('title', titleSize);",
    "                  }",
    "              }",
    "              else {",
    "                  this.hide(cache.sizeElem);",
    "              }",
    "            }",
    "",
    "            // Subs",
    "            if (txNode) {",
    "                subsElem.attr(\"id\", \"subcnt_\" + id);",
    "                let titleSubs = id + \" Subscribers\\n\\n\";",
    "                let color = null;",
    "                if (hasSubs) {",
    "                    subsElem.val(\"\\u{25B6} \" + cache.subscriber_ids.length);",
    "                    for (let sub of cache.subscriber_ids) {",
    "                        titleSubs = titleSubs + sub + \"\\n\";",
    "                    }",
    "                    titleSubs = titleSubs + \"\\n\";",
    "                }",
    "                else {",
    "                    subsElem.css(\"opacity\", \"0.2\");",
    "                    subsElem.val(\"\");",
    "                }",
    "                if (cache.canHaveSubs == true) {",
    "                    subsElem.data(\"txtype\", \"subs\");",
    "                    titleSubs = titleSubs + \"Toggle Attach/Detach All\";",
    "                    if (cache.local_only) {",
    "                        const s = cache.local_only > 1 ? \"s\" : \"\";",
    "                        color = \"redinv\";",
    "                        titleSubs += \"\\n\\nWarning: \" + cache.local_only + \" local only graph\" + s + \" will not\\nbe replicated to subscribers\";",
    "                    }",
    "                    StatusColor.update( subsElem, color );",
    "                    this.setAction(tsubElem, subsElem, titleSubs, this.toggleAttachDetach, cache);",
    "                }",
    "                else {",
    "                    subsElem.data(\"txtype\", \"leaf\");",
    "                }",
    "            }",
    "            else {",
    "                this.hide(subsElem);",
    "            }",
    "",
    "",
    "            // Out",
    "            if (txNode) {",
    "                txroElem.data(\"txtype\",\"out\");",
    "                txroElem.attr(\"id\", \"txout_\" + id);",
    "                if (cache.uptime > 0) {",
    "                    let titleOut = id + \" Transaction Output Rate\\n\\nToggle Pause/Resume Output\";",
    "                    if (cache.txout != null) {",
    "                        this.setAction(toutElem, txroElem, titleOut, this.togglePauseResumeOutput, cache);",
    "                    }",
    "                    this.renderLogBars(txroElem, 14, cache.txout);",
    "                }",
    "                else {",
    "                    this.renderLogBars(txroElem, 14, null);",
    "                }",
    "            }",
    "            else {",
    "                this.hide(txroElem);",
    "            }",
    "",
    "",
    "            // In",
    "            if (txNode) {",
    "                txriElem.data(\"txtype\",\"in\");",
    "                txriElem.attr(\"id\", \"txin_\" + id);",
    "                provElem.attr(\"id\", \"nsrc_\" + id);",
    "                if (cache.provider_id != null) {",
    "                    this.renderLogBars(txriElem, 14, cache.txin);",
    "                    if (cache.provider_id.length > 3) {",
    "                        provElem.css(\"font-size\", \"7px\");",
    "                    }",
    "                    else if (cache.provider_id.length > 2) {",
    "                        provElem.css(\"font-size\", \"9px\");",
    "                    }",
    "                    provElem.val(cache.provider_id);",
    "                    let titleIn = id + \" Transaction Input Rate\\n\\nProvider: \" + cache.provider_id + \"\\n\\nToggle Pause/Resume Input\";",
    "                    this.setAction(tinpElem, txriElem, titleIn, this.togglePauseResumeInput, cache);",
    "                }",
    "                else {",
    "                    this.renderLogBars(txriElem, 14, null);",
    "                    provElem.val(\"\");",
    "                }",
    "            }",
    "            else {",
    "                this.hide(txriElem);",
    "                this.hide(provElem);",
    "            }",
    "",
    "",
    "            // Lag",
    "            if (dataNode) {",
    "                sndfElem.data(\"txtype\",\"lag\");",
    "                sndfElem.attr(\"id\", \"seriallag_\" + id);",
    "                if (cache.provider_id != null && cache.serial != null && cache.master_serial != null) {",
    "                    const sndiff = MasterSerial.diff(cache.master_serial, cache.serial);",
    "                    if (this.renderLinearBars(sndfElem, 14, sndiff, Nodes.maxSerialLag, true)) {",
    "                        this.setTitleLink(slagElem, host, httpPort, \"vgx/txstat\");",
    "                    }",
    "                    let titleLag = id + \" Transaction Input Lag\\n\\nS/N Delta: \" + sndiff.toLocaleString(\"en-US\") + \"\\n\\nClick to unsubscribe\";",
    "                    this.setAction(slagElem, sndfElem, titleLag, this.toggleSubscribe, cache);",
    "                }",
    "                else {",
    "                    this.renderLinearBars(sndfElem, null, null, null, true);",
    "                }",
    "            }",
    "            else {",
    "                this.hide(sndfElem);",
    "            }",
    "",
    "",
    "            // Digest",
    "            if (dataNode || (cache.order > 0)) {",
    "                let dgstSpan = dgstElem.find(\".digest\");",
    "                dgstSpan.data('digest', cache.digest);",
    "                dgstSpan.data('subs', hasSubs);",
    "                if (cache.digest == null) {",
    "                    new Digest(dgstSpan).update(Nodes.noDigest);",
    "                }",
    "                else {",
    "                    new Digest(dgstSpan).update(cache.digest);",
    "                    let titleDigest = id + \" Data Digest\\n\"",
    "                        + \"\\nVertices: \" + cache.order",
    "                        + \"\\nArcs: \" + cache.size",
    "                        + \"\\nProperties: \" + cache.properties",
    "                        + \"\\nVectors: \" + cache.vectors",
    "                        + \"\\nRelationships: \" + cache.nrel",
    "                        + \"\\nVertex Types: \" + cache.nvtx",
    "                        + \"\\nDimensions: \" + cache.ndim",
    "                        + \"\\nKeys: \" + cache.nkey",
    "                        + \"\\nString Values: \" + cache.nval;",
    "                    if (hasSubs) {",
    "                        titleDigest += \"\\n\\nClick to Sync / Repair subscribers\";",
    "                        this.setAction(dgstElem, dgstSpan.children(), titleDigest, this.performSyncRepair, cache);",
    "                    }",
    "                    else {",
    "                        dgstElem.prop('title', titleDigest);",
    "                    }",
    "                }",
    "            }",
    "            else {",
    "                this.hide(dgstElem);",
    "            }",
    "",
    "            if (cache.uptime > 0) {",
    "              // S/N",
    "              if (dataNode) {",
    "                  cache.mserElem.data('subs', hasSubs);",
    "                  cache.mserElem.attr(\"id\", \"serial_\" + id);",
    "                  this.renderSerial(cache);",
    "                  let nodemserTD = row.find(\".nodemser\");",
    "                  let titleSN = id + \" Transaction Serial Number\";",
    "                  if (hasSubs) {",
    "                      titleSN += \"\\n\\nClick to perform Rolling Update of subscribers\";",
    "                      this.setAction(nodemserTD, cache.mserElem, titleSN, this.performRollingUpdate, cache);",
    "                  }",
    "                  else {",
    "                      nodemserTD.prop('title', titleSN);",
    "                  }",
    "              }",
    "              else {",
    "                  this.hide(cache.mserElem);",
    "              }",
    "            }",
    "",
    "            // TX Log",
    "            if (dataNode) {",
    "                ztxlElem.attr(\"id\", \"sztxlog_\" + id);",
    "                if (cache.durable && cache.durable_txlog != null && cache.durable_max_txlog != null) {",
    "                    this.renderLinearBars(ztxlElem, 26, cache.durable_txlog, 1.5 * cache.durable_max_txlog);",
    "                    let sizeMiB = (cache.durable_txlog >> 20).toLocaleString(\"en-US\");",
    "                    let titleTXLog = id + \" Transaction Log\\n\\nSize: \" + sizeMiB + \" MiB\";",
    "                    tlogElem.prop(\"title\", titleTXLog);",
    "                }",
    "                else {",
    "                    ztxlElem.val(\"\");",
    "                }",
    "                if (!cache.durable) {",
    "                    ztxlElem.css(\"opacity\", \"0.2\");",
    "                }",
    "            }",
    "            else {",
    "                this.hide(ztxlElem);",
    "            }",
    "",
    "        }",
    "",
    "",
    "        getNodeStatus( ntyp, nodestatObj, cache ) {",
    "            // DOWN",
    "            if (!cache.clock.running()) {",
    "                return NodeStatus.Down;",
    "            }",
    "            // Unknown",
    "            if (!nodestatObj) {",
    "                return NodeStatus.Unknown;",
    "            }",
    "            let load = 0;",
    "            if (cache.mem_tot > 0) {",
    "                load = (cache.mem_tot - cache.mem_avail) / cache.mem_tot;",
    "            }",
    "            // Memory!",
    "            if (load > 0.93) {",
    "                return NodeStatus.MemCritical;",
    "            }",
    "            // Sync x%",
    "            if (nodestatObj[\"synchronizing\"]) {",
    "                cache.sync_progress = nodestatObj[\"sync-progress\"];",
    "                return NodeStatus.Sync;",
    "            }",
    "            // Snapshot",
    "            if (nodestatObj[\"snapshot-writing\"]) {",
    "                return NodeStatus.Persist;",
    "            }",
    "            // Init...",
    "            if (cache.ready != true ) {",
    "                return NodeStatus.Initializing;",
    "            }",
    "            // MEMORY!",
    "            if (load > Nodes.memoryCriticalThreshold) {",
    "                return NodeStatus.MemCritical;",
    "            }",
    "            // Memory",
    "            if (load > Nodes.memoryHighThreshold) {",
    "                return NodeStatus.MemWarningHI;",
    "            }",
    "            // S-OUT",
    "            if (!cache.s_in) {",
    "                return NodeStatus.ServiceOut;",
    "            }",
    "            // Incomplete dispatcher matrix",
    "            if (cache.matrix != null && cache.matrix.length > 0 && cache.matrix_complete === false) {",
    "                return NodeStatus.Partial;",
    "            }",
    "            // Degraded dispatcher matrix",
    "            if (cache.matrix_degraded === true) {",
    "                return NodeStatus.Degraded;",
    "            }",
    "            // Inconsistent dispatcher matrix",
    "            if (cache.matrix_consistent === false) {",
    "                return NodeStatus.Inconsistent;",
    "            }",
    "            // Readonly",
    "            if (cache.readonly === true) {",
    "                return NodeStatus.Readonly;",
    "            }",
    "            if (NodeType.hasData(ntyp)) {",
    "                // No Input",
    "                if (cache.provider_id == null && cache.txin != null) {",
    "                    return NodeStatus.NoInput;",
    "                }",
    "                // Delta",
    "                if (cache.idle_ms > 30000) {",
    "                    if (cache.master_digest != cache.digest) {",
    "                        return NodeStatus.Inconsistent;",
    "                    }",
    "                    cache.sndiff = MasterSerial.diff(cache.master_serial, cache.serial);",
    "                    if (cache.sndiff > 1) {",
    "                        return NodeStatus.SerialDiff;",
    "                    }",
    "                }",
    "                // Busy",
    "                if (cache.lag > 30000) {",
    "                    return NodeStatus.Busy;",
    "                }",
    "            }",
    "            // Busy",
    "            if (cache.busy >= 5) {",
    "                return NodeStatus.Busy;",
    "            }",
    "            // Memory",
    "            if (load > Nodes.memoryLowThreshold) {",
    "                return NodeStatus.MemWarningLO;",
    "            }",
    "            // OK",
    "            return NodeStatus.OK;",
    "        }",
    "",
    "",
    "        getCanHaveSubs(transactionTopology) {",
    "            let canHaveSubs = {};",
    "            for (let id of Object.keys(transactionTopology)) {",
    "                let subs = transactionTopology[id];",
    "                if (Object.keys(subs).length > 0) {",
    "                    canHaveSubs[id] = true;",
    "                    for (let subid of Object.keys(this.getCanHaveSubs(subs))) {",
    "                        canHaveSubs[subid] = true;",
    "                    }",
    "                }",
    "            }",
    "            return canHaveSubs;",
    "        }",
    "",
    "",
    "        refreshFull() {",
    "",
    "            $.get(\"/vgx/builtin/system_overview\", function (data, textStatus, jqXHR) {",
    "                let message = null;",
    "                let objCount = 0;",
    "                try {",
    "",
    "                    const response = data[\"response\"];",
    "                    const this_id = response[\"id\"];",
    "                    const descriptor = response[\"descriptor\"];",
    "                    const instances = response[\"instances\"];",
    "                    message = response[\"message\"];",
    "",
    "                    if (descriptor == null || response[\"error\"]) {",
    "                        if (message != null) {",
    "                            throw message;",
    "                        }",
    "                        else {",
    "                            throw \"data error\";",
    "                        }",
    "                    }",
    "",
    "",
    "                    let nodeTypes = [",
    "                        [NodeType.Admin,    []], // 0",
    "                        [NodeType.Dispatch, []], // 1",
    "                        [NodeType.Builder,  []], // 2",
    "                        [NodeType.TXProxy,  []], // 3",
    "                        [NodeType.Search,   []], // 4",
    "                        [NodeType.Generic,  []]  // 5",
    "                    ];",
    "",
    "                    for (const instance of instances) {",
    "                        const ntype = instance[\"nodetype\"];",
    "                        let i;",
    "                        switch(ntype) {",
    "                            case \"admin\":",
    "                                i = 0;",
    "                                break;",
    "                            case \"dispatch\":",
    "                                i = 1;",
    "                                break;",
    "                            case \"builder\":",
    "                                i = 2;",
    "                                break;",
    "                            case \"txproxy\":",
    "                                i = 3;",
    "                                break;",
    "                            case \"search\":",
    "                                i = 4;",
    "                                break;",
    "                            default:",
    "                                i = 5;",
    "                        }",
    "                        nodeTypes[i][1].push(instance);",
    "                    }",
    "",
    "                    $('#nodeListArea').css(\"display\", \"block\");",
    "",
    "                    let chain = {",
    "                        \"lag\": {},",
    "                        \"provider\": {}",
    "                    };",
    "",
    "                    let master_digest = {};",
    "                    let master_serial = {};",
    "                    let group_rate = {};",
    "                    let group_wsum_qlat = {};",
    "                    let group_est_qlat = {};",
    "                    let group_size = {};",
    "                    this.builderOrders = [];",
    "                    this.builderSizes = [];",
    "                    this.builderProperties = [];",
    "                    this.builderVectors = [];",
    "                    this.builderPartitions = 0;",
    "                    this.totalInstances = 0;",
    "                    this.uniqueHosts = [];",
    "                    this.totalConsumedMemory = 0;",
    "                    this.totalPhysicalMemory = 0;",
    "                    this.systemStatus = \"\";",
    "                    let thisInstanceID = \"\";",
    "",
    "                    for (const tp of nodeTypes) {",
    "                        const ntyp = tp[0];",
    "                        const nodeList = tp[1];",
    "                        for (var i=0; i < nodeList.length; i++) {",
    "                            let instance = nodeList[i];",
    "                            let cache = null;",
    "                            try {",
    "                                const nodeKey = instance[\"id\"];",
    "                                if (!(nodeKey in this.nodeCache)) {",
    "                                    this.nodeCache[nodeKey] = {",
    "                                        \"down\": 0,",
    "                                        \"s_in\": true,",
    "                                        \"clock\": new Clock(),",
    "                                        \"rateElem\": null,",
    "                                        \"qlatElem\": null,",
    "                                        \"ordrElem\": null,",
    "                                        \"sizeElem\": null,",
    "                                        \"mserElem\": null",
    "                                    };",
    "                                }",
    "",
    "                                cache = this.nodeCache[nodeKey];",
    "                                if( nodeKey === this_id ) {",
    "                                    cache.this_instance = true;",
    "                                    thisInstanceID = nodeKey;",
    "                                }",
    "                                else {",
    "                                    cache.this_instance = false;",
    "                                }",
    "                                cache.ntyp = ntyp;",
    "                                if (cache.ntyp == NodeType.Builder) {",
    "                                    cache.partition = this.builderPartitions++;",
    "                                }",
    "",
    "                                if (!(\"busy\" in cache)) {",
    "                                    cache.busy = 0;",
    "                                }",
    "",
    "                                if (instance[\"hc\"] != \"VGX/3\") {",
    "                                    const hc = instance[\"hc\"];",
    "                                    if (hc != null && hc.startsWith(\"503\")) {",
    "                                        cache.s_in = false;",
    "                                    }",
    "                                    else if (cache.down++ > 3) {",
    "                                        throw \"down\";",
    "                                    }",
    "                                    cache.hc = false;",
    "                                }",
    "                                else {",
    "                                    cache.hc = true;",
    "                                    cache.s_in = true;",
    "                                    cache.down = 0;",
    "                                }",
    "",
    "                                const matrix = instance[\"matrix\"];",
    "                                const matrixConsistent = instance[\"matrix-consistent\"];",
    "                                const matrixComplete = instance[\"matrix-complete\"];",
    "                                const matrixDegraded = instance[\"matrix-degraded\"];",
    "                                cache.rate = 0.0;",
    "                                cache.group = instance[\"group\"].toString();",
    "                                cache.group_rate = group_rate;",
    "                                cache.group_est_qlat = group_est_qlat;",
    "                                cache.group_size = group_size;",
    "",
    "                                const nodestatObj = instance[\"nodestat\"];",
    "                                if (nodestatObj && \"ready\" in nodestatObj) {",
    "                                    cache.ready = nodestatObj[\"ready\"];",
    "                                    cache.hostname = nodestatObj[\"host\"];",
    "                                    cache.ip = nodestatObj[\"ip\"];",
    "                                    cache.adminport = nodestatObj[\"adminport\"];",
    "                                    const providerKey = cache.ip + \":\" + cache.adminport;",
    "                                    if (providerKey in chain[\"provider\"]) {",
    "                                        cache.provider_id = chain[\"provider\"][providerKey];",
    "                                    }",
    "                                    else {",
    "                                        cache.provider_id = null;",
    "                                    }",
    "                                    if (providerKey in chain[\"lag\"]) {",
    "                                        cache.lag = chain[\"lag\"][providerKey];",
    "",
    "                                    }",
    "                                    else {",
    "                                        cache.lag = 0;",
    "                                    }",
    "",
    "                                    if (cache.lag > 30000) {",
    "                                        cache.busy = 5;",
    "                                    }",
    "                                    else {",
    "                                        cache.busy = 0;",
    "                                    }",
    "",
    "                                    cache.uptime = nodestatObj[\"uptime\"];",
    "                                    if (!cache.clock.running()) {",
    "                                        cache.clock.start(cache.uptime);",
    "                                    }",
    "",
    "                                    cache.pid = nodestatObj[\"pid\"];",
    "",
    "                                    cache.service_label = nodestatObj[\"service-label\"];",
    "",
    "                                    cache.idle_ms = nodestatObj[\"idle-ms\"];",
    "                                    cache.digest = nodestatObj[\"digest\"];",
    "                                    cache.serial = nodestatObj[\"master-serial\"];",
    "                                    if ((ntyp == NodeType.Builder || ntyp == NodeType.Generic) && !(cache.group in master_serial)) {",
    "                                        master_serial[cache.group] = cache.serial;",
    "                                        master_digest[cache.group] = cache.digest;",
    "                                    }",
    "                                    if (cache.group in master_serial) {",
    "                                        cache.master_serial = master_serial[cache.group];",
    "                                        cache.master_digest = master_digest[cache.group];",
    "                                    }",
    "                                    else {",
    "                                        cache.master_serial = cache.serial;",
    "                                        cache.master_digest = cache.digest;",
    "                                    }",
    "",
    "                                    // Subscribers",
    "                                    cache.subscriber_ids = []; // fill IDs during 2nd pass",
    "                                    let subs = nodestatObj[\"subscribers\"];",
    "                                    if (subs != null) {",
    "                                        for (const sub of subs) {",
    "                                            const subKey = sub[\"ip\"] + \":\" + sub[\"adminport\"];",
    "                                            const subLag = sub[\"lag_ms\"];",
    "                                            chain[\"lag\"][subKey] = subLag + cache.lag;",
    "                                            chain[\"provider\"][subKey] = nodeKey;",
    "                                        }",
    "                                    }",
    "                                    // TX Out",
    "                                    cache.txout = null;",
    "                                    if (nodestatObj[\"tx-out-halted\"]) {",
    "                                        cache.txout = -1;",
    "                                    }",
    "                                    else if (subs != null && subs.length > 0) {",
    "                                        cache.txout = nodestatObj[\"tx-out-rate\"];",
    "                                    }",
    "                                    // TX In filled during 2nd pass",
    "                                    cache.txin = null;",
    "                                    // Graph counts",
    "                                    cache.order = nodestatObj[\"graph-order\"];",
    "                                    cache.size = nodestatObj[\"graph-size\"];",
    "                                    cache.properties = nodestatObj[\"graph-properties\"];",
    "                                    cache.vectors = nodestatObj[\"graph-vectors\"];",
    "                                    cache.nrel = nodestatObj[\"graph-nrel\"];",
    "                                    cache.nvtx = nodestatObj[\"graph-nvtx\"];",
    "                                    cache.ndim = nodestatObj[\"graph-ndim\"];",
    "                                    cache.nkey = nodestatObj[\"graph-nkey\"];",
    "                                    cache.nval = nodestatObj[\"graph-nval\"];",
    "                                    if (cache.ntyp == NodeType.Builder) {",
    "                                        this.builderOrders.push( cache.order );",
    "                                        this.builderSizes.push( cache.size );",
    "                                        this.builderProperties.push( cache.properties );",
    "                                        this.builderVectors.push( cache.vectors );",
    "                                    }",
    "                                    this.totalInstances++;",
    "",
    "                                    const matrix_mode = nodestatObj[\"matrix\"][\"mode\"];",
    "                                    cache.matrix_mode = matrix_mode == 'dispatch' ? 'matrix' : matrix_mode;",
    "",
    "                                    cache.matrix_nch = nodestatObj[\"matrix\"][\"active-channels\"];",
    "                                    cache.matrix_maxch = nodestatObj[\"matrix\"][\"total-channels\"];",
    "",
    "                                    cache.clients = nodestatObj[\"connected-clients\"];",
    "                                    cache.maxclients = 1024; // TODO: get from server",
    "                                    cache.rate = nodestatObj[\"service-rate\"];",
    "                                    cache.qlat95 = nodestatObj[\"service-95th-ms\"];",
    "                                    //cache.qlatAll = null;",
    "                                    //cache.rate = Math.round( Math.random() ) * 100;",
    "                                    //if (nodeKey == \"S01\" || nodeKey == \"B01\" ) {",
    "                                    //    cache.s_in = false;",
    "                                    //}",
    "                                    // Group RPS",
    "                                    if (cache.s_in) {",
    "                                        if (!(cache.group in group_rate)) {",
    "                                            group_rate[cache.group] = 0.0;",
    "                                            group_wsum_qlat[cache.group] = 0.0;",
    "                                            group_est_qlat[cache.group] = 0.0;",
    "                                        }",
    "                                        group_rate[cache.group] += cache.rate;",
    "                                        group_wsum_qlat[cache.group] += cache.qlat95 * cache.rate;",
    "                                        if (group_rate[cache.group] > 0) {",
    "                                            group_est_qlat[cache.group] = group_wsum_qlat[cache.group] / group_rate[cache.group];",
    "                                        }",
    "                                    }",
    "",
    "                                    cache.cpu = nodestatObj[\"cpu\"];",
    "                                    cache.mem_tot = nodestatObj[\"memory-total\"];",
    "                                    cache.mem_proc = nodestatObj[\"memory-process\"];",
    "                                    cache.mem_avail = nodestatObj[\"memory-available\"];",
    "                                    //cache.mem_tot = 128 * (1<<30);",
    "                                    //cache.mem_proc =  Math.random() * 128 * (1<<30);",
    "                                    //cache.mem_avail = cache.mem_tot - cache.mem_proc;",
    "                                    cache.durable = nodestatObj[\"durable\"];",
    "                                    cache.durable_txlog = nodestatObj[\"durable-txlog\"];",
    "                                    cache.durable_max_txlog = nodestatObj[\"durable-max-txlog\"];",
    "                                    cache.persisting = nodestatObj[\"snapshot-writing\"];",
    "                                    cache.snapshot_age = nodestatObj[\"snapshot-age\"];",
    "                                    cache.readonly = nodestatObj[\"readonly\"];",
    "                                    cache.local_only = nodestatObj[\"local-only\"];",
    "                                    cache.matrix = matrix;",
    "                                    cache.matrix_consistent = matrixConsistent;",
    "                                    cache.matrix_complete = matrixComplete;",
    "                                    cache.matrix_degraded = matrixDegraded;",
    "                                }",
    "                                else {",
    "                                    if (cache.busy < 5) {",
    "                                        cache.busy++;",
    "                                    }",
    "                                }",
    "",
    "                                if (!(cache.group in group_size)) {",
    "                                    group_size[cache.group] = 0;",
    "                                }",
    "                                group_size[cache.group]++;",
    "",
    "                            }",
    "                            catch (error) {",
    "                                cache.this_instance = false;",
    "                                cache.group_rate = {};",
    "                                cache.group_est_qlat = {};",
    "                                //cache.group_size = {};",
    "                                cache.ready = false;",
    "                                cache.lag = 0;",
    "                                cache.order = 0;",
    "                                cache.size = 0;",
    "                                cache.properties = 0;",
    "                                //cache.partition = -1;",
    "                                cache.vectors = 0;",
    "                                cache.nrel = 0;",
    "                                cache.nvtx = 0;",
    "                                cache.ndim = 0;",
    "                                cache.nkey = 0;",
    "                                cache.nval = 0;",
    "                                //cache.matrix_mode = null;",
    "                                cache.cpu = \"\";",
    "                                cache.mem_tot = 0;",
    "                                cache.mem_proc = 0;",
    "                                cache.mem_avail = 0;",
    "                                cache.matrix_nch = 0;",
    "                                cache.matrix_maxch = 0;",
    "                                cache.clients = 0;",
    "                                cache.rate = 0;",
    "                                cache.qlat95 = 0;",
    "                                cache.qlatAll = null;",
    "                                cache.clock.stop();",
    "                                cache.uptime = -1;",
    "                                cache.pid = -1;",
    "                                cache.service_label = null;",
    "                                cache.digest = null;",
    "                                cache.serial = 0;",
    "                                cache.txin = -1;",
    "                                cache.txout = -1;",
    "                                cache.master_digest = {};",
    "                                cache.master_serial = {};",
    "                                cache.durable = false;",
    "                                cache.durable_txlog = 0;",
    "                                cache.durable_max_txlog = 0;",
    "                                cache.persisting = false;",
    "                                cache.snapshot_age = -1;",
    "                                cache.readonly = false;",
    "                                cache.local_only = 0;",
    "                                cache.matrix = null;",
    "                                cache.matrix_consistent = false;",
    "                                cache.matrix_complete = false;",
    "                                cache.matrix_degraded = true;",
    "                            }",
    "                        }",
    "                    }",
    "",
    "                    // 2nd pass",
    "                    for (const instance of instances) {",
    "                        const nodeKey = instance[\"id\"];",
    "                        let cache = this.nodeCache[nodeKey];",
    "                        cache.id = nodeKey;",
    "                        const nodestatObj = instance[\"nodestat\"];",
    "                        if (nodestatObj) {",
    "                            // TX In",
    "                            if (nodestatObj[\"tx-in-halted\"]) {",
    "                                cache.txin = -1;",
    "                            }",
    "                            const providerKey = nodestatObj[\"ip\"] + \":\" + nodestatObj[\"adminport\"];",
    "                            if (providerKey in chain[\"provider\"]) {",
    "                                const pid = chain[\"provider\"][providerKey];",
    "                                let pCache = this.nodeCache[pid];",
    "                                pCache.subscriber_ids.push(cache.id);",
    "                                cache.provider_id = pid;",
    "                                if (cache.txin == null && nodestatObj[\"txport\"] > 0)  {",
    "                                    cache.txin = nodestatObj[\"tx-in-rate\"];",
    "                                }",
    "                            }",
    "                            else {",
    "                                cache.provider_id = null;",
    "                            }",
    "                        }",
    "                    }",
    "",
    "                    // 3rd pass w/render",
    "                    if (!this.frozen) {",
    "                        // Descriptor Name",
    "                        let descriptorName = \"System Dashboard (\" + thisInstanceID + \") - \" + (descriptor ? descriptor[\"name\"] : \"?\");",
    "                        $('#descriptorName').html( descriptorName );",
    "                        this.setTitleLink( $('#descriptorName'), window.location.hostname, window.location.port, \"vgx/builtin/system_overview\", \"Open System Overview (JSON)\" );",
    "",
    "                        let topology = descriptor[\"topology\"];",
    "                        let canHaveSubs = {};",
    "                        if (topology != null) {",
    "                            canHaveSubs = this.getCanHaveSubs(topology['transaction']);",
    "                        }",
    "",
    "                        $('.nodeRow').remove();",
    "                        this.idLabelSize = 2;",
    "                        this.currentGroupInstances = [];",
    "                        this.currentGroup = -1;",
    "                        this.currentGroupTitle = null;",
    "                        this.prevGroup = -1;",
    "                        let uniqueHostNames = {};",
    "                        let uniqueCPU = {};",
    "                        let warnings = {};",
    "                        for (const instance of instances) {",
    "                            const host = instance[\"hostname\"];",
    "                            const hport = instance[\"adminport\"];",
    "                            const nodeKey = instance[\"id\"];",
    "                            let cache = this.nodeCache[nodeKey];",
    "                            cache.num_partitions = this.builderPartitions;",
    "                            cache.canHaveSubs = canHaveSubs[nodeKey];",
    "                            this.totalConsumedMemory += cache.mem_proc;",
    "                            if (!(host in uniqueHostNames)) {",
    "                                uniqueHostNames[host] = 1;",
    "                                this.uniqueHosts.push(host);",
    "                                this.totalPhysicalMemory += cache.mem_tot;",
    "                            }",
    "                            objCount += cache.order + cache.size + cache.properties + cache.vectors;",
    "                            /*if(Math.random() < 0.05) {",
    "                                if(Math.random() < 0.5) {",
    "                                    cache.cpu = \"TEST CPU #1\";",
    "                                }",
    "                                else {",
    "                                    cache.cpu = \"TEST CPU #2 A1234 B5678\";",
    "                                }",
    "                            }*/",
    "                            if (cache.cpu != null && !(cache.cpu in uniqueCPU)) {",
    "                                uniqueCPU[cache.cpu] = 1;",
    "                            }",
    "",
    "                            const nodestatObj = instance[\"nodestat\"];",
    "                            const stat = this.getNodeStatus(cache.ntyp, nodestatObj, cache);",
    "                            if (NodeStatus.isWarning( stat )) {",
    "                                if (!(stat in warnings)) {",
    "                                    warnings[stat] = 0;",
    "                                }",
    "                                warnings[stat]++;",
    "                            }",
    "                            this.renderRow(nodeKey, cache.ntyp, host, hport, stat, cache);",
    "                        }",
    "",
    "                        this.nextGroup(1000000, {",
    "                            'group_rate': group_rate,",
    "                            'group_est_qlat': group_est_qlat,",
    "                            'group_size': group_size",
    "                        });",
    "",
    "                        let sysinfonameColor = \"dark2\";",
    "                        let sysinfoColor = \"dark1\";",
    "                        StatusColor.update( $('.systemname'), sysinfonameColor );",
    "                        StatusColor.update( $('.sysinfoname'), sysinfonameColor );",
    "                        StatusColor.update( $('.sysinfo'), sysinfoColor );",
    "",
    "                        function sumValues( A ) {",
    "                            return A.reduce((acc,val) => acc+val, 0).toLocaleString(\"en-US\");",
    "                        }",
    "",
    "                        function partitionValues( title, A ) {",
    "                            return title + \"\\n\\n\" + A.map((val, idx) => `Part ${idx+1}: ${val.toLocaleString(\"en-US\")}`).join(\"\\n\");",
    "                        }",
    "",
    "                        const plural = this.uniqueHosts.length > 1 ? \"s\" : \"\";",
    "",
    "                        // Status",
    "                        if (Reflect.ownKeys(warnings).length == 0) {",
    "                            this.systemStatus = \"OK\";",
    "                            StatusColor.update( $('#systemStatus'), \"green\" );",
    "                        }",
    "                        else {",
    "                            let wCount = 0;",
    "                            let wDetail = [];",
    "                            for( const key of Reflect.ownKeys(warnings)) {",
    "                                const cnt = warnings[key];",
    "                                wDetail.push( \"\" + key.description + \": \" + cnt );",
    "                                wCount += cnt;",
    "                            }",
    "                            this.systemStatus = \"Check \" + wCount + \" warnings\";",
    "                            StatusColor.update( $('#systemStatus'), \"orange1\" );",
    "                            const statusInfo = wDetail.join( \"\\n\" );",
    "                            $('#systemStatus').parent().prop(\"title\", statusInfo);",
    "                        }",
    "                        $('#systemStatus').html( this.systemStatus );",
    "",
    "                        // Instances",
    "                        $('#totalInstances').html( this.totalInstances + \" (\" + this.uniqueHosts.length + \" host\" + plural + \")\" );",
    "                        $('#totalInstances').parent().prop(\"title\", \"Hosts\\n\\n\" + this.uniqueHosts.join(\"\\n\"));",
    "",
    "                        // Partitions",
    "                        $('#builderPartitions').html( this.builderPartitions );",
    "",
    "                        // Vertices",
    "                        $('#builderSumOrder').html( sumValues(this.builderOrders) );",
    "                        $('#builderSumOrder').parent().prop(\"title\", partitionValues(\"Vertices\", this.builderOrders));",
    "",
    "                        // Arcs",
    "                        $('#builderSumSize').html( sumValues(this.builderSizes) );",
    "                        $('#builderSumSize').parent().prop(\"title\", partitionValues(\"Arcs\", this.builderSizes));",
    "",
    "                        // Properties",
    "                        $('#builderSumProperties').html( sumValues(this.builderProperties) );",
    "                        $('#builderSumProperties').parent().prop(\"title\", partitionValues(\"Properties\", this.builderProperties));",
    "",
    "                        // Vectors",
    "                        $('#builderSumVectors').html( sumValues(this.builderVectors) );",
    "                        $('#builderSumVectors').parent().prop(\"title\", partitionValues(\"Vectors\", this.builderVectors));",
    "",
    "                        // CPU",
    "                        let cpu;",
    "                        if (Object.keys(uniqueCPU).length == 1) {",
    "                            cpu = Object.keys(uniqueCPU)[0];",
    "                            StatusColor.update( $('#cpuBrand'), sysinfoColor );",
    "                        }",
    "                        else {",
    "                            cpu = \"Mixed (\" + Object.keys(uniqueCPU).length + \") \" + Object.keys(uniqueCPU)[0];",
    "                            StatusColor.update( $('#cpuBrand'), \"orange1\" );",
    "                        }",
    "                        $('#cpuBrand').html(cpu);",
    "                        let cpuTypeList = Object.keys(uniqueCPU).join(\"\\n\");",
    "                        $('#cpuBrand').parent().prop(\"title\", cpuTypeList);",
    "",
    "                        // Memory",
    "                        const totalConsumedGiB = this.totalConsumedMemory / Math.pow(2,30);",
    "                        const totalPhysicalGiB = this.totalPhysicalMemory / Math.pow(2,30);",
    "                        $('#totalMemory').html( totalConsumedGiB.toFixed(1) + \" GiB (\" + totalPhysicalGiB.toFixed(0) + \" GiB)\" );",
    "                        let memUsageInfo = \"Total Used: \" + totalConsumedGiB.toFixed(1) + \" GiB\\nTotal Physical: \"  + totalPhysicalGiB.toFixed(0) + \" GiB\";",
    "                        $('#totalMemory').parent().prop(\"title\", memUsageInfo);",
    "                        const memRatio = this.totalConsumedMemory / this.totalPhysicalMemory;",
    "                        if (memRatio > Nodes.memoryLowThreshold) {",
    "                            let color;",
    "                            if (memRatio > Nodes.memoryCriticalThreshold) {",
    "                                color = \"orange6\";",
    "                            }",
    "                            else if (memRatio > Nodes.memoryHighThreshold) {",
    "                                color = \"orange4\";",
    "                            }",
    "                            else {",
    "                                color = \"orange2\";",
    "                            }",
    "                            StatusColor.update( $('#totalMemory'), color );",
    "                        }",
    "",
    "",
    "                        // Compute width of sysinfo panel",
    "                        let maxSysinfonameSz = 8;",
    "                        $('.sysinfoname').each(function () {",
    "                            let sz = $(this).html().length + 1;",
    "                            maxSysinfonameSz = Math.max(maxSysinfonameSz, sz);",
    "                        });",
    "                        maxSysinfonameSz = Math.min(maxSysinfonameSz, 40);",
    "                        $('.sysinfoname').css(\"width\", (maxSysinfonameSz+2) + \"ch\");",
    "",
    "                        let maxSysinfoSz = 16;",
    "                        $('.sysinfo').each(function () {",
    "                            let sz = $(this).html().length + 1;",
    "                            maxSysinfoSz = Math.max(maxSysinfoSz, sz);",
    "                        });",
    "                        maxSysinfoSz = Math.min(maxSysinfoSz, 40);",
    "                        $('.sysinfo').css(\"width\", maxSysinfoSz + \"ch\");",
    "",
    "                        // Make sysinfo values copyable on click",
    "                        $('#descriptorName').mouseup(CommonHeader.copySelectionToClipboard);",
    "                        $('#systemStatus').mouseup(CommonHeader.copySelectionToClipboard);",
    "                        $('#totalInstances').mouseup(CommonHeader.copySelectionToClipboard);",
    "                        $('#builderPartitions').mouseup(CommonHeader.copySelectionToClipboard);",
    "                        $('#builderSumOrder').mouseup({ 'asint': true }, CommonHeader.copySelectionToClipboard);",
    "                        $('#builderSumSize').mouseup({ 'asint': true }, CommonHeader.copySelectionToClipboard);",
    "                        $('#builderSumProperties').mouseup({ 'asint': true }, CommonHeader.copySelectionToClipboard);",
    "                        $('#builderSumVectors').mouseup({ 'asint': true }, CommonHeader.copySelectionToClipboard);",
    "                        $('#cpuBrand').mouseup(CommonHeader.copySelectionToClipboard);",
    "                        $('#totalMemory').mouseup(CommonHeader.copySelectionToClipboard);",
    "",
    "",
    "                    }",
    "",
    "",
    "                    if (objCount != this.objCount) {",
    "                        this.refreshSoon = true;",
    "                        this.objCount = objCount;",
    "                    }",
    "                    else {",
    "                        this.refreshSoon = false;",
    "                    }",
    "",
    "                    $('#nodeList').css( \"visibility\", \"visible\" );",
    "                    $('.nodeListHeader').css( \"visibility\", \"visible\" );",
    "",
    "                    if (initialPageLoad || this.pageDown) {",
    "                        showWelcomeInfo();",
    "                        $('#descriptor').css(\"visibility\", \"visible\");",
    "                        initialPageLoad = false;",
    "                        this.pageDown = false;",
    "                        /*",
    "                        let descH = $('#descriptorArea').height();",
    "                        let descW = $('#descriptor').parent().width();",
    "                        let pageW = $('.nodeListHeader').width();",
    "                        $('#recentAction').css(\"height\", (descH) + \"px\");",
    "                        $('#recentAction').css(\"width\", (pageW - descW - 58) + \"px\");",
    "                        */",
    "                    }",
    "                    $('#recentAction').off(\"mouseup\");",
    "                    $('#recentAction').on(\"mouseup\", function (eventObj) {",
    "                        showWelcomeInfo();",
    "                        $('#descriptor').css(\"visibility\", \"visible\");",
    "                    });",
    "",
    "                    repeatedActionCounter = 0;",
    "",
    "                    lastAction = null;",
    "",
    "                    this.lastRender = new Date();",
    "",
    "                }",
    "                catch (error) {",
    "                    $('#descriptorName').html( error != null ? error : \"internal error\" );",
    "                    $('.nodeRow').remove();",
    "                    $('#nodeList').css( \"visibility\", \"hidden\" );",
    "                    $('.nodeListHeader').css( \"visibility\", \"hidden\" );",
    "                }",
    "                finally {",
    "                }",
    "            }.bind(this)).fail(function (xhr, txt, err) {",
    "                try {",
    "                    $('.nodeRow').remove();",
    "                    $('#nodeList').css( \"visibility\", \"hidden\" );",
    "                    $('.nodeListHeader').css( \"visibility\", \"hidden\" );",
    "                    $('#descriptorSysinfoArea').addClass( \"hidearea\" );",
    "                    const goneMessageList = [",
    "                        `${window.location.hostname}:${window.location.port} is offline`,",
    "                        `Last seen: ${this.lastRender.toLocaleString(\"en-US\")}`",
    "                    ];",
    "                    $('#recentAction').val(goneMessageList.join(\"\\n\"));",
    "                    this.pageDown = true;",
    "                }",
    "                catch(error) {",
    "                    $('#descriptorName').html( error );",
    "                }",
    "            }.bind(this));",
    "",
    "        }",
    "",
    "        refreshCounts() {",
    "            let uri = \"/vgx/builtin/system_counts?idlist\";",
    "            let sep = \"=\";",
    "            for (const rid in this.nodeCache) {",
    "                if (this.nodeCache[rid].hc) {",
    "                    uri += sep + rid;",
    "                    sep = \",\";",
    "                }",
    "            }",
    "            $.get(uri, function (data, textStatus, jqXHR) {",
    "                try {",
    "                    const response = data[\"response\"];",
    "                    const instances = response[\"instances\"];",
    "                    for (const instance of instances) {",
    "                        try {",
    "                            const id = instance[\"id\"];",
    "                            const objcnt = instance[\"objcnt\"];",
    "                            let cache = this.nodeCache[id];",
    "                            cache.order = objcnt[\"order\"];",
    "                            cache.size = objcnt[\"size\"];",
    "                            cache.properties = objcnt[\"properties\"];",
    "                            cache.vectors = objcnt[\"vectors\"];",
    "                            cache.serial = objcnt[\"master-serial\"];",
    "                            this.renderOrder(cache);",
    "                            this.renderSize(cache);",
    "                            this.renderSerial(cache);",
    "                        }",
    "                        catch (error) {",
    "                        }",
    "                    }",
    "                }",
    "                catch (error) {",
    "                }",
    "                finally {",
    "                }",
    "            }.bind(this));",
    "        }",
    "",
    "        refreshRates() {",
    "            let uri = \"/vgx/builtin/system_rates?idlist\";",
    "            let sep = \"=\";",
    "            for (const rid in this.nodeCache) {",
    "                if (this.nodeCache[rid].hc) {",
    "                    uri += sep + rid;",
    "                    sep = \",\";",
    "                }",
    "            }",
    "            $.get(uri, function (data, textStatus, jqXHR) {",
    "                try {",
    "                    const response = data[\"response\"];",
    "                    const instances = response[\"instances\"];",
    "                    let skip = false;",
    "                    for (const instance of instances) {",
    "                        const id = instance[\"id\"];",
    "                        let cache = this.nodeCache[id];",
    "                        if (cache.group_rate != null && cache.group != null) {",
    "                            cache.group_rate[cache.group] = 0.0;",
    "                        }",
    "                    }",
    "                    for (const instance of instances) {",
    "                        try {",
    "                            const id = instance[\"id\"];",
    "                            let cache = this.nodeCache[id];",
    "                            let rates = instance[\"rates\"];",
    "                            const matrix = instance[\"matrix\"];",
    "                            const clients = instance[\"clients\"];",
    "                            if (!rates || !matrix || !clients) {",
    "                                skip = true;",
    "                                break;",
    "                            }",
    "                            cache.matrix_nch = matrix[\"active-channels\"];",
    "                            cache.matrix_maxch = matrix[\"total-channels\"];",
    "                            cache.clients = clients[\"connected\"];",
    "                            /*",
    "                            if(Math.random() > 0.0 ){",
    "                                cache.clients = Math.round( 1024 * Math.random() );",
    "                                cache.matrix_nch = Math.round( cache.matrix_maxch * Math.random() );",
    "                            }",
    "                            */",
    "                            cache.rate = rates[\"rate\"];",
    "                            cache.qlat95 = rates[\"95.0\"];",
    "                            cache.qlatAll = rates;",
    "                            if (cache.group_rate != null && cache.group != null && cache.s_in) {",
    "                                cache.group_rate[cache.group] += cache.rate;",
    "                            }",
    "                        }",
    "                        catch (error) {",
    "                        }",
    "                    }",
    "                    if (!skip) {",
    "                        for (const instance of instances) {",
    "                            try {",
    "                                const id = instance[\"id\"];",
    "                                let cache = this.nodeCache[id];",
    "                                this.renderIOSockets(cache)",
    "                                this.renderQueryLoadBalance(cache);",
    "                                this.renderQueryRate(cache);",
    "                                this.renderQueryLatency(cache);",
    "                            }",
    "                            catch (error) {",
    "                            }",
    "                        }",
    "                    }",
    "                }",
    "                catch (error) {",
    "                }",
    "                finally {",
    "                }",
    "            }.bind(this));",
    "        }",
    "",
    "        freeze() {",
    "            this.frozen = true;",
    "        }",
    "",
    "        unfreeze() {",
    "            this.frozen = false;",
    "        }",
    "    }",
    "",
    "    class Page {",
    "",
    "        refresher = null;",
    "        freeze = false;",
    "        rendering = false;",
    "        static refreshTimeoutInterval = 333;",
    "        static fullRefreshCountdown = 12;",
    "        static ratesRefreshCountdown = 3;",
    "",
    "        constructor(nodes) {",
    "            this.nodes = nodes;",
    "            $('#descriptorName').html(\"Loading...\");",
    "            $('.nodeListHeader').css(\"visibility\", \"hidden\");",
    "        }",
    "",
    "",
    "        refresh() {",
    "            if (!this.freeze) {",
    "                this.rendering = true;",
    "                if ((--Page.fullRefreshCountdown) <= 0) {",
    "                    this.nodes.refreshFull();",
    "                    Page.fullRefreshCountdown = 12;",
    "                    Page.ratesRefreshCountdown = 3;",
    "                }",
    "                else {",
    "                    if (this.nodes.refreshSoon) {",
    "                        this.nodes.refreshCounts();",
    "                    }",
    "                    if ((--Page.ratesRefreshCountdown) <= 0) {",
    "                        this.nodes.refreshRates();",
    "                        Page.ratesRefreshCountdown = 3;",
    "                    }",
    "                }",
    "                this.rendering = false;",
    "            }",
    "",
    "            clearTimeout(this.refresher);",
    "            this.refresher = setTimeout(this.refresh.bind(this), Page.refreshTimeoutInterval);",
    "        }",
    "",
    "",
    "        pause() {",
    "            this.freeze = true;",
    "            this.nodes.freeze();",
    "        }",
    "",
    "",
    "        isPaused() {",
    "            return this.freeze;",
    "        }",
    "",
    "",
    "        resume() {",
    "            this.freeze = false;",
    "            this.nodes.unfreeze();",
    "            Page.fullRefreshCountdown = 0;",
    "        }",
    "",
    "",
    "        busy() {",
    "            return this.rendering;",
    "        }",
    "",
    "",
    "        stop() {",
    "            if (this.refresher != null) {",
    "                clearInterval(this.refresher);",
    "                this.refresher = null;",
    "            }",
    "        }",
    "",
    "",
    "        start() {",
    "            this.stop();",
    "            this.refresher = setTimeout(this.refresh.bind(this), Page.refreshTimeoutInterval);",
    "        }",
    "    }",
    "",
    "",
    "    function main() {",
    "",
    "        let nodes = new Nodes();",
    "        nodes.refreshFull();",
    "",
    "        page = new Page(nodes);",
    "        page.start();",
    "",
    "        document.addEventListener(\"keydown\", function (eventObj) {",
    "            //let page = this;",
    "            if (eventObj.shiftKey == true && !page.isPaused()) {",
    "                showActionButtons();",
    "            }",
    "            if (eventObj.altKey == true) {",
    "                bypassDialog();",
    "            }",
    "        });",
    "        //}.bind(page));",
    "",
    "        document.addEventListener(\"keyup\", function (eventObj) {",
    "            //let page = this;",
    "            if (eventObj.shiftKey == false && page.isPaused()) {",
    "                hideActionButtons();",
    "            }",
    "            else if (eventObj.altKey == false) {",
    "                requireDialog();",
    "            }",
    "        });",
    "        //}.bind(page));",
    "",
    "",
    "    }",
    "",
    "",
    "    function animateSoftBlink() {",
    "        $('.softblink').fadeOut(500);",
    "        $('.softblink').fadeIn(200);",
    "    }",
    "",
    "    setInterval(animateSoftBlink, 2000);",
    "",
    "    let initialPageLoad = true;",
    "",
    "    CommonHeader.ready(main, 3);",
    "</script>",
    "",
    0
};



const char *VGX_BUILTIN_CSS_vgx[] = {
    "/******************************************************************************",
    " *",
    " * VGX Server",
    " * Distributed engine for plugin-based graph and vector search",
    " *",
    " * Module:  vgx",
    " * File:    vgx.css",
    " * Author:  Stian Lysne <...>",
    " *",
    " * Copyright Â© 2025 Rakuten, Inc.",
    " *",
    " * Licensed under the Apache License, Version 2.0 (the \"License\");",
    " * you may not use this file except in compliance with the License.",
    " * You may obtain a copy of the License at",
    " *",
    " *     http://www.apache.org/licenses/LICENSE-2.0",
    " *",
    " * Unless required by applicable law or agreed to in writing, software",
    " * distributed under the License is distributed on an \"AS IS\" BASIS,",
    " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
    " * See the License for the specific language governing permissions and",
    " * limitations under the License.",
    " *",
    " *****************************************************************************/",
    "",
    "* {",
    "  box-sizing: border-box;",
    "}",
    "",
    ".modal {",
    "  display: none;",
    "  position: fixed;",
    "  z-index: 1000;",
    "  top: 0;",
    "  left: 0;",
    "  height: 100%;",
    "  width: 100%;",
    "  background: rgba( 255, 255, 255, 0.7 ) url('loader.gif') 88px 400px no-repeat;",
    "}",
    "",
    "",
    "#busymsg {",
    "  position: relative;",
    "  top: 455px;",
    "  left: 206px;",
    "  font-size: 200%;",
    "}",
    "",
    ".disable_select {",
    "  user-select: none; /* supported by Chrome and Opera */",
    "  -webkit-user-select: none; /* Safari */",
    "  -khtml-user-select: none; /* Konqueror HTML */",
    "  -moz-user-select: -moz-none; /* Firefox */",
    "  -ms-user-select: none; /* Internet Explorer/Edge */",
    "}",
    "",
    ".enable_select {",
    "  user-select: all; /* supported by Chrome and Opera */",
    "  -webkit-user-select: all; /* Safari */",
    "  -khtml-user-select: all; /* Konqueror HTML */",
    "  -moz-user-select: all; /* Firefox */",
    "  -ms-user-select: all; /* Internet Explorer/Edge */",
    "  cursor: copy;",
    "}",
    "",
    "#logo {",
    "  padding-bottom: 8px;",
    "  padding-right: 20px;",
    "  padding-left: 0px;",
    "}",
    "",
    "#logoimg {",
    "  height: 60px;",
    "  cursor: pointer;",
    "  transition: transform 5s;",
    "}",
    "",
    "#logoimg:hover {",
    "  transform: scale(1.05) translateX(4px);",
    "}",
    "",
    "#logoimg:active {",
    "  transform: scale(0) translateX(0px);",
    "}",
    "",
    "",
    ".container {",
    "  overflow: hidden;",
    "}",
    "",
    ".container > div {",
    "  margin: 0px 40px 20px 0;",
    "}",
    "",
    "body {",
    "  display: none;",
    "  margin: 12px;",
    "  font-family: Cambria;",
    "  overflow: auto;",
    "  opacity: 0.0;",
    "  transition: opacity 250ms ease-in, transform 125ms ease-in;",
    "}",
    "",
    "body.ready {",
    "  opacity: 1.0;",
    "}",
    "",
    "body.leavepage {",
    "  opacity: 0.0;",
    "}",
    "",
    "td {",
    "  font-size: 100%;",
    "  padding-left: 5px;",
    "  padding-right: 5px;",
    "}",
    "",
    "#commonHeaderTable {",
    "  font-size: 120%;",
    "  white-space: nowrap;",
    "}",
    "",
    "#commonFooterDiv {",
    "  font-size: 70%;",
    "  color: #A0A0A0;",
    "}",
    "",
    ".highlight .highlightable {",
    "  font-weight: bold;",
    "  background-color: #ffffff;",
    "  border-style: ridge;",
    "}",
    "",
    ".highlight td {",
    "  background-color: #F0F0F0;",
    "}",
    "",
    ".hoverlight td {",
    "  background-color: #F8F8F8;",
    "}",
    "",
    "button {",
    "  font-family: Cambria;",
    "  font-weight: bold;",
    "  background: #E0E0E0;",
    "  border-radius: 5px;",
    "  border-width: 2px;",
    "  border-style: groove;",
    "  border-color: #F8F8F8;",
    "}",
    "",
    "button:hover {",
    "  background: #F0F0F0;",
    "}",
    "",
    "button:active {",
    "  background: #E0E0E0;",
    "  border: inset 2px;",
    "}",
    "",
    "select {",
    "  font-family: Consolas, monospace;",
    "  border: solid;",
    "  border-color: #A0A0A0;",
    "  border-width: 1px;",
    "  border-radius: 3px;",
    "  background: #F0F0F0;",
    "  padding-left: 2px;",
    "  height: 22px;",
    "}",
    "",
    "",
    "input {",
    "  font-family: Cambria;",
    "  border: solid;",
    "  border-color: #A0A0A0;",
    "  border-width: 1px;",
    "  border-radius: 3px;",
    "  padding-left: 5px;",
    "}",
    "",
    "textarea {",
    "  border: solid;",
    "  border-color: #A0A0A0;",
    "  border-width: 1px;",
    "  border-radius: 3px;",
    "  padding-left: 5px;",
    "}",
    "",
    "#messageArea {",
    "  /*font-family: cambria;*/",
    "  font-size: 90%;",
    "  color: #303030;",
    "  padding-top: 25px;",
    "  max-width: 800px;",
    "  overflow-x: auto;",
    "  white-space: pre-wrap;",
    "  white-space: -moz-pre-wrap;",
    "  white-space: -pre-wrap;",
    "  white-space: -o-pre-wrap;",
    "  word-wrap: break-word;",
    "}",
    "",
    ".success {",
    "  color: #007050;",
    "}",
    "",
    ".error {",
    "  color: #FF2000;",
    "}",
    "",
    "#errortext {",
    "  font-size: 80%;",
    "  /*font-family: cambria;*/",
    "  color: #FF2000;",
    "  overflow-x: auto;",
    "  white-space: pre-wrap;",
    "  white-space: -moz-pre-wrap;",
    "  white-space: -pre-wrap;",
    "  white-space: -o-pre-wrap;",
    "  word-wrap: break-word;",
    "}",
    "",
    0
};



const char *VGX_BUILTIN_JS_boxstate_js[] = {
    "/******************************************************************************",
    " *",
    " * VGX Server",
    " * Distributed engine for plugin-based graph and vector search",
    " *",
    " * Module:  vgx",
    " * File:    boxstate.js",
    " * Author:  Stian Lysne <...>",
    " *",
    " * Copyright Â© 2025 Rakuten, Inc.",
    " *",
    " * Licensed under the Apache License, Version 2.0 (the \"License\");",
    " * you may not use this file except in compliance with the License.",
    " * You may obtain a copy of the License at",
    " *",
    " *     http://www.apache.org/licenses/LICENSE-2.0",
    " *",
    " * Unless required by applicable law or agreed to in writing, software",
    " * distributed under the License is distributed on an \"AS IS\" BASIS,",
    " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
    " * See the License for the specific language governing permissions and",
    " * limitations under the License.",
    " *",
    " *****************************************************************************/",
    "",
    "class BoxState {",
    "",
    "    static stateColors = {",
    "        \"opt\": {",
    "            \"bg\": \"#239b56\",",
    "            \"fg\": \"#eafaf1\"",
    "        },",
    "        \"att\": {",
    "            \"bg\": \"#f1c40f\",",
    "            \"fg\": \"#000000\"",
    "        },",
    "        \"exc\": {",
    "            \"bg\": \"#c0392b\",",
    "            \"fg\": \"#f9ebea\"",
    "        },",
    "        \"ntr\": {",
    "            \"bg\": \"#4d5656\",",
    "            \"fg\": \"#eaeded\"",
    "        },",
    "        \"frz\": {",
    "            \"bg\": \"#3498db\",",
    "            \"fg\": \"#d6eaf8\"",
    "        },",
    "        \"lit\": {",
    "            \"bg\": \"#e0e0e0\",",
    "            \"fg\": \"#303030\"",
    "        }",
    "    };",
    "",
    "    static setStateColors(selector, colors) {",
    "        let obj;",
    "        if (typeof selector == \"object\") {",
    "            obj = selector;",
    "        }",
    "        else {",
    "            obj = $(selector);",
    "        }",
    "        obj.css( \"background-color\", colors[\"bg\"] );",
    "        obj.css( \"color\", colors[\"fg\"] );",
    "    }",
    "",
    "    static optimal(selector) {",
    "        BoxState.setStateColors(selector, BoxState.stateColors[\"opt\"]);",
    "    }",
    "",
    "    static attention(selector) {",
    "        BoxState.setStateColors(selector, BoxState.stateColors[\"att\"]);",
    "    }",
    "",
    "    static exception(selector) {",
    "        BoxState.setStateColors(selector, BoxState.stateColors[\"exc\"]);",
    "    }",
    "",
    "    static neutral(selector) {",
    "        BoxState.setStateColors(selector, BoxState.stateColors[\"ntr\"]);",
    "    }",
    "",
    "    static frozen(selector) {",
    "        BoxState.setStateColors(selector, BoxState.stateColors[\"frz\"]);",
    "    }",
    "",
    "    static light(selector) {",
    "        BoxState.setStateColors(selector, BoxState.stateColors[\"lit\"]);",
    "    }",
    "",
    "}",
    "",
    0
};



const char *VGX_BUILTIN_JS_clock_js[] = {
    "/******************************************************************************",
    " *",
    " * VGX Server",
    " * Distributed engine for plugin-based graph and vector search",
    " *",
    " * Module:  vgx",
    " * File:    clock.js",
    " * Author:  Stian Lysne <...>",
    " *",
    " * Copyright Â© 2025 Rakuten, Inc.",
    " *",
    " * Licensed under the Apache License, Version 2.0 (the \"License\");",
    " * you may not use this file except in compliance with the License.",
    " * You may obtain a copy of the License at",
    " *",
    " *     http://www.apache.org/licenses/LICENSE-2.0",
    " *",
    " * Unless required by applicable law or agreed to in writing, software",
    " * distributed under the License is distributed on an \"AS IS\" BASIS,",
    " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
    " * See the License for the specific language governing permissions and",
    " * limitations under the License.",
    " *",
    " *****************************************************************************/",
    "",
    "class Clock {",
    "",
    "    constructor() {",
    "        this.refresher = null;",
    "    }",
    "",
    "",
    "    setElement(elem) {",
    "        this.elem = elem;",
    "    }",
    "",
    "",
    "    running() {",
    "        return this.refresher != null;",
    "    }",
    "",
    "",
    "    start(reference) {",
    "        if (this.refresher != null) {",
    "            clearInterval(this.refresher);",
    "        }",
    "        this.updateTimeReference(reference);",
    "        this.refresher = setInterval( this.refresh.bind(this), 77 );",
    "    }",
    "",
    "",
    "    stop() {",
    "        if (this.refresher != null) {",
    "            clearInterval(this.refresher);",
    "            this.refresher = null;",
    "        }",
    "        if (this.elem != null) {",
    "            this.elem.val(this.secondsToDHMS(null));",
    "        }",
    "    }",
    "",
    "",
    "    refresh() {",
    "        try {",
    "            if (this.elem != null) {",
    "                const seconds = this.getTime();",
    "                const dhms = this.secondsToDHMS(seconds);",
    "                this.elem.val(dhms);",
    "            }",
    "        }",
    "        catch (error) {",
    "        }",
    "    }",
    "",
    "",
    "    updateTimeReference(reference) {",
    "        const d = new Date();",
    "        this.tms0 = d.getTime();",
    "        this.reference = reference;",
    "    }",
    "",
    "",
    "    getTime() {",
    "        const d = new Date();",
    "        const tms1 = d.getTime();",
    "        const seconds = this.reference + (tms1 - this.tms0)/1000.0;",
    "        return seconds;",
    "    }",
    "",
    "",
    "    secondsToDHMS(seconds) {",
    "        if (seconds != null && seconds > 0) {",
    "            const recent_start = seconds < 60;",
    "            const D = Math.floor( seconds / 86400 );",
    "            seconds = seconds % 86400;",
    "            const H = Math.floor( seconds / 3600 );",
    "            seconds = seconds % 3600;",
    "            const M = Math.floor( seconds / 60 );",
    "            const S = Math.floor(seconds % 60);",
    "            let DHMS;",
    "            if (recent_start) {",
    "                const d = (seconds < 10) ? 2 : 1;",
    "                DHMS = seconds.toFixed(d).padStart(2, \"0\");",
    "            }",
    "            else {",
    "                DHMS = D.toString().padStart(3, \"0\") + \":\" + H.toString().padStart(2, \"0\") + \":\" + M.toString().padStart(2, \"0\") + \":\" + S.toString().padStart(2, \"0\");",
    "            }",
    "            return DHMS;",
    "        }",
    "        else {",
    "            return \"---:--:--:--\";",
    "        }",
    "    }",
    "}",
    "",
    0
};



const char *VGX_BUILTIN_JS_digest_js[] = {
    "/******************************************************************************",
    " *",
    " * VGX Server",
    " * Distributed engine for plugin-based graph and vector search",
    " *",
    " * Module:  vgx",
    " * File:    digest.js",
    " * Author:  Stian Lysne <...>",
    " *",
    " * Copyright Â© 2025 Rakuten, Inc.",
    " *",
    " * Licensed under the Apache License, Version 2.0 (the \"License\");",
    " * you may not use this file except in compliance with the License.",
    " * You may obtain a copy of the License at",
    " *",
    " *     http://www.apache.org/licenses/LICENSE-2.0",
    " *",
    " * Unless required by applicable law or agreed to in writing, software",
    " * distributed under the License is distributed on an \"AS IS\" BASIS,",
    " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
    " * See the License for the specific language governing permissions and",
    " * limitations under the License.",
    " *",
    " *****************************************************************************/",
    "",
    "class Digest {",
    "",
    "    currentDigest = \"00000000000000000000000000000000\";",
    "",
    "    dsym = [",
    "        \"&#x259A\",",
    "        \"&#x259E\",",
    "        \"&#x2599\",",
    "        \"&#x259B\",",
    "        \"&#x259C\",",
    "        \"&#x259F\",",
    "        \"&#x2597\",",
    "        \"&#x2599\"",
    "    ];",
    "",
    "    nosym = \"&#x2589;\";",
    "",
    "    constructor( elem ) {",
    "        this.elem = elem;",
    "        this.elem.html(",
    "          '<span class=\"digestBox\">' +",
    "            '<span class=\"digestX digestA\"></span>' +",
    "            '<span class=\"digestX digestB\"></span>' +",
    "            '<span class=\"digestX digestC\"></span>' +",
    "            '<span class=\"digestX digestD\"></span>' +",
    "            '<span class=\"digestX digestE\"></span>' +",
    "          '</span>'",
    "        );",
    "        this.update(null);",
    "        $('.digestBox').css(\"position\", \"relative\");",
    "        $('.digestBox').css(\"display\", \"inline-block\");",
    "        $('.digestBox').css(\"font-family\", \"Consolas, 'Apple Symbols', sans-serif\");",
    "        $('.digestX').css(\"padding-right\", \"1px\");",
    "",
    "    }",
    "",
    "",
    "    update(digest) {",
    "        let X = this.elem.find('.digestX');",
    "",
    "        if (digest == null) {",
    "            X.html(this.nosym);",
    "            X.css(\"visibility\",\"hidden\");",
    "            return;",
    "        }",
    "        else if (typeof digest == \"string\" && digest.length == 32) {",
    "            this.currentDigest = digest;",
    "        }",
    "        else {",
    "            return;",
    "        }",
    "",
    "        try {",
    "            const quant = 6;",
    "            const dull = 1;",
    "            const scale = (1<<quant)-dull;",
    "            const dig1 = Math.round(parseInt(this.currentDigest.slice( 0,  2), 16) >> quant) * scale;",
    "            const dig2 = Math.round(parseInt(this.currentDigest.slice( 2,  4), 16) >> quant) * scale;",
    "            const dig3 = Math.round(parseInt(this.currentDigest.slice( 4,  6), 16) >> quant) * scale;",
    "            const dig4 = Math.round(parseInt(this.currentDigest.slice( 6,  8), 16) >> quant) * scale;",
    "            const dig5 = Math.round(parseInt(this.currentDigest.slice( 8, 10), 16) >> quant) * scale;",
    "            const dig6 = Math.round(parseInt(this.currentDigest.slice(10, 12), 16) >> quant) * scale;",
    "            const dig7 = Math.round(parseInt(this.currentDigest.slice(12, 14), 16) >> quant) * scale;",
    "            const dig8 = Math.round(parseInt(this.currentDigest.slice(14, 16), 16) >> quant) * scale;",
    "            const dig9 = Math.round(parseInt(this.currentDigest.slice(16, 18), 16) >> quant) * scale;",
    "            const digA = Math.round(parseInt(this.currentDigest.slice(18, 20), 16) >> quant) * scale;",
    "            const digB = Math.round(parseInt(this.currentDigest.slice(20, 22), 16) >> quant) * scale;",
    "            const digC = Math.round(parseInt(this.currentDigest.slice(22, 24), 16) >> quant) * scale;",
    "            const digD = Math.round(parseInt(this.currentDigest.slice(24, 26), 16) >> quant) * scale;",
    "            const digE = Math.round(parseInt(this.currentDigest.slice(26, 28), 16) >> quant) * scale;",
    "            const digF = Math.round(parseInt(this.currentDigest.slice(28, 30), 16) >> quant) * scale;",
    "",
    "            const symA = parseInt(this.currentDigest.slice(0,  2), 16) % 8;",
    "            const symB = parseInt(this.currentDigest.slice(2,  4), 16) % 8;",
    "            const symC = parseInt(this.currentDigest.slice(4,  6), 16) % 8;",
    "            const symD = parseInt(this.currentDigest.slice(6,  8), 16) % 8;",
    "            const symE = parseInt(this.currentDigest.slice(8, 10), 16) % 8;",
    "",
    "            let digestA = this.elem.find('.digestA');",
    "            let digestB = this.elem.find('.digestB');",
    "            let digestC = this.elem.find('.digestC');",
    "            let digestD = this.elem.find('.digestD');",
    "            let digestE = this.elem.find('.digestE');",
    "",
    "            digestA.css(\"color\", \"rgb(\" + (dig1) + \",\" + (dig6) + \",\" + (digB) + \")\");",
    "            digestB.css(\"color\", \"rgb(\" + (dig2) + \",\" + (dig7) + \",\" + (digC) + \")\");",
    "            digestC.css(\"color\", \"rgb(\" + (dig3) + \",\" + (dig8) + \",\" + (digD) + \")\");",
    "            digestD.css(\"color\", \"rgb(\" + (dig4) + \",\" + (dig9) + \",\" + (digE) + \")\");",
    "            digestE.css(\"color\", \"rgb(\" + (dig5) + \",\" + (digA) + \",\" + (digF) + \")\");",
    "",
    "            digestA.html(this.dsym[symA]);",
    "            digestB.html(this.dsym[symB]);",
    "            digestC.html(this.dsym[symC]);",
    "            digestD.html(this.dsym[symD]);",
    "            digestE.html(this.dsym[symE]);",
    "",
    "            X.css(\"visibility\",\"visible\");",
    "        }",
    "        catch(error) { /* ignore */ }",
    "    }",
    "}",
    "",
    "",
    "class MasterSerial {",
    "    static render( serial ) {",
    "        let msA = 0;",
    "        let msB = 0;",
    "        let msC = 0;",
    "        let msD = 0;",
    "        if (serial != undefined) {",
    "            try {",
    "                const ms = BigInt(serial);",
    "                const bf = BigInt(0x100000000);",
    "                const msLo = Number(ms % bf);",
    "                const msHi = Number(ms / bf);",
    "                msA = msLo & 0xFFFF;",
    "                msB = (msLo >> 16) & 0xFFFF;",
    "                msC = msHi & 0xFFFF;",
    "                msD = (msHi >> 16) & 0xFFFF;",
    "            }",
    "            catch (error) {",
    "                // ignore",
    "            }",
    "        }",
    "        const s_msA = msA.toString().padStart(5,'0');",
    "        const s_msB = msB.toString().padStart(5,'0');",
    "        const s_msC = msC.toString().padStart(5,'0');",
    "        const s_msD = msD.toString();",
    "        return s_msD + \"-\" + s_msC + \"-\" + s_msB + \"-\" + s_msA;",
    "    }",
    "",
    "    static diff(serial1, serial2) {",
    "        if (serial1 != null && serial2 != null) {",
    "            let d = 0;",
    "            try {",
    "                const s1 = BigInt(serial1);",
    "                const s2 = BigInt(serial2);",
    "                d = Number(s1 - s2);",
    "            }",
    "            catch (error) {",
    "                // ignore",
    "            }",
    "            return Math.abs(d);",
    "        }",
    "        else {",
    "            return 0;",
    "        }",
    "    }",
    "}",
    "",
    0
};



const char *VGX_BUILTIN_JS_header_js[] = {
    "/******************************************************************************",
    " *",
    " * VGX Server",
    " * Distributed engine for plugin-based graph and vector search",
    " *",
    " * Module:  vgx",
    " * File:    header.js",
    " * Author:  Stian Lysne <...>",
    " *",
    " * Copyright Â© 2025 Rakuten, Inc.",
    " *",
    " * Licensed under the Apache License, Version 2.0 (the \"License\");",
    " * you may not use this file except in compliance with the License.",
    " * You may obtain a copy of the License at",
    " *",
    " *     http://www.apache.org/licenses/LICENSE-2.0",
    " *",
    " * Unless required by applicable law or agreed to in writing, software",
    " * distributed under the License is distributed on an \"AS IS\" BASIS,",
    " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
    " * See the License for the specific language governing permissions and",
    " * limitations under the License.",
    " *",
    " *****************************************************************************/",
    "",
    "class CommonHeader {",
    "",
    "    port_offset = 0;",
    "    baseport = -1;",
    "",
    "    static copySelectionToClipboard(event) {",
    "        if (navigator.clipboard) {",
    "            let selection = document.getSelection();",
    "            let text = selection.toString();",
    "            let args = event.data;",
    "            if (args && args.asint === true) {",
    "                text = text.replace(/,/g, \"\");",
    "            }",
    "            navigator.clipboard.writeText(text).then(",
    "                () => {",
    "                    selection.empty();",
    "                }",
    "            );",
    "        }",
    "    }",
    "",
    "    static ready( callback=null, lowestAcceptableExecutor=15, isAdmin=true, pageLabel=null, protectBasePort=true ) {",
    "",
    "        if( isAdmin ) {",
    "          $.ajaxSetup({",
    "              timeout: 60000,",
    "              headers: {",
    "                  /*'X-Vgx-Builtin-Min-Executor': \"\" + lowestAcceptableExecutor*/",
    "              }",
    "          });",
    "        }",
    "        else {",
    "          $.ajaxSetup({",
    "              timeout: 60000,",
    "          });",
    "        }",
    "",
    "        $(\"#commonHeaderDiv\").load( \"header.html\", function () {",
    "            $('#logoimg').click(CommonHeader.leave);",
    "            if( !isAdmin ) {",
    "                $(\"#commonHeaderTable\").find(\".admininfo\").css( \"display\", \"none\" );",
    "                if( pageLabel ) {",
    "                    $(\".customLabel\").css( \"display\", \"inline\" );",
    "                    $(\"#pageLabel\").html( pageLabel );",
    "                    $(\"#pageLabel\").css( \"font-weight\", \"bold\" );",
    "                    $(\"#pageLabel\").css( \"vertical-align\", \"middle\" );",
    "                    $(\"#logoimg\").css( \"vertical-align\", \"middle\" );",
    "                }",
    "            }",
    "            $.get( \"vgx/ping\", function (data, textStatus, jqXHR) {",
    "                const host = data[\"response\"][\"host\"];",
    "                const ip = host[\"ip\"];",
    "                const name = host[\"name\"];",
    "                const memory_MiB = Math.round(parseInt(host[\"memory\"]) / (1024 * 1024));",
    "                const port = data[\"port\"][0];",
    "                const port_offset = data[\"port\"][1];",
    "                CommonHeader.port_offset = port_offset;",
    "                CommonHeader.baseport = port - port_offset;",
    "                const rexR = /\\(R\\)/ig;",
    "                const rexTM = /\\(TM\\)/ig;",
    "                let cpu = host[\"cpu\"];",
    "                cpu = cpu.replaceAll(rexR, \"&reg;\").replaceAll(rexTM, \"&trade;\");",
    "                $('#commonCPU').html(cpu);",
    "                $('#commonMemoryMiB').html(memory_MiB.toLocaleString(\"en-US\"));",
    "                $('#commonIP').html(ip);",
    "                $('#commonHostName').html(name);",
    "                $('#commonAdmin').html(\"\" + port + window.location.pathname);",
    "                $('#commonPort').html(\"\" + (port-port_offset));",
    "                $(\"#commonFooterDiv\").load( \"footer.html\", function () {",
    "                    if (callback != null) {",
    "                        callback();",
    "                    }",
    "                    $(\"body\").css(\"display\", \"block\");",
    "                    setTimeout(function () { $(\"body\").addClass(\"ready\"); }, 50);",
    "                });",
    "                $('#commonHostName').mouseup( CommonHeader.copySelectionToClipboard );",
    "                $('#commonIP').mouseup( CommonHeader.copySelectionToClipboard );",
    "                let barInterval = null;",
    "                $('#commonPort').mouseup( function() {",
    "                    if (barInterval != null) {",
    "                        clearInterval( barInterval );",
    "                        barInterval = null;",
    "                        $('#commonPort').html(\"\" + port);",
    "                    }",
    "                } );",
    "                if (isAdmin && port_offset == 0 && protectBasePort) {",
    "                    $('#commonHeaderTable').css(\"background-color\", \"#f1948a\");",
    "                    $('#commonHeaderTable').attr('title', 'Main Server Port!\\n\\nClick the bars if you want to remain here.');",
    "                    let barElem = $('#commonPort');",
    "                    let nBar = 20;",
    "                    barInterval = setInterval( function() {",
    "                        nBar -= 1;",
    "                        let bar = \"|\".repeat( nBar );",
    "                        barElem.html( bar );",
    "                        if( nBar == 0 ) {",
    "                            clearInterval( barInterval );",
    "                            window.location = \"http://\" + window.location.hostname + \":\" + (port + 1) + window.location.pathname;",
    "                        }",
    "                    }, 500 );",
    "                }",
    "            });",
    "        });",
    "    }",
    "",
    "    static leave() {",
    "        const path_segments = window.location.pathname.split(\"/\");",
    "        if (path_segments.length < 3) {",
    "            $('body').css(\"transition\", \"opacity 150ms ease-in, transform 80ms ease-in\");",
    "            $('body').addClass(\"leavepage\");",
    "            setTimeout(function () {",
    "                setTimeout(function () {",
    "                    $('body').removeClass(\"leavepage\");",
    "                }, 1000);",
    "                window.open(\"/\", \"_self\");",
    "            }, 500);",
    "        }",
    "        else {",
    "            window.open(window.location.pathname, \"_self\");",
    "        }",
    "    }",
    "",
    "}",
    "",
    0
};



const char *VGX_BUILTIN_JS_jquery_3_6_0_min_js[] = {
    "2F2A21206A51756572792076332E362E30207C20286329204F70656E4A5320466F756E646174696F6E20616E64206F7468657220636F6E7472696275",
    "746F7273207C206A71756572792E6F72672F6C6963656E7365202A2F0A2166756E6374696F6E28652C74297B2275736520737472696374223B226F62",
    "6A656374223D3D747970656F66206D6F64756C652626226F626A656374223D3D747970656F66206D6F64756C652E6578706F7274733F6D6F64756C65",
    "2E6578706F7274733D652E646F63756D656E743F7428652C2130293A66756E6374696F6E2865297B69662821652E646F63756D656E74297468726F77",
    "206E6577204572726F7228226A517565727920726571756972657320612077696E646F772077697468206120646F63756D656E7422293B7265747572",
    "6E20742865297D3A742865297D2822756E646566696E656422213D747970656F662077696E646F773F77696E646F773A746869732C66756E6374696F",
    "6E28432C65297B2275736520737472696374223B76617220743D5B5D2C723D4F626A6563742E67657450726F746F747970654F662C733D742E736C69",
    "63652C673D742E666C61743F66756E6374696F6E2865297B72657475726E20742E666C61742E63616C6C2865297D3A66756E6374696F6E2865297B72",
    "657475726E20742E636F6E6361742E6170706C79285B5D2C65297D2C753D742E707573682C693D742E696E6465784F662C6E3D7B7D2C6F3D6E2E746F",
    "537472696E672C763D6E2E6861734F776E50726F70657274792C613D762E746F537472696E672C6C3D612E63616C6C284F626A656374292C793D7B7D",
    "2C6D3D66756E6374696F6E2865297B72657475726E2266756E6374696F6E223D3D747970656F6620652626226E756D62657222213D747970656F6620",
    "652E6E6F64655479706526262266756E6374696F6E22213D747970656F6620652E6974656D7D2C783D66756E6374696F6E2865297B72657475726E20",
    "6E756C6C213D652626653D3D3D652E77696E646F777D2C453D432E646F63756D656E742C633D7B747970653A21302C7372633A21302C6E6F6E63653A",
    "21302C6E6F4D6F64756C653A21307D3B66756E6374696F6E206228652C742C6E297B76617220722C692C6F3D286E3D6E7C7C45292E63726561746545",
    "6C656D656E74282273637269707422293B6966286F2E746578743D652C7429666F72287220696E20632928693D745B725D7C7C742E67657441747472",
    "69627574652626742E6765744174747269627574652872292926266F2E73657441747472696275746528722C69293B6E2E686561642E617070656E64",
    "4368696C64286F292E706172656E744E6F64652E72656D6F76654368696C64286F297D66756E6374696F6E20772865297B72657475726E206E756C6C",
    "3D3D653F652B22223A226F626A656374223D3D747970656F6620657C7C2266756E6374696F6E223D3D747970656F6620653F6E5B6F2E63616C6C2865",
    "295D7C7C226F626A656374223A747970656F6620657D76617220663D22332E362E30222C533D66756E6374696F6E28652C74297B72657475726E206E",
    "657720532E666E2E696E697428652C74297D3B66756E6374696F6E20702865297B76617220743D2121652626226C656E67746822696E20652626652E",
    "6C656E6774682C6E3D772865293B72657475726E216D28652926262178286529262628226172726179223D3D3D6E7C7C303D3D3D747C7C226E756D62",
    "6572223D3D747970656F6620742626303C742626742D3120696E2065297D532E666E3D532E70726F746F747970653D7B6A71756572793A662C636F6E",
    "7374727563746F723A532C6C656E6774683A302C746F41727261793A66756E6374696F6E28297B72657475726E20732E63616C6C2874686973297D2C",
    "6765743A66756E6374696F6E2865297B72657475726E206E756C6C3D3D653F732E63616C6C2874686973293A653C303F746869735B652B746869732E",
    "6C656E6774685D3A746869735B655D7D2C70757368537461636B3A66756E6374696F6E2865297B76617220743D532E6D6572676528746869732E636F",
    "6E7374727563746F7228292C65293B72657475726E20742E707265764F626A6563743D746869732C747D2C656163683A66756E6374696F6E2865297B",
    "72657475726E20532E6561636828746869732C65297D2C6D61703A66756E6374696F6E286E297B72657475726E20746869732E70757368537461636B",
    "28532E6D617028746869732C66756E6374696F6E28652C74297B72657475726E206E2E63616C6C28652C742C65297D29297D2C736C6963653A66756E",
    "6374696F6E28297B72657475726E20746869732E70757368537461636B28732E6170706C7928746869732C617267756D656E747329297D2C66697273",
    "743A66756E6374696F6E28297B72657475726E20746869732E65712830297D2C6C6173743A66756E6374696F6E28297B72657475726E20746869732E",
    "6571282D31297D2C6576656E3A66756E6374696F6E28297B72657475726E20746869732E70757368537461636B28532E6772657028746869732C6675",
    "6E6374696F6E28652C74297B72657475726E28742B312925327D29297D2C6F64643A66756E6374696F6E28297B72657475726E20746869732E707573",
    "68537461636B28532E6772657028746869732C66756E6374696F6E28652C74297B72657475726E207425327D29297D2C65713A66756E6374696F6E28",
    "65297B76617220743D746869732E6C656E6774682C6E3D2B652B28653C303F743A30293B72657475726E20746869732E70757368537461636B28303C",
    "3D6E26266E3C743F5B746869735B6E5D5D3A5B5D297D2C656E643A66756E6374696F6E28297B72657475726E20746869732E707265764F626A656374",
    "7C7C746869732E636F6E7374727563746F7228297D2C707573683A752C736F72743A742E736F72742C73706C6963653A742E73706C6963657D2C532E",
    "657874656E643D532E666E2E657874656E643D66756E6374696F6E28297B76617220652C742C6E2C722C692C6F2C613D617267756D656E74735B305D",
    "7C7C7B7D2C733D312C753D617267756D656E74732E6C656E6774682C6C3D21313B666F722822626F6F6C65616E223D3D747970656F6620612626286C",
    "3D612C613D617267756D656E74735B735D7C7C7B7D2C732B2B292C226F626A656374223D3D747970656F6620617C7C6D2861297C7C28613D7B7D292C",
    "733D3D3D75262628613D746869732C732D2D293B733C753B732B2B296966286E756C6C213D28653D617267756D656E74735B735D2929666F72287420",
    "696E206529723D655B745D2C225F5F70726F746F5F5F22213D3D74262661213D3D722626286C262672262628532E6973506C61696E4F626A65637428",
    "72297C7C28693D41727261792E6973417272617928722929293F286E3D615B745D2C6F3D6926262141727261792E69734172726179286E293F5B5D3A",
    "697C7C532E6973506C61696E4F626A656374286E293F6E3A7B7D2C693D21312C615B745D3D532E657874656E64286C2C6F2C7229293A766F69642030",
    "213D3D72262628615B745D3D7229293B72657475726E20617D2C532E657874656E64287B657870616E646F3A226A5175657279222B28662B4D617468",
    "2E72616E646F6D2829292E7265706C616365282F5C442F672C2222292C697352656164793A21302C6572726F723A66756E6374696F6E2865297B7468",
    "726F77206E6577204572726F722865297D2C6E6F6F703A66756E6374696F6E28297B7D2C6973506C61696E4F626A6563743A66756E6374696F6E2865",
    "297B76617220742C6E3B72657475726E212821657C7C225B6F626A656374204F626A6563745D22213D3D6F2E63616C6C286529292626282128743D72",
    "286529297C7C2266756E6374696F6E223D3D747970656F66286E3D762E63616C6C28742C22636F6E7374727563746F7222292626742E636F6E737472",
    "7563746F72292626612E63616C6C286E293D3D3D6C297D2C6973456D7074794F626A6563743A66756E6374696F6E2865297B76617220743B666F7228",
    "7420696E20652972657475726E21313B72657475726E21307D2C676C6F62616C4576616C3A66756E6374696F6E28652C742C6E297B6228652C7B6E6F",
    "6E63653A742626742E6E6F6E63657D2C6E297D2C656163683A66756E6374696F6E28652C74297B766172206E2C723D303B69662870286529297B666F",
    "72286E3D652E6C656E6774683B723C6E3B722B2B2969662821313D3D3D742E63616C6C28655B725D2C722C655B725D2929627265616B7D656C736520",
    "666F72287220696E20652969662821313D3D3D742E63616C6C28655B725D2C722C655B725D2929627265616B3B72657475726E20657D2C6D616B6541",
    "727261793A66756E6374696F6E28652C74297B766172206E3D747C7C5B5D3B72657475726E206E756C6C213D6526262870284F626A65637428652929",
    "3F532E6D65726765286E2C22737472696E67223D3D747970656F6620653F5B655D3A65293A752E63616C6C286E2C6529292C6E7D2C696E4172726179",
    "3A66756E6374696F6E28652C742C6E297B72657475726E206E756C6C3D3D743F2D313A692E63616C6C28742C652C6E297D2C6D657267653A66756E63",
    "74696F6E28652C74297B666F7228766172206E3D2B742E6C656E6774682C723D302C693D652E6C656E6774683B723C6E3B722B2B29655B692B2B5D3D",
    "745B725D3B72657475726E20652E6C656E6774683D692C657D2C677265703A66756E6374696F6E28652C742C6E297B666F722876617220723D5B5D2C",
    "693D302C6F3D652E6C656E6774682C613D216E3B693C6F3B692B2B29217428655B695D2C6929213D3D612626722E7075736828655B695D293B726574",
    "75726E20727D2C6D61703A66756E6374696F6E28652C742C6E297B76617220722C692C6F3D302C613D5B5D3B6966287028652929666F7228723D652E",
    "6C656E6774683B6F3C723B6F2B2B296E756C6C213D28693D7428655B6F5D2C6F2C6E29292626612E707573682869293B656C736520666F72286F2069",
    "6E2065296E756C6C213D28693D7428655B6F5D2C6F2C6E29292626612E707573682869293B72657475726E20672861297D2C677569643A312C737570",
    "706F72743A797D292C2266756E6374696F6E223D3D747970656F662053796D626F6C262628532E666E5B53796D626F6C2E6974657261746F725D3D74",
    "5B53796D626F6C2E6974657261746F725D292C532E656163682822426F6F6C65616E204E756D62657220537472696E672046756E6374696F6E204172",
    "726179204461746520526567457870204F626A656374204572726F722053796D626F6C222E73706C697428222022292C66756E6374696F6E28652C74",
    "297B6E5B225B6F626A65637420222B742B225D225D3D742E746F4C6F7765724361736528297D293B76617220643D66756E6374696F6E286E297B7661",
    "7220652C642C622C6F2C692C682C662C672C772C752C6C2C542C432C612C452C762C732C632C792C533D2273697A7A6C65222B312A6E657720446174",
    "652C703D6E2E646F63756D656E742C6B3D302C723D302C6D3D756528292C783D756528292C413D756528292C4E3D756528292C6A3D66756E6374696F",
    "6E28652C74297B72657475726E20653D3D3D742626286C3D2130292C307D2C443D7B7D2E6861734F776E50726F70657274792C743D5B5D2C713D742E",
    "706F702C4C3D742E707573682C483D742E707573682C4F3D742E736C6963652C503D66756E6374696F6E28652C74297B666F7228766172206E3D302C",
    "723D652E6C656E6774683B6E3C723B6E2B2B29696628655B6E5D3D3D3D742972657475726E206E3B72657475726E2D317D2C523D22636865636B6564",
    "7C73656C65637465647C6173796E637C6175746F666F6375737C6175746F706C61797C636F6E74726F6C737C64656665727C64697361626C65647C68",
    "696464656E7C69736D61707C6C6F6F707C6D756C7469706C657C6F70656E7C726561646F6E6C797C72657175697265647C73636F706564222C4D3D22",
    "5B5C5C7832305C5C745C5C725C5C6E5C5C665D222C493D22283F3A5C5C5C5C5B5C5C64612D66412D465D7B312C367D222B4D2B223F7C5C5C5C5C5B5E",
    "5C5C725C5C6E5C5C665D7C5B5C5C772D5D7C5B5E5C302D5C5C7837665D292B222C573D225C5C5B222B4D2B222A28222B492B2229283F3A222B4D2B22",
    "2A285B2A5E247C217E5D3F3D29222B4D2B222A283F3A2728283F3A5C5C5C5C2E7C5B5E5C5C5C5C275D292A29277C5C2228283F3A5C5C5C5C2E7C5B5E",
    "5C5C5C5C5C225D292A295C227C28222B492B2229297C29222B4D2B222A5C5C5D222C463D223A28222B492B2229283F3A5C5C2828282728283F3A5C5C",
    "5C5C2E7C5B5E5C5C5C5C275D292A29277C5C2228283F3A5C5C5C5C2E7C5B5E5C5C5C5C5C225D292A295C22297C28283F3A5C5C5C5C2E7C5B5E5C5C5C",
    "5C28295B5C5C5D5D7C222B572B22292A297C2E2A295C5C297C29222C423D6E657720526567457870284D2B222B222C226722292C243D6E6577205265",
    "6745787028225E222B4D2B222B7C28283F3A5E7C5B5E5C5C5C5C5D29283F3A5C5C5C5C2E292A29222B4D2B222B24222C226722292C5F3D6E65772052",
    "656745787028225E222B4D2B222A2C222B4D2B222A22292C7A3D6E65772052656745787028225E222B4D2B222A285B3E2B7E5D7C222B4D2B2229222B",
    "4D2B222A22292C553D6E657720526567457870284D2B227C3E22292C583D6E6577205265674578702846292C563D6E65772052656745787028225E22",
    "2B492B222422292C473D7B49443A6E65772052656745787028225E2328222B492B222922292C434C4153533A6E65772052656745787028225E5C5C2E",
    "28222B492B222922292C5441473A6E65772052656745787028225E28222B492B227C5B2A5D2922292C415454523A6E65772052656745787028225E22",
    "2B57292C50534555444F3A6E65772052656745787028225E222B46292C4348494C443A6E65772052656745787028225E3A286F6E6C797C6669727374",
    "7C6C6173747C6E74687C6E74682D6C617374292D286368696C647C6F662D7479706529283F3A5C5C28222B4D2B222A286576656E7C6F64647C28285B",
    "2B2D5D7C29285C5C642A296E7C29222B4D2B222A283F3A285B2B2D5D7C29222B4D2B222A285C5C642B297C2929222B4D2B222A5C5C297C29222C2269",
    "22292C626F6F6C3A6E65772052656745787028225E283F3A222B522B222924222C226922292C6E65656473436F6E746578743A6E6577205265674578",
    "7028225E222B4D2B222A5B3E2B7E5D7C3A286576656E7C6F64647C65717C67747C6C747C6E74687C66697273747C6C61737429283F3A5C5C28222B4D",
    "2B222A28283F3A2D5C5C64293F5C5C642A29222B4D2B222A5C5C297C29283F3D5B5E2D5D7C2429222C226922297D2C593D2F48544D4C242F692C513D",
    "2F5E283F3A696E7075747C73656C6563747C74657874617265617C627574746F6E29242F692C4A3D2F5E685C64242F692C4B3D2F5E5B5E7B5D2B5C7B",
    "5C732A5C5B6E6174697665205C772F2C5A3D2F5E283F3A23285B5C772D5D2B297C285C772B297C5C2E285B5C772D5D2B2929242F2C65653D2F5B2B7E",
    "5D2F2C74653D6E65772052656745787028225C5C5C5C5B5C5C64612D66412D465D7B312C367D222B4D2B223F7C5C5C5C5C285B5E5C5C725C5C6E5C5C",
    "665D29222C226722292C6E653D66756E6374696F6E28652C74297B766172206E3D223078222B652E736C6963652831292D36353533363B7265747572",
    "6E20747C7C286E3C303F537472696E672E66726F6D43686172436F6465286E2B3635353336293A537472696E672E66726F6D43686172436F6465286E",
    "3E3E31307C35353239362C31303233266E7C353633323029297D2C72653D2F285B5C302D5C7831665C7837665D7C5E2D3F5C64297C5E2D247C5B5E5C",
    "302D5C7831665C7837662D5C75464646465C772D5D2F672C69653D66756E6374696F6E28652C74297B72657475726E20743F225C30223D3D3D653F22",
    "5C7566666664223A652E736C69636528302C2D31292B225C5C222B652E63686172436F6465417428652E6C656E6774682D31292E746F537472696E67",
    "283136292B2220223A225C5C222B657D2C6F653D66756E6374696F6E28297B5428297D2C61653D62652866756E6374696F6E2865297B72657475726E",
    "21303D3D3D652E64697361626C65642626226669656C64736574223D3D3D652E6E6F64654E616D652E746F4C6F7765724361736528297D2C7B646972",
    "3A22706172656E744E6F6465222C6E6578743A226C6567656E64227D293B7472797B482E6170706C7928743D4F2E63616C6C28702E6368696C644E6F",
    "646573292C702E6368696C644E6F646573292C745B702E6368696C644E6F6465732E6C656E6774685D2E6E6F6465547970657D63617463682865297B",
    "483D7B6170706C793A742E6C656E6774683F66756E6374696F6E28652C74297B4C2E6170706C7928652C4F2E63616C6C287429297D3A66756E637469",
    "6F6E28652C74297B766172206E3D652E6C656E6774682C723D303B7768696C6528655B6E2B2B5D3D745B722B2B5D293B652E6C656E6774683D6E2D31",
    "7D7D7D66756E6374696F6E20736528742C652C6E2C72297B76617220692C6F2C612C732C752C6C2C632C663D652626652E6F776E6572446F63756D65",
    "6E742C703D653F652E6E6F6465547970653A393B6966286E3D6E7C7C5B5D2C22737472696E6722213D747970656F6620747C7C21747C7C31213D3D70",
    "262639213D3D7026263131213D3D702972657475726E206E3B6966282172262628542865292C653D657C7C432C4529297B6966283131213D3D702626",
    "28753D5A2E657865632874292929696628693D755B315D297B696628393D3D3D70297B6966282128613D652E676574456C656D656E74427949642869",
    "29292972657475726E206E3B696628612E69643D3D3D692972657475726E206E2E707573682861292C6E7D656C73652069662866262628613D662E67",
    "6574456C656D656E74427949642869292926267928652C61292626612E69643D3D3D692972657475726E206E2E707573682861292C6E7D656C73657B",
    "696628755B325D2972657475726E20482E6170706C79286E2C652E676574456C656D656E747342795461674E616D65287429292C6E3B69662828693D",
    "755B335D292626642E676574456C656D656E74734279436C6173734E616D652626652E676574456C656D656E74734279436C6173734E616D65297265",
    "7475726E20482E6170706C79286E2C652E676574456C656D656E74734279436C6173734E616D65286929292C6E7D696628642E7173612626214E5B74",
    "2B2220225D26262821767C7C21762E746573742874292926262831213D3D707C7C226F626A65637422213D3D652E6E6F64654E616D652E746F4C6F77",
    "657243617365282929297B696628633D742C663D652C313D3D3D70262628552E746573742874297C7C7A2E7465737428742929297B28663D65652E74",
    "6573742874292626796528652E706172656E744E6F6465297C7C65293D3D3D652626642E73636F70657C7C2828733D652E6765744174747269627574",
    "65282269642229293F733D732E7265706C6163652872652C6965293A652E73657441747472696275746528226964222C733D5329292C6F3D286C3D68",
    "287429292E6C656E6774683B7768696C65286F2D2D296C5B6F5D3D28733F2223222B733A223A73636F706522292B2220222B7865286C5B6F5D293B63",
    "3D6C2E6A6F696E28222C22297D7472797B72657475726E20482E6170706C79286E2C662E717565727953656C6563746F72416C6C286329292C6E7D63",
    "617463682865297B4E28742C2130297D66696E616C6C797B733D3D3D532626652E72656D6F76654174747269627574652822696422297D7D7D726574",
    "75726E206728742E7265706C61636528242C22243122292C652C6E2C72297D66756E6374696F6E20756528297B76617220723D5B5D3B72657475726E",
    "2066756E6374696F6E206528742C6E297B72657475726E20722E7075736828742B222022293E622E63616368654C656E677468262664656C65746520",
    "655B722E736869667428295D2C655B742B2220225D3D6E7D7D66756E6374696F6E206C652865297B72657475726E20655B535D3D21302C657D66756E",
    "6374696F6E2063652865297B76617220743D432E637265617465456C656D656E7428226669656C6473657422293B7472797B72657475726E21216528",
    "74297D63617463682865297B72657475726E21317D66696E616C6C797B742E706172656E744E6F64652626742E706172656E744E6F64652E72656D6F",
    "76654368696C642874292C743D6E756C6C7D7D66756E6374696F6E20666528652C74297B766172206E3D652E73706C697428227C22292C723D6E2E6C",
    "656E6774683B7768696C6528722D2D29622E6174747248616E646C655B6E5B725D5D3D747D66756E6374696F6E20706528652C74297B766172206E3D",
    "742626652C723D6E2626313D3D3D652E6E6F6465547970652626313D3D3D742E6E6F6465547970652626652E736F75726365496E6465782D742E736F",
    "75726365496E6465783B696628722972657475726E20723B6966286E297768696C65286E3D6E2E6E6578745369626C696E67296966286E3D3D3D7429",
    "72657475726E2D313B72657475726E20653F313A2D317D66756E6374696F6E2064652874297B72657475726E2066756E6374696F6E2865297B726574",
    "75726E22696E707574223D3D3D652E6E6F64654E616D652E746F4C6F7765724361736528292626652E747970653D3D3D747D7D66756E6374696F6E20",
    "6865286E297B72657475726E2066756E6374696F6E2865297B76617220743D652E6E6F64654E616D652E746F4C6F7765724361736528293B72657475",
    "726E2822696E707574223D3D3D747C7C22627574746F6E223D3D3D74292626652E747970653D3D3D6E7D7D66756E6374696F6E2067652874297B7265",
    "7475726E2066756E6374696F6E2865297B72657475726E22666F726D22696E20653F652E706172656E744E6F6465262621313D3D3D652E6469736162",
    "6C65643F226C6162656C22696E20653F226C6162656C22696E20652E706172656E744E6F64653F652E706172656E744E6F64652E64697361626C6564",
    "3D3D3D743A652E64697361626C65643D3D3D743A652E697344697361626C65643D3D3D747C7C652E697344697361626C6564213D3D21742626616528",
    "65293D3D3D743A652E64697361626C65643D3D3D743A226C6162656C22696E20652626652E64697361626C65643D3D3D747D7D66756E6374696F6E20",
    "76652861297B72657475726E206C652866756E6374696F6E286F297B72657475726E206F3D2B6F2C6C652866756E6374696F6E28652C74297B766172",
    "206E2C723D61285B5D2C652E6C656E6774682C6F292C693D722E6C656E6774683B7768696C6528692D2D29655B6E3D725B695D5D262628655B6E5D3D",
    "2128745B6E5D3D655B6E5D29297D297D297D66756E6374696F6E2079652865297B72657475726E2065262622756E646566696E656422213D74797065",
    "6F6620652E676574456C656D656E747342795461674E616D652626657D666F72286520696E20643D73652E737570706F72743D7B7D2C693D73652E69",
    "73584D4C3D66756E6374696F6E2865297B76617220743D652626652E6E616D6573706163655552492C6E3D65262628652E6F776E6572446F63756D65",
    "6E747C7C65292E646F63756D656E74456C656D656E743B72657475726E21592E7465737428747C7C6E26266E2E6E6F64654E616D657C7C2248544D4C",
    "22297D2C543D73652E736574446F63756D656E743D66756E6374696F6E2865297B76617220742C6E2C723D653F652E6F776E6572446F63756D656E74",
    "7C7C653A703B72657475726E2072213D432626393D3D3D722E6E6F6465547970652626722E646F63756D656E74456C656D656E74262628613D28433D",
    "72292E646F63756D656E74456C656D656E742C453D21692843292C70213D432626286E3D432E64656661756C74566965772926266E2E746F70213D3D",
    "6E2626286E2E6164644576656E744C697374656E65723F6E2E6164644576656E744C697374656E65722822756E6C6F6164222C6F652C2131293A6E2E",
    "6174746163684576656E7426266E2E6174746163684576656E7428226F6E756E6C6F6164222C6F6529292C642E73636F70653D63652866756E637469",
    "6F6E2865297B72657475726E20612E617070656E644368696C642865292E617070656E644368696C6428432E637265617465456C656D656E74282264",
    "69762229292C22756E646566696E656422213D747970656F6620652E717565727953656C6563746F72416C6C262621652E717565727953656C656374",
    "6F72416C6C28223A73636F7065206669656C647365742064697622292E6C656E6774687D292C642E617474726962757465733D63652866756E637469",
    "6F6E2865297B72657475726E20652E636C6173734E616D653D2269222C21652E6765744174747269627574652822636C6173734E616D6522297D292C",
    "642E676574456C656D656E747342795461674E616D653D63652866756E6374696F6E2865297B72657475726E20652E617070656E644368696C642843",
    "2E637265617465436F6D6D656E7428222229292C21652E676574456C656D656E747342795461674E616D6528222A22292E6C656E6774687D292C642E",
    "676574456C656D656E74734279436C6173734E616D653D4B2E7465737428432E676574456C656D656E74734279436C6173734E616D65292C642E6765",
    "74427949643D63652866756E6374696F6E2865297B72657475726E20612E617070656E644368696C642865292E69643D532C21432E676574456C656D",
    "656E747342794E616D657C7C21432E676574456C656D656E747342794E616D652853292E6C656E6774687D292C642E676574427949643F28622E6669",
    "6C7465722E49443D66756E6374696F6E2865297B76617220743D652E7265706C6163652874652C6E65293B72657475726E2066756E6374696F6E2865",
    "297B72657475726E20652E6765744174747269627574652822696422293D3D3D747D7D2C622E66696E642E49443D66756E6374696F6E28652C74297B",
    "69662822756E646566696E656422213D747970656F6620742E676574456C656D656E7442794964262645297B766172206E3D742E676574456C656D65",
    "6E74427949642865293B72657475726E206E3F5B6E5D3A5B5D7D7D293A28622E66696C7465722E49443D66756E6374696F6E2865297B766172206E3D",
    "652E7265706C6163652874652C6E65293B72657475726E2066756E6374696F6E2865297B76617220743D22756E646566696E656422213D747970656F",
    "6620652E6765744174747269627574654E6F64652626652E6765744174747269627574654E6F64652822696422293B72657475726E20742626742E76",
    "616C75653D3D3D6E7D7D2C622E66696E642E49443D66756E6374696F6E28652C74297B69662822756E646566696E656422213D747970656F6620742E",
    "676574456C656D656E7442794964262645297B766172206E2C722C692C6F3D742E676574456C656D656E74427949642865293B6966286F297B696628",
    "286E3D6F2E6765744174747269627574654E6F64652822696422292926266E2E76616C75653D3D3D652972657475726E5B6F5D3B693D742E67657445",
    "6C656D656E747342794E616D652865292C723D303B7768696C65286F3D695B722B2B5D29696628286E3D6F2E6765744174747269627574654E6F6465",
    "2822696422292926266E2E76616C75653D3D3D652972657475726E5B6F5D7D72657475726E5B5D7D7D292C622E66696E642E5441473D642E67657445",
    "6C656D656E747342795461674E616D653F66756E6374696F6E28652C74297B72657475726E22756E646566696E656422213D747970656F6620742E67",
    "6574456C656D656E747342795461674E616D653F742E676574456C656D656E747342795461674E616D652865293A642E7173613F742E717565727953",
    "656C6563746F72416C6C2865293A766F696420307D3A66756E6374696F6E28652C74297B766172206E2C723D5B5D2C693D302C6F3D742E676574456C",
    "656D656E747342795461674E616D652865293B696628222A223D3D3D65297B7768696C65286E3D6F5B692B2B5D29313D3D3D6E2E6E6F646554797065",
    "2626722E70757368286E293B72657475726E20727D72657475726E206F7D2C622E66696E642E434C4153533D642E676574456C656D656E7473427943",
    "6C6173734E616D65262666756E6374696F6E28652C74297B69662822756E646566696E656422213D747970656F6620742E676574456C656D656E7473",
    "4279436C6173734E616D652626452972657475726E20742E676574456C656D656E74734279436C6173734E616D652865297D2C733D5B5D2C763D5B5D",
    "2C28642E7173613D4B2E7465737428432E717565727953656C6563746F72416C6C292926262863652866756E6374696F6E2865297B76617220743B61",
    "2E617070656E644368696C642865292E696E6E657248544D4C3D223C612069643D27222B532B22273E3C2F613E3C73656C6563742069643D27222B53",
    "2B222D5C725C5C27206D73616C6C6F77636170747572653D27273E3C6F7074696F6E2073656C65637465643D27273E3C2F6F7074696F6E3E3C2F7365",
    "6C6563743E222C652E717565727953656C6563746F72416C6C28225B6D73616C6C6F77636170747572655E3D27275D22292E6C656E6774682626762E",
    "7075736828225B2A5E245D3D222B4D2B222A283F3A27277C5C225C222922292C652E717565727953656C6563746F72416C6C28225B73656C65637465",
    "645D22292E6C656E6774687C7C762E7075736828225C5C5B222B4D2B222A283F3A76616C75657C222B522B222922292C652E717565727953656C6563",
    "746F72416C6C28225B69647E3D222B532B222D5D22292E6C656E6774687C7C762E7075736828227E3D22292C28743D432E637265617465456C656D65",
    "6E742822696E7075742229292E73657441747472696275746528226E616D65222C2222292C652E617070656E644368696C642874292C652E71756572",
    "7953656C6563746F72416C6C28225B6E616D653D27275D22292E6C656E6774687C7C762E7075736828225C5C5B222B4D2B222A6E616D65222B4D2B22",
    "2A3D222B4D2B222A283F3A27277C5C225C222922292C652E717565727953656C6563746F72416C6C28223A636865636B656422292E6C656E6774687C",
    "7C762E7075736828223A636865636B656422292C652E717565727953656C6563746F72416C6C28226123222B532B222B2A22292E6C656E6774687C7C",
    "762E7075736828222E232E2B5B2B7E5D22292C652E717565727953656C6563746F72416C6C28225C5C5C6622292C762E7075736828225B5C5C725C5C",
    "6E5C5C665D22297D292C63652866756E6374696F6E2865297B652E696E6E657248544D4C3D223C6120687265663D27272064697361626C65643D2764",
    "697361626C6564273E3C2F613E3C73656C6563742064697361626C65643D2764697361626C6564273E3C6F7074696F6E2F3E3C2F73656C6563743E22",
    "3B76617220743D432E637265617465456C656D656E742822696E70757422293B742E736574417474726962757465282274797065222C226869646465",
    "6E22292C652E617070656E644368696C642874292E73657441747472696275746528226E616D65222C224422292C652E717565727953656C6563746F",
    "72416C6C28225B6E616D653D645D22292E6C656E6774682626762E7075736828226E616D65222B4D2B222A5B2A5E247C217E5D3F3D22292C32213D3D",
    "652E717565727953656C6563746F72416C6C28223A656E61626C656422292E6C656E6774682626762E7075736828223A656E61626C6564222C223A64",
    "697361626C656422292C612E617070656E644368696C642865292E64697361626C65643D21302C32213D3D652E717565727953656C6563746F72416C",
    "6C28223A64697361626C656422292E6C656E6774682626762E7075736828223A656E61626C6564222C223A64697361626C656422292C652E71756572",
    "7953656C6563746F72416C6C28222A2C3A7822292C762E7075736828222C2E2A3A22297D29292C28642E6D61746368657353656C6563746F723D4B2E",
    "7465737428633D612E6D6174636865737C7C612E7765626B69744D61746368657353656C6563746F727C7C612E6D6F7A4D61746368657353656C6563",
    "746F727C7C612E6F4D61746368657353656C6563746F727C7C612E6D734D61746368657353656C6563746F722929262663652866756E6374696F6E28",
    "65297B642E646973636F6E6E65637465644D617463683D632E63616C6C28652C222A22292C632E63616C6C28652C225B73213D27275D3A7822292C73",
    "2E707573682822213D222C46297D292C763D762E6C656E67746826266E65772052656745787028762E6A6F696E28227C2229292C733D732E6C656E67",
    "746826266E65772052656745787028732E6A6F696E28227C2229292C743D4B2E7465737428612E636F6D70617265446F63756D656E74506F73697469",
    "6F6E292C793D747C7C4B2E7465737428612E636F6E7461696E73293F66756E6374696F6E28652C74297B766172206E3D393D3D3D652E6E6F64655479",
    "70653F652E646F63756D656E74456C656D656E743A652C723D742626742E706172656E744E6F64653B72657475726E20653D3D3D727C7C212821727C",
    "7C31213D3D722E6E6F6465547970657C7C21286E2E636F6E7461696E733F6E2E636F6E7461696E732872293A652E636F6D70617265446F63756D656E",
    "74506F736974696F6E2626313626652E636F6D70617265446F63756D656E74506F736974696F6E28722929297D3A66756E6374696F6E28652C74297B",
    "69662874297768696C6528743D742E706172656E744E6F646529696628743D3D3D652972657475726E21303B72657475726E21317D2C6A3D743F6675",
    "6E6374696F6E28652C74297B696628653D3D3D742972657475726E206C3D21302C303B766172206E3D21652E636F6D70617265446F63756D656E7450",
    "6F736974696F6E2D21742E636F6D70617265446F63756D656E74506F736974696F6E3B72657475726E206E7C7C283126286E3D28652E6F776E657244",
    "6F63756D656E747C7C65293D3D28742E6F776E6572446F63756D656E747C7C74293F652E636F6D70617265446F63756D656E74506F736974696F6E28",
    "74293A31297C7C21642E736F727444657461636865642626742E636F6D70617265446F63756D656E74506F736974696F6E2865293D3D3D6E3F653D3D",
    "437C7C652E6F776E6572446F63756D656E743D3D7026267928702C65293F2D313A743D3D437C7C742E6F776E6572446F63756D656E743D3D70262679",
    "28702C74293F313A753F5028752C65292D5028752C74293A303A34266E3F2D313A31297D3A66756E6374696F6E28652C74297B696628653D3D3D7429",
    "72657475726E206C3D21302C303B766172206E2C723D302C693D652E706172656E744E6F64652C6F3D742E706172656E744E6F64652C613D5B655D2C",
    "733D5B745D3B69662821697C7C216F2972657475726E20653D3D433F2D313A743D3D433F313A693F2D313A6F3F313A753F5028752C65292D5028752C",
    "74293A303B696628693D3D3D6F2972657475726E20706528652C74293B6E3D653B7768696C65286E3D6E2E706172656E744E6F646529612E756E7368",
    "696674286E293B6E3D743B7768696C65286E3D6E2E706172656E744E6F646529732E756E7368696674286E293B7768696C6528615B725D3D3D3D735B",
    "725D29722B2B3B72657475726E20723F706528615B725D2C735B725D293A615B725D3D3D703F2D313A735B725D3D3D703F313A307D292C437D2C7365",
    "2E6D6174636865733D66756E6374696F6E28652C74297B72657475726E20736528652C6E756C6C2C6E756C6C2C74297D2C73652E6D61746368657353",
    "656C6563746F723D66756E6374696F6E28652C74297B696628542865292C642E6D61746368657353656C6563746F722626452626214E5B742B222022",
    "5D26262821737C7C21732E746573742874292926262821767C7C21762E7465737428742929297472797B766172206E3D632E63616C6C28652C74293B",
    "6966286E7C7C642E646973636F6E6E65637465644D617463687C7C652E646F63756D656E7426263131213D3D652E646F63756D656E742E6E6F646554",
    "7970652972657475726E206E7D63617463682865297B4E28742C2130297D72657475726E20303C736528742C432C6E756C6C2C5B655D292E6C656E67",
    "74687D2C73652E636F6E7461696E733D66756E6374696F6E28652C74297B72657475726E28652E6F776E6572446F63756D656E747C7C6529213D4326",
    "26542865292C7928652C74297D2C73652E617474723D66756E6374696F6E28652C74297B28652E6F776E6572446F63756D656E747C7C6529213D4326",
    "26542865293B766172206E3D622E6174747248616E646C655B742E746F4C6F7765724361736528295D2C723D6E2626442E63616C6C28622E61747472",
    "48616E646C652C742E746F4C6F776572436173652829293F6E28652C742C2145293A766F696420303B72657475726E20766F69642030213D3D723F72",
    "3A642E617474726962757465737C7C21453F652E6765744174747269627574652874293A28723D652E6765744174747269627574654E6F6465287429",
    "292626722E7370656369666965643F722E76616C75653A6E756C6C7D2C73652E6573636170653D66756E6374696F6E2865297B72657475726E28652B",
    "2222292E7265706C6163652872652C6965297D2C73652E6572726F723D66756E6374696F6E2865297B7468726F77206E6577204572726F7228225379",
    "6E746178206572726F722C20756E7265636F676E697A65642065787072657373696F6E3A20222B65297D2C73652E756E69717565536F72743D66756E",
    "6374696F6E2865297B76617220742C6E3D5B5D2C723D302C693D303B6966286C3D21642E6465746563744475706C6963617465732C753D21642E736F",
    "7274537461626C652626652E736C6963652830292C652E736F7274286A292C6C297B7768696C6528743D655B692B2B5D29743D3D3D655B695D262628",
    "723D6E2E70757368286929293B7768696C6528722D2D29652E73706C696365286E5B725D2C31297D72657475726E20753D6E756C6C2C657D2C6F3D73",
    "652E676574546578743D66756E6374696F6E2865297B76617220742C6E3D22222C723D302C693D652E6E6F6465547970653B69662869297B69662831",
    "3D3D3D697C7C393D3D3D697C7C31313D3D3D69297B69662822737472696E67223D3D747970656F6620652E74657874436F6E74656E74297265747572",
    "6E20652E74657874436F6E74656E743B666F7228653D652E66697273744368696C643B653B653D652E6E6578745369626C696E67296E2B3D6F286529",
    "7D656C736520696628333D3D3D697C7C343D3D3D692972657475726E20652E6E6F646556616C75657D656C7365207768696C6528743D655B722B2B5D",
    "296E2B3D6F2874293B72657475726E206E7D2C28623D73652E73656C6563746F72733D7B63616368654C656E6774683A35302C637265617465507365",
    "75646F3A6C652C6D617463683A472C6174747248616E646C653A7B7D2C66696E643A7B7D2C72656C61746976653A7B223E223A7B6469723A22706172",
    "656E744E6F6465222C66697273743A21307D2C2220223A7B6469723A22706172656E744E6F6465227D2C222B223A7B6469723A2270726576696F7573",
    "5369626C696E67222C66697273743A21307D2C227E223A7B6469723A2270726576696F75735369626C696E67227D7D2C70726546696C7465723A7B41",
    "5454523A66756E6374696F6E2865297B72657475726E20655B315D3D655B315D2E7265706C6163652874652C6E65292C655B335D3D28655B335D7C7C",
    "655B345D7C7C655B355D7C7C2222292E7265706C6163652874652C6E65292C227E3D223D3D3D655B325D262628655B335D3D2220222B655B335D2B22",
    "2022292C652E736C69636528302C34297D2C4348494C443A66756E6374696F6E2865297B72657475726E20655B315D3D655B315D2E746F4C6F776572",
    "4361736528292C226E7468223D3D3D655B315D2E736C69636528302C33293F28655B335D7C7C73652E6572726F7228655B305D292C655B345D3D2B28",
    "655B345D3F655B355D2B28655B365D7C7C31293A322A28226576656E223D3D3D655B335D7C7C226F6464223D3D3D655B335D29292C655B355D3D2B28",
    "655B375D2B655B385D7C7C226F6464223D3D3D655B335D29293A655B335D262673652E6572726F7228655B305D292C657D2C50534555444F3A66756E",
    "6374696F6E2865297B76617220742C6E3D21655B365D2626655B325D3B72657475726E20472E4348494C442E7465737428655B305D293F6E756C6C3A",
    "28655B335D3F655B325D3D655B345D7C7C655B355D7C7C22223A6E2626582E74657374286E29262628743D68286E2C21302929262628743D6E2E696E",
    "6465784F66282229222C6E2E6C656E6774682D74292D6E2E6C656E67746829262628655B305D3D655B305D2E736C69636528302C74292C655B325D3D",
    "6E2E736C69636528302C7429292C652E736C69636528302C3329297D7D2C66696C7465723A7B5441473A66756E6374696F6E2865297B76617220743D",
    "652E7265706C6163652874652C6E65292E746F4C6F7765724361736528293B72657475726E222A223D3D3D653F66756E6374696F6E28297B72657475",
    "726E21307D3A66756E6374696F6E2865297B72657475726E20652E6E6F64654E616D652626652E6E6F64654E616D652E746F4C6F7765724361736528",
    "293D3D3D747D7D2C434C4153533A66756E6374696F6E2865297B76617220743D6D5B652B2220225D3B72657475726E20747C7C28743D6E6577205265",
    "674578702822285E7C222B4D2B2229222B652B2228222B4D2B227C242922292926266D28652C66756E6374696F6E2865297B72657475726E20742E74",
    "6573742822737472696E67223D3D747970656F6620652E636C6173734E616D652626652E636C6173734E616D657C7C22756E646566696E656422213D",
    "747970656F6620652E6765744174747269627574652626652E6765744174747269627574652822636C61737322297C7C2222297D297D2C415454523A",
    "66756E6374696F6E286E2C722C69297B72657475726E2066756E6374696F6E2865297B76617220743D73652E6174747228652C6E293B72657475726E",
    "206E756C6C3D3D743F22213D223D3D3D723A21727C7C28742B3D22222C223D223D3D3D723F743D3D3D693A22213D223D3D3D723F74213D3D693A225E",
    "3D223D3D3D723F692626303D3D3D742E696E6465784F662869293A222A3D223D3D3D723F6926262D313C742E696E6465784F662869293A22243D223D",
    "3D3D723F692626742E736C696365282D692E6C656E677468293D3D3D693A227E3D223D3D3D723F2D313C282220222B742E7265706C61636528422C22",
    "2022292B222022292E696E6465784F662869293A227C3D223D3D3D72262628743D3D3D697C7C742E736C69636528302C692E6C656E6774682B31293D",
    "3D3D692B222D2229297D7D2C4348494C443A66756E6374696F6E28682C652C742C672C76297B76617220793D226E746822213D3D682E736C69636528",
    "302C33292C6D3D226C61737422213D3D682E736C696365282D34292C783D226F662D74797065223D3D3D653B72657475726E20313D3D3D672626303D",
    "3D3D763F66756E6374696F6E2865297B72657475726E2121652E706172656E744E6F64657D3A66756E6374696F6E28652C742C6E297B76617220722C",
    "692C6F2C612C732C752C6C3D79213D3D6D3F226E6578745369626C696E67223A2270726576696F75735369626C696E67222C633D652E706172656E74",
    "4E6F64652C663D782626652E6E6F64654E616D652E746F4C6F7765724361736528292C703D216E262621782C643D21313B69662863297B6966287929",
    "7B7768696C65286C297B613D653B7768696C6528613D615B6C5D29696628783F612E6E6F64654E616D652E746F4C6F7765724361736528293D3D3D66",
    "3A313D3D3D612E6E6F6465547970652972657475726E21313B753D6C3D226F6E6C79223D3D3D68262621752626226E6578745369626C696E67227D72",
    "657475726E21307D696628753D5B6D3F632E66697273744368696C643A632E6C6173744368696C645D2C6D262670297B643D28733D28723D28693D28",
    "6F3D28613D63295B535D7C7C28615B535D3D7B7D29295B612E756E6971756549445D7C7C286F5B612E756E6971756549445D3D7B7D29295B685D7C7C",
    "5B5D295B305D3D3D3D6B2626725B315D292626725B325D2C613D732626632E6368696C644E6F6465735B735D3B7768696C6528613D2B2B7326266126",
    "26615B6C5D7C7C28643D733D30297C7C752E706F70282929696628313D3D3D612E6E6F64655479706526262B2B642626613D3D3D65297B695B685D3D",
    "5B6B2C732C645D3B627265616B7D7D656C73652069662870262628643D733D28723D28693D286F3D28613D65295B535D7C7C28615B535D3D7B7D2929",
    "5B612E756E6971756549445D7C7C286F5B612E756E6971756549445D3D7B7D29295B685D7C7C5B5D295B305D3D3D3D6B2626725B315D292C21313D3D",
    "3D64297768696C6528613D2B2B732626612626615B6C5D7C7C28643D733D30297C7C752E706F7028292969662828783F612E6E6F64654E616D652E74",
    "6F4C6F7765724361736528293D3D3D663A313D3D3D612E6E6F6465547970652926262B2B642626287026262828693D286F3D615B535D7C7C28615B53",
    "5D3D7B7D29295B612E756E6971756549445D7C7C286F5B612E756E6971756549445D3D7B7D29295B685D3D5B6B2C645D292C613D3D3D652929627265",
    "616B3B72657475726E28642D3D76293D3D3D677C7C6425673D3D302626303C3D642F677D7D7D2C50534555444F3A66756E6374696F6E28652C6F297B",
    "76617220742C613D622E70736575646F735B655D7C7C622E73657446696C746572735B652E746F4C6F7765724361736528295D7C7C73652E6572726F",
    "722822756E737570706F727465642070736575646F3A20222B65293B72657475726E20615B535D3F61286F293A313C612E6C656E6774683F28743D5B",
    "652C652C22222C6F5D2C622E73657446696C746572732E6861734F776E50726F706572747928652E746F4C6F776572436173652829293F6C65286675",
    "6E6374696F6E28652C74297B766172206E2C723D6128652C6F292C693D722E6C656E6774683B7768696C6528692D2D29655B6E3D5028652C725B695D",
    "295D3D2128745B6E5D3D725B695D297D293A66756E6374696F6E2865297B72657475726E206128652C302C74297D293A617D7D2C70736575646F733A",
    "7B6E6F743A6C652866756E6374696F6E2865297B76617220723D5B5D2C693D5B5D2C733D6628652E7265706C61636528242C2224312229293B726574",
    "75726E20735B535D3F6C652866756E6374696F6E28652C742C6E2C72297B76617220692C6F3D7328652C6E756C6C2C722C5B5D292C613D652E6C656E",
    "6774683B7768696C6528612D2D2928693D6F5B615D29262628655B615D3D2128745B615D3D6929297D293A66756E6374696F6E28652C742C6E297B72",
    "657475726E20725B305D3D652C7328722C6E756C6C2C6E2C69292C725B305D3D6E756C6C2C21692E706F7028297D7D292C6861733A6C652866756E63",
    "74696F6E2874297B72657475726E2066756E6374696F6E2865297B72657475726E20303C736528742C65292E6C656E6774687D7D292C636F6E746169",
    "6E733A6C652866756E6374696F6E2874297B72657475726E20743D742E7265706C6163652874652C6E65292C66756E6374696F6E2865297B72657475",
    "726E2D313C28652E74657874436F6E74656E747C7C6F286529292E696E6465784F662874297D7D292C6C616E673A6C652866756E6374696F6E286E29",
    "7B72657475726E20562E74657374286E7C7C2222297C7C73652E6572726F722822756E737570706F72746564206C616E673A20222B6E292C6E3D6E2E",
    "7265706C6163652874652C6E65292E746F4C6F7765724361736528292C66756E6374696F6E2865297B76617220743B646F7B696628743D453F652E6C",
    "616E673A652E6765744174747269627574652822786D6C3A6C616E6722297C7C652E67657441747472696275746528226C616E672229297265747572",
    "6E28743D742E746F4C6F776572436173652829293D3D3D6E7C7C303D3D3D742E696E6465784F66286E2B222D22297D7768696C652828653D652E7061",
    "72656E744E6F6465292626313D3D3D652E6E6F646554797065293B72657475726E21317D7D292C7461726765743A66756E6374696F6E2865297B7661",
    "7220743D6E2E6C6F636174696F6E26266E2E6C6F636174696F6E2E686173683B72657475726E20742626742E736C6963652831293D3D3D652E69647D",
    "2C726F6F743A66756E6374696F6E2865297B72657475726E20653D3D3D617D2C666F6375733A66756E6374696F6E2865297B72657475726E20653D3D",
    "3D432E616374697665456C656D656E7426262821432E686173466F6375737C7C432E686173466F6375732829292626212128652E747970657C7C652E",
    "687265667C7C7E652E746162496E646578297D2C656E61626C65643A6765282131292C64697361626C65643A6765282130292C636865636B65643A66",
    "756E6374696F6E2865297B76617220743D652E6E6F64654E616D652E746F4C6F7765724361736528293B72657475726E22696E707574223D3D3D7426",
    "262121652E636865636B65647C7C226F7074696F6E223D3D3D7426262121652E73656C65637465647D2C73656C65637465643A66756E6374696F6E28",
    "65297B72657475726E20652E706172656E744E6F64652626652E706172656E744E6F64652E73656C6563746564496E6465782C21303D3D3D652E7365",
    "6C65637465647D2C656D7074793A66756E6374696F6E2865297B666F7228653D652E66697273744368696C643B653B653D652E6E6578745369626C69",
    "6E6729696628652E6E6F6465547970653C362972657475726E21313B72657475726E21307D2C706172656E743A66756E6374696F6E2865297B726574",
    "75726E21622E70736575646F732E656D7074792865297D2C6865616465723A66756E6374696F6E2865297B72657475726E204A2E7465737428652E6E",
    "6F64654E616D65297D2C696E7075743A66756E6374696F6E2865297B72657475726E20512E7465737428652E6E6F64654E616D65297D2C627574746F",
    "6E3A66756E6374696F6E2865297B76617220743D652E6E6F64654E616D652E746F4C6F7765724361736528293B72657475726E22696E707574223D3D",
    "3D74262622627574746F6E223D3D3D652E747970657C7C22627574746F6E223D3D3D747D2C746578743A66756E6374696F6E2865297B76617220743B",
    "72657475726E22696E707574223D3D3D652E6E6F64654E616D652E746F4C6F77657243617365282926262274657874223D3D3D652E74797065262628",
    "6E756C6C3D3D28743D652E6765744174747269627574652822747970652229297C7C2274657874223D3D3D742E746F4C6F776572436173652829297D",
    "2C66697273743A76652866756E6374696F6E28297B72657475726E5B305D7D292C6C6173743A76652866756E6374696F6E28652C74297B7265747572",
    "6E5B742D315D7D292C65713A76652866756E6374696F6E28652C742C6E297B72657475726E5B6E3C303F6E2B743A6E5D7D292C6576656E3A76652866",
    "756E6374696F6E28652C74297B666F7228766172206E3D303B6E3C743B6E2B3D3229652E70757368286E293B72657475726E20657D292C6F64643A76",
    "652866756E6374696F6E28652C74297B666F7228766172206E3D313B6E3C743B6E2B3D3229652E70757368286E293B72657475726E20657D292C6C74",
    "3A76652866756E6374696F6E28652C742C6E297B666F722876617220723D6E3C303F6E2B743A743C6E3F743A6E3B303C3D2D2D723B29652E70757368",
    "2872293B72657475726E20657D292C67743A76652866756E6374696F6E28652C742C6E297B666F722876617220723D6E3C303F6E2B743A6E3B2B2B72",
    "3C743B29652E707573682872293B72657475726E20657D297D7D292E70736575646F732E6E74683D622E70736575646F732E65712C7B726164696F3A",
    "21302C636865636B626F783A21302C66696C653A21302C70617373776F72643A21302C696D6167653A21307D29622E70736575646F735B655D3D6465",
    "2865293B666F72286520696E7B7375626D69743A21302C72657365743A21307D29622E70736575646F735B655D3D68652865293B66756E6374696F6E",
    "206D6528297B7D66756E6374696F6E2078652865297B666F722876617220743D302C6E3D652E6C656E6774682C723D22223B743C6E3B742B2B29722B",
    "3D655B745D2E76616C75653B72657475726E20727D66756E6374696F6E20626528732C652C74297B76617220753D652E6469722C6C3D652E6E657874",
    "2C633D6C7C7C752C663D74262622706172656E744E6F6465223D3D3D632C703D722B2B3B72657475726E20652E66697273743F66756E6374696F6E28",
    "652C742C6E297B7768696C6528653D655B755D29696628313D3D3D652E6E6F6465547970657C7C662972657475726E207328652C742C6E293B726574",
    "75726E21317D3A66756E6374696F6E28652C742C6E297B76617220722C692C6F2C613D5B6B2C705D3B6966286E297B7768696C6528653D655B755D29",
    "69662828313D3D3D652E6E6F6465547970657C7C662926267328652C742C6E292972657475726E21307D656C7365207768696C6528653D655B755D29",
    "696628313D3D3D652E6E6F6465547970657C7C6629696628693D286F3D655B535D7C7C28655B535D3D7B7D29295B652E756E6971756549445D7C7C28",
    "6F5B652E756E6971756549445D3D7B7D292C6C26266C3D3D3D652E6E6F64654E616D652E746F4C6F77657243617365282929653D655B755D7C7C653B",
    "656C73657B69662828723D695B635D292626725B305D3D3D3D6B2626725B315D3D3D3D702972657475726E20615B325D3D725B325D3B69662828695B",
    "635D3D61295B325D3D7328652C742C6E292972657475726E21307D72657475726E21317D7D66756E6374696F6E2077652869297B72657475726E2031",
    "3C692E6C656E6774683F66756E6374696F6E28652C742C6E297B76617220723D692E6C656E6774683B7768696C6528722D2D2969662821695B725D28",
    "652C742C6E292972657475726E21313B72657475726E21307D3A695B305D7D66756E6374696F6E20546528652C742C6E2C722C69297B666F72287661",
    "72206F2C613D5B5D2C733D302C753D652E6C656E6774682C6C3D6E756C6C213D743B733C753B732B2B29286F3D655B735D292626286E2626216E286F",
    "2C722C69297C7C28612E70757368286F292C6C2626742E7075736828732929293B72657475726E20617D66756E6374696F6E20436528642C682C672C",
    "762C792C65297B72657475726E2076262621765B535D262628763D4365287629292C79262621795B535D262628793D436528792C6529292C6C652866",
    "756E6374696F6E28652C742C6E2C72297B76617220692C6F2C612C733D5B5D2C753D5B5D2C6C3D742E6C656E6774682C633D657C7C66756E6374696F",
    "6E28652C742C6E297B666F722876617220723D302C693D742E6C656E6774683B723C693B722B2B29736528652C745B725D2C6E293B72657475726E20",
    "6E7D28687C7C222A222C6E2E6E6F6465547970653F5B6E5D3A6E2C5B5D292C663D21647C7C21652626683F633A546528632C732C642C6E2C72292C70",
    "3D673F797C7C28653F643A6C7C7C76293F5B5D3A743A663B6966286726266728662C702C6E2C72292C76297B693D546528702C75292C7628692C5B5D",
    "2C6E2C72292C6F3D692E6C656E6774683B7768696C65286F2D2D2928613D695B6F5D29262628705B755B6F5D5D3D2128665B755B6F5D5D3D6129297D",
    "69662865297B696628797C7C64297B69662879297B693D5B5D2C6F3D702E6C656E6774683B7768696C65286F2D2D2928613D705B6F5D292626692E70",
    "75736828665B6F5D3D61293B79286E756C6C2C703D5B5D2C692C72297D6F3D702E6C656E6774683B7768696C65286F2D2D2928613D705B6F5D292626",
    "2D313C28693D793F5028652C61293A735B6F5D29262628655B695D3D2128745B695D3D6129297D7D656C736520703D546528703D3D3D743F702E7370",
    "6C696365286C2C702E6C656E677468293A70292C793F79286E756C6C2C742C702C72293A482E6170706C7928742C70297D297D66756E6374696F6E20",
    "45652865297B666F722876617220692C742C6E2C723D652E6C656E6774682C6F3D622E72656C61746976655B655B305D2E747970655D2C613D6F7C7C",
    "622E72656C61746976655B2220225D2C733D6F3F313A302C753D62652866756E6374696F6E2865297B72657475726E20653D3D3D697D2C612C213029",
    "2C6C3D62652866756E6374696F6E2865297B72657475726E2D313C5028692C65297D2C612C2130292C633D5B66756E6374696F6E28652C742C6E297B",
    "76617220723D216F2626286E7C7C74213D3D77297C7C2828693D74292E6E6F6465547970653F7528652C742C6E293A6C28652C742C6E29293B726574",
    "75726E20693D6E756C6C2C727D5D3B733C723B732B2B29696628743D622E72656C61746976655B655B735D2E747970655D29633D5B62652877652863",
    "292C74295D3B656C73657B69662828743D622E66696C7465725B655B735D2E747970655D2E6170706C79286E756C6C2C655B735D2E6D617463686573",
    "29295B535D297B666F72286E3D2B2B733B6E3C723B6E2B2B29696628622E72656C61746976655B655B6E5D2E747970655D29627265616B3B72657475",
    "726E20436528313C73262677652863292C313C732626786528652E736C69636528302C732D31292E636F6E636174287B76616C75653A2220223D3D3D",
    "655B732D325D2E747970653F222A223A22227D29292E7265706C61636528242C22243122292C742C733C6E2626456528652E736C69636528732C6E29",
    "292C6E3C722626456528653D652E736C696365286E29292C6E3C7226267865286529297D632E707573682874297D72657475726E2077652863297D72",
    "657475726E206D652E70726F746F747970653D622E66696C746572733D622E70736575646F732C622E73657446696C746572733D6E6577206D652C68",
    "3D73652E746F6B656E697A653D66756E6374696F6E28652C74297B766172206E2C722C692C6F2C612C732C752C6C3D785B652B2220225D3B6966286C",
    "2972657475726E20743F303A6C2E736C6963652830293B613D652C733D5B5D2C753D622E70726546696C7465723B7768696C652861297B666F72286F",
    "20696E206E26262128723D5F2E65786563286129297C7C2872262628613D612E736C69636528725B305D2E6C656E677468297C7C61292C732E707573",
    "6828693D5B5D29292C6E3D21312C28723D7A2E65786563286129292626286E3D722E736869667428292C692E70757368287B76616C75653A6E2C7479",
    "70653A725B305D2E7265706C61636528242C222022297D292C613D612E736C696365286E2E6C656E67746829292C622E66696C746572292128723D47",
    "5B6F5D2E65786563286129297C7C755B6F5D26262128723D755B6F5D287229297C7C286E3D722E736869667428292C692E70757368287B76616C7565",
    "3A6E2C747970653A6F2C6D6174636865733A727D292C613D612E736C696365286E2E6C656E67746829293B696628216E29627265616B7D7265747572",
    "6E20743F612E6C656E6774683A613F73652E6572726F722865293A7828652C73292E736C6963652830297D2C663D73652E636F6D70696C653D66756E",
    "6374696F6E28652C74297B766172206E2C762C792C6D2C782C722C693D5B5D2C6F3D5B5D2C613D415B652B2220225D3B6966282161297B747C7C2874",
    "3D68286529292C6E3D742E6C656E6774683B7768696C65286E2D2D2928613D456528745B6E5D29295B535D3F692E707573682861293A6F2E70757368",
    "2861293B28613D4128652C28763D6F2C6D3D303C28793D69292E6C656E6774682C783D303C762E6C656E6774682C723D66756E6374696F6E28652C74",
    "2C6E2C722C69297B766172206F2C612C732C753D302C6C3D2230222C633D6526265B5D2C663D5B5D2C703D772C643D657C7C782626622E66696E642E",
    "54414728222A222C69292C683D6B2B3D6E756C6C3D3D703F313A4D6174682E72616E646F6D28297C7C2E312C673D642E6C656E6774683B666F722869",
    "262628773D743D3D437C7C747C7C69293B6C213D3D6726266E756C6C213D286F3D645B6C5D293B6C2B2B297B6966287826266F297B613D302C747C7C",
    "6F2E6F776E6572446F63756D656E743D3D437C7C2854286F292C6E3D2145293B7768696C6528733D765B612B2B5D2969662873286F2C747C7C432C6E",
    "29297B722E70757368286F293B627265616B7D692626286B3D68297D6D262628286F3D217326266F292626752D2D2C652626632E70757368286F2929",
    "7D696628752B3D6C2C6D26266C213D3D75297B613D303B7768696C6528733D795B612B2B5D297328632C662C742C6E293B69662865297B696628303C",
    "75297768696C65286C2D2D29635B6C5D7C7C665B6C5D7C7C28665B6C5D3D712E63616C6C287229293B663D54652866297D482E6170706C7928722C66",
    "292C69262621652626303C662E6C656E6774682626313C752B792E6C656E677468262673652E756E69717565536F72742872297D72657475726E2069",
    "2626286B3D682C773D70292C637D2C6D3F6C652872293A722929292E73656C6563746F723D657D72657475726E20617D2C673D73652E73656C656374",
    "3D66756E6374696F6E28652C742C6E2C72297B76617220692C6F2C612C732C752C6C3D2266756E6374696F6E223D3D747970656F6620652626652C63",
    "3D217226266828653D6C2E73656C6563746F727C7C65293B6966286E3D6E7C7C5B5D2C313D3D3D632E6C656E677468297B696628323C286F3D635B30",
    "5D3D635B305D2E736C696365283029292E6C656E6774682626224944223D3D3D28613D6F5B305D292E747970652626393D3D3D742E6E6F6465547970",
    "652626452626622E72656C61746976655B6F5B315D2E747970655D297B6966282128743D28622E66696E642E494428612E6D6174636865735B305D2E",
    "7265706C6163652874652C6E65292C74297C7C5B5D295B305D292972657475726E206E3B6C262628743D742E706172656E744E6F6465292C653D652E",
    "736C696365286F2E736869667428292E76616C75652E6C656E677468297D693D472E6E65656473436F6E746578742E746573742865293F303A6F2E6C",
    "656E6774683B7768696C6528692D2D297B696628613D6F5B695D2C622E72656C61746976655B733D612E747970655D29627265616B3B69662828753D",
    "622E66696E645B735D29262628723D7528612E6D6174636865735B305D2E7265706C6163652874652C6E65292C65652E74657374286F5B305D2E7479",
    "7065292626796528742E706172656E744E6F6465297C7C742929297B6966286F2E73706C69636528692C31292C2128653D722E6C656E677468262678",
    "65286F29292972657475726E20482E6170706C79286E2C72292C6E3B627265616B7D7D7D72657475726E286C7C7C6628652C63292928722C742C2145",
    "2C6E2C21747C7C65652E746573742865292626796528742E706172656E744E6F6465297C7C74292C6E7D2C642E736F7274537461626C653D532E7370",
    "6C6974282222292E736F7274286A292E6A6F696E282222293D3D3D532C642E6465746563744475706C6963617465733D21216C2C5428292C642E736F",
    "727444657461636865643D63652866756E6374696F6E2865297B72657475726E203126652E636F6D70617265446F63756D656E74506F736974696F6E",
    "28432E637265617465456C656D656E7428226669656C647365742229297D292C63652866756E6374696F6E2865297B72657475726E20652E696E6E65",
    "7248544D4C3D223C6120687265663D2723273E3C2F613E222C2223223D3D3D652E66697273744368696C642E67657441747472696275746528226872",
    "656622297D297C7C66652822747970657C687265667C6865696768747C7769647468222C66756E6374696F6E28652C742C6E297B696628216E297265",
    "7475726E20652E67657441747472696275746528742C2274797065223D3D3D742E746F4C6F7765724361736528293F313A32297D292C642E61747472",
    "696275746573262663652866756E6374696F6E2865297B72657475726E20652E696E6E657248544D4C3D223C696E7075742F3E222C652E6669727374",
    "4368696C642E736574417474726962757465282276616C7565222C2222292C22223D3D3D652E66697273744368696C642E6765744174747269627574",
    "65282276616C756522297D297C7C6665282276616C7565222C66756E6374696F6E28652C742C6E297B696628216E262622696E707574223D3D3D652E",
    "6E6F64654E616D652E746F4C6F7765724361736528292972657475726E20652E64656661756C7456616C75657D292C63652866756E6374696F6E2865",
    "297B72657475726E206E756C6C3D3D652E676574417474726962757465282264697361626C656422297D297C7C666528522C66756E6374696F6E2865",
    "2C742C6E297B76617220723B696628216E2972657475726E21303D3D3D655B745D3F742E746F4C6F7765724361736528293A28723D652E6765744174",
    "747269627574654E6F6465287429292626722E7370656369666965643F722E76616C75653A6E756C6C7D292C73657D2843293B532E66696E643D642C",
    "532E657870723D642E73656C6563746F72732C532E657870725B223A225D3D532E657870722E70736575646F732C532E756E69717565536F72743D53",
    "2E756E697175653D642E756E69717565536F72742C532E746578743D642E676574546578742C532E6973584D4C446F633D642E6973584D4C2C532E63",
    "6F6E7461696E733D642E636F6E7461696E732C532E65736361706553656C6563746F723D642E6573636170653B76617220683D66756E6374696F6E28",
    "652C742C6E297B76617220723D5B5D2C693D766F69642030213D3D6E3B7768696C652828653D655B745D29262639213D3D652E6E6F64655479706529",
    "696628313D3D3D652E6E6F646554797065297B696628692626532865292E6973286E2929627265616B3B722E707573682865297D72657475726E2072",
    "7D2C543D66756E6374696F6E28652C74297B666F7228766172206E3D5B5D3B653B653D652E6E6578745369626C696E6729313D3D3D652E6E6F646554",
    "797065262665213D3D7426266E2E707573682865293B72657475726E206E7D2C6B3D532E657870722E6D617463682E6E65656473436F6E746578743B",
    "66756E6374696F6E204128652C74297B72657475726E20652E6E6F64654E616D652626652E6E6F64654E616D652E746F4C6F7765724361736528293D",
    "3D3D742E746F4C6F7765724361736528297D766172204E3D2F5E3C285B612D7A5D5B5E5C2F5C303E3A5C7832305C745C725C6E5C665D2A295B5C7832",
    "305C745C725C6E5C665D2A5C2F3F3E283F3A3C5C2F5C313E7C29242F693B66756E6374696F6E206A28652C6E2C72297B72657475726E206D286E293F",
    "532E6772657028652C66756E6374696F6E28652C74297B72657475726E21216E2E63616C6C28652C742C6529213D3D727D293A6E2E6E6F6465547970",
    "653F532E6772657028652C66756E6374696F6E2865297B72657475726E20653D3D3D6E213D3D727D293A22737472696E6722213D747970656F66206E",
    "3F532E6772657028652C66756E6374696F6E2865297B72657475726E2D313C692E63616C6C286E2C6529213D3D727D293A532E66696C746572286E2C",
    "652C72297D532E66696C7465723D66756E6374696F6E28652C742C6E297B76617220723D745B305D3B72657475726E206E262628653D223A6E6F7428",
    "222B652B222922292C313D3D3D742E6C656E6774682626313D3D3D722E6E6F6465547970653F532E66696E642E6D61746368657353656C6563746F72",
    "28722C65293F5B725D3A5B5D3A532E66696E642E6D61746368657328652C532E6772657028742C66756E6374696F6E2865297B72657475726E20313D",
    "3D3D652E6E6F6465547970657D29297D2C532E666E2E657874656E64287B66696E643A66756E6374696F6E2865297B76617220742C6E2C723D746869",
    "732E6C656E6774682C693D746869733B69662822737472696E6722213D747970656F6620652972657475726E20746869732E70757368537461636B28",
    "532865292E66696C7465722866756E6374696F6E28297B666F7228743D303B743C723B742B2B29696628532E636F6E7461696E7328695B745D2C7468",
    "6973292972657475726E21307D29293B666F72286E3D746869732E70757368537461636B285B5D292C743D303B743C723B742B2B29532E66696E6428",
    "652C695B745D2C6E293B72657475726E20313C723F532E756E69717565536F7274286E293A6E7D2C66696C7465723A66756E6374696F6E2865297B72",
    "657475726E20746869732E70757368537461636B286A28746869732C657C7C5B5D2C213129297D2C6E6F743A66756E6374696F6E2865297B72657475",
    "726E20746869732E70757368537461636B286A28746869732C657C7C5B5D2C213029297D2C69733A66756E6374696F6E2865297B72657475726E2121",
    "6A28746869732C22737472696E67223D3D747970656F66206526266B2E746573742865293F532865293A657C7C5B5D2C2131292E6C656E6774687D7D",
    "293B76617220442C713D2F5E283F3A5C732A283C5B5C775C575D2B3E295B5E3E5D2A7C23285B5C772D5D2B2929242F3B28532E666E2E696E69743D66",
    "756E6374696F6E28652C742C6E297B76617220722C693B69662821652972657475726E20746869733B6966286E3D6E7C7C442C22737472696E67223D",
    "3D747970656F662065297B6966282128723D223C223D3D3D655B305D2626223E223D3D3D655B652E6C656E6774682D315D2626333C3D652E6C656E67",
    "74683F5B6E756C6C2C652C6E756C6C5D3A712E65786563286529297C7C21725B315D2626742972657475726E21747C7C742E6A71756572793F28747C",
    "7C6E292E66696E642865293A746869732E636F6E7374727563746F722874292E66696E642865293B696628725B315D297B696628743D7420696E7374",
    "616E63656F6620533F745B305D3A742C532E6D6572676528746869732C532E706172736548544D4C28725B315D2C742626742E6E6F6465547970653F",
    "742E6F776E6572446F63756D656E747C7C743A452C213029292C4E2E7465737428725B315D292626532E6973506C61696E4F626A6563742874292966",
    "6F72287220696E2074296D28746869735B725D293F746869735B725D28745B725D293A746869732E6174747228722C745B725D293B72657475726E20",
    "746869737D72657475726E28693D452E676574456C656D656E744279496428725B325D2929262628746869735B305D3D692C746869732E6C656E6774",
    "683D31292C746869737D72657475726E20652E6E6F6465547970653F28746869735B305D3D652C746869732E6C656E6774683D312C74686973293A6D",
    "2865293F766F69642030213D3D6E2E72656164793F6E2E72656164792865293A652853293A532E6D616B65417272617928652C74686973297D292E70",
    "726F746F747970653D532E666E2C443D532845293B766172204C3D2F5E283F3A706172656E74737C70726576283F3A556E74696C7C416C6C29292F2C",
    "483D7B6368696C6472656E3A21302C636F6E74656E74733A21302C6E6578743A21302C707265763A21307D3B66756E6374696F6E204F28652C74297B",
    "7768696C652828653D655B745D29262631213D3D652E6E6F646554797065293B72657475726E20657D532E666E2E657874656E64287B6861733A6675",
    "6E6374696F6E2865297B76617220743D5328652C74686973292C6E3D742E6C656E6774683B72657475726E20746869732E66696C7465722866756E63",
    "74696F6E28297B666F722876617220653D303B653C6E3B652B2B29696628532E636F6E7461696E7328746869732C745B655D292972657475726E2130",
    "7D297D2C636C6F736573743A66756E6374696F6E28652C74297B766172206E2C723D302C693D746869732E6C656E6774682C6F3D5B5D2C613D227374",
    "72696E6722213D747970656F6620652626532865293B696628216B2E7465737428652929666F72283B723C693B722B2B29666F72286E3D746869735B",
    "725D3B6E26266E213D3D743B6E3D6E2E706172656E744E6F6465296966286E2E6E6F6465547970653C3131262628613F2D313C612E696E646578286E",
    "293A313D3D3D6E2E6E6F6465547970652626532E66696E642E6D61746368657353656C6563746F72286E2C652929297B6F2E70757368286E293B6272",
    "65616B7D72657475726E20746869732E70757368537461636B28313C6F2E6C656E6774683F532E756E69717565536F7274286F293A6F297D2C696E64",
    "65783A66756E6374696F6E2865297B72657475726E20653F22737472696E67223D3D747970656F6620653F692E63616C6C28532865292C746869735B",
    "305D293A692E63616C6C28746869732C652E6A71756572793F655B305D3A65293A746869735B305D2626746869735B305D2E706172656E744E6F6465",
    "3F746869732E666972737428292E70726576416C6C28292E6C656E6774683A2D317D2C6164643A66756E6374696F6E28652C74297B72657475726E20",
    "746869732E70757368537461636B28532E756E69717565536F727428532E6D6572676528746869732E67657428292C5328652C74292929297D2C6164",
    "644261636B3A66756E6374696F6E2865297B72657475726E20746869732E616464286E756C6C3D3D653F746869732E707265764F626A6563743A7468",
    "69732E707265764F626A6563742E66696C746572286529297D7D292C532E65616368287B706172656E743A66756E6374696F6E2865297B7661722074",
    "3D652E706172656E744E6F64653B72657475726E207426263131213D3D742E6E6F6465547970653F743A6E756C6C7D2C706172656E74733A66756E63",
    "74696F6E2865297B72657475726E206828652C22706172656E744E6F646522297D2C706172656E7473556E74696C3A66756E6374696F6E28652C742C",
    "6E297B72657475726E206828652C22706172656E744E6F6465222C6E297D2C6E6578743A66756E6374696F6E2865297B72657475726E204F28652C22",
    "6E6578745369626C696E6722297D2C707265763A66756E6374696F6E2865297B72657475726E204F28652C2270726576696F75735369626C696E6722",
    "297D2C6E657874416C6C3A66756E6374696F6E2865297B72657475726E206828652C226E6578745369626C696E6722297D2C70726576416C6C3A6675",
    "6E6374696F6E2865297B72657475726E206828652C2270726576696F75735369626C696E6722297D2C6E657874556E74696C3A66756E6374696F6E28",
    "652C742C6E297B72657475726E206828652C226E6578745369626C696E67222C6E297D2C70726576556E74696C3A66756E6374696F6E28652C742C6E",
    "297B72657475726E206828652C2270726576696F75735369626C696E67222C6E297D2C7369626C696E67733A66756E6374696F6E2865297B72657475",
    "726E20542828652E706172656E744E6F64657C7C7B7D292E66697273744368696C642C65297D2C6368696C6472656E3A66756E6374696F6E2865297B",
    "72657475726E205428652E66697273744368696C64297D2C636F6E74656E74733A66756E6374696F6E2865297B72657475726E206E756C6C213D652E",
    "636F6E74656E74446F63756D656E7426267228652E636F6E74656E74446F63756D656E74293F652E636F6E74656E74446F63756D656E743A28412865",
    "2C2274656D706C6174652229262628653D652E636F6E74656E747C7C65292C532E6D65726765285B5D2C652E6368696C644E6F64657329297D7D2C66",
    "756E6374696F6E28722C69297B532E666E5B725D3D66756E6374696F6E28652C74297B766172206E3D532E6D617028746869732C692C65293B726574",
    "75726E22556E74696C22213D3D722E736C696365282D3529262628743D65292C74262622737472696E67223D3D747970656F6620742626286E3D532E",
    "66696C74657228742C6E29292C313C746869732E6C656E677468262628485B725D7C7C532E756E69717565536F7274286E292C4C2E74657374287229",
    "26266E2E726576657273652829292C746869732E70757368537461636B286E297D7D293B76617220503D2F5B5E5C7832305C745C725C6E5C665D2B2F",
    "673B66756E6374696F6E20522865297B72657475726E20657D66756E6374696F6E204D2865297B7468726F7720657D66756E6374696F6E204928652C",
    "742C6E2C72297B76617220693B7472797B6526266D28693D652E70726F6D697365293F692E63616C6C2865292E646F6E652874292E6661696C286E29",
    "3A6526266D28693D652E7468656E293F692E63616C6C28652C742C6E293A742E6170706C7928766F696420302C5B655D2E736C696365287229297D63",
    "617463682865297B6E2E6170706C7928766F696420302C5B655D297D7D532E43616C6C6261636B733D66756E6374696F6E2872297B76617220652C6E",
    "3B723D22737472696E67223D3D747970656F6620723F28653D722C6E3D7B7D2C532E6561636828652E6D617463682850297C7C5B5D2C66756E637469",
    "6F6E28652C74297B6E5B745D3D21307D292C6E293A532E657874656E64287B7D2C72293B76617220692C742C6F2C612C733D5B5D2C753D5B5D2C6C3D",
    "2D312C633D66756E6374696F6E28297B666F7228613D617C7C722E6F6E63652C6F3D693D21303B752E6C656E6774683B6C3D2D31297B743D752E7368",
    "69667428293B7768696C65282B2B6C3C732E6C656E6774682921313D3D3D735B6C5D2E6170706C7928745B305D2C745B315D292626722E73746F704F",
    "6E46616C73652626286C3D732E6C656E6774682C743D2131297D722E6D656D6F72797C7C28743D2131292C693D21312C61262628733D743F5B5D3A22",
    "22297D2C663D7B6164643A66756E6374696F6E28297B72657475726E207326262874262621692626286C3D732E6C656E6774682D312C752E70757368",
    "287429292C66756E6374696F6E206E2865297B532E6561636828652C66756E6374696F6E28652C74297B6D2874293F722E756E697175652626662E68",
    "61732874297C7C732E707573682874293A742626742E6C656E677468262622737472696E6722213D3D7728742926266E2874297D297D28617267756D",
    "656E7473292C74262621692626632829292C746869737D2C72656D6F76653A66756E6374696F6E28297B72657475726E20532E656163682861726775",
    "6D656E74732C66756E6374696F6E28652C74297B766172206E3B7768696C65282D313C286E3D532E696E417272617928742C732C6E292929732E7370",
    "6C696365286E2C31292C6E3C3D6C26266C2D2D7D292C746869737D2C6861733A66756E6374696F6E2865297B72657475726E20653F2D313C532E696E",
    "417272617928652C73293A303C732E6C656E6774687D2C656D7074793A66756E6374696F6E28297B72657475726E2073262628733D5B5D292C746869",
    "737D2C64697361626C653A66756E6374696F6E28297B72657475726E20613D753D5B5D2C733D743D22222C746869737D2C64697361626C65643A6675",
    "6E6374696F6E28297B72657475726E21737D2C6C6F636B3A66756E6374696F6E28297B72657475726E20613D753D5B5D2C747C7C697C7C28733D743D",
    "2222292C746869737D2C6C6F636B65643A66756E6374696F6E28297B72657475726E2121617D2C66697265576974683A66756E6374696F6E28652C74",
    "297B72657475726E20617C7C28743D5B652C28743D747C7C5B5D292E736C6963653F742E736C69636528293A745D2C752E707573682874292C697C7C",
    "632829292C746869737D2C666972653A66756E6374696F6E28297B72657475726E20662E666972655769746828746869732C617267756D656E747329",
    "2C746869737D2C66697265643A66756E6374696F6E28297B72657475726E21216F7D7D3B72657475726E20667D2C532E657874656E64287B44656665",
    "727265643A66756E6374696F6E2865297B766172206F3D5B5B226E6F74696679222C2270726F6772657373222C532E43616C6C6261636B7328226D65",
    "6D6F727922292C532E43616C6C6261636B7328226D656D6F727922292C325D2C5B227265736F6C7665222C22646F6E65222C532E43616C6C6261636B",
    "7328226F6E6365206D656D6F727922292C532E43616C6C6261636B7328226F6E6365206D656D6F727922292C302C227265736F6C766564225D2C5B22",
    "72656A656374222C226661696C222C532E43616C6C6261636B7328226F6E6365206D656D6F727922292C532E43616C6C6261636B7328226F6E636520",
    "6D656D6F727922292C312C2272656A6563746564225D5D2C693D2270656E64696E67222C613D7B73746174653A66756E6374696F6E28297B72657475",
    "726E20697D2C616C776179733A66756E6374696F6E28297B72657475726E20732E646F6E6528617267756D656E7473292E6661696C28617267756D65",
    "6E7473292C746869737D2C226361746368223A66756E6374696F6E2865297B72657475726E20612E7468656E286E756C6C2C65297D2C706970653A66",
    "756E6374696F6E28297B76617220693D617267756D656E74733B72657475726E20532E44656665727265642866756E6374696F6E2872297B532E6561",
    "6368286F2C66756E6374696F6E28652C74297B766172206E3D6D28695B745B345D5D292626695B745B345D5D3B735B745B315D5D2866756E6374696F",
    "6E28297B76617220653D6E26266E2E6170706C7928746869732C617267756D656E7473293B6526266D28652E70726F6D697365293F652E70726F6D69",
    "736528292E70726F677265737328722E6E6F74696679292E646F6E6528722E7265736F6C7665292E6661696C28722E72656A656374293A725B745B30",
    "5D2B2257697468225D28746869732C6E3F5B655D3A617267756D656E7473297D297D292C693D6E756C6C7D292E70726F6D69736528297D2C7468656E",
    "3A66756E6374696F6E28742C6E2C72297B76617220753D303B66756E6374696F6E206C28692C6F2C612C73297B72657475726E2066756E6374696F6E",
    "28297B766172206E3D746869732C723D617267756D656E74732C653D66756E6374696F6E28297B76617220652C743B6966282128693C7529297B6966",
    "2828653D612E6170706C79286E2C7229293D3D3D6F2E70726F6D6973652829297468726F77206E657720547970654572726F7228225468656E61626C",
    "652073656C662D7265736F6C7574696F6E22293B743D65262628226F626A656374223D3D747970656F6620657C7C2266756E6374696F6E223D3D7479",
    "70656F662065292626652E7468656E2C6D2874293F733F742E63616C6C28652C6C28752C6F2C522C73292C6C28752C6F2C4D2C7329293A28752B2B2C",
    "742E63616C6C28652C6C28752C6F2C522C73292C6C28752C6F2C4D2C73292C6C28752C6F2C522C6F2E6E6F74696679576974682929293A2861213D3D",
    "522626286E3D766F696420302C723D5B655D292C28737C7C6F2E7265736F6C76655769746829286E2C7229297D7D2C743D733F653A66756E6374696F",
    "6E28297B7472797B6528297D63617463682865297B532E44656665727265642E657863657074696F6E486F6F6B2626532E44656665727265642E6578",
    "63657074696F6E486F6F6B28652C742E737461636B5472616365292C753C3D692B3126262861213D3D4D2626286E3D766F696420302C723D5B655D29",
    "2C6F2E72656A65637457697468286E2C7229297D7D3B693F7428293A28532E44656665727265642E676574537461636B486F6F6B262628742E737461",
    "636B54726163653D532E44656665727265642E676574537461636B486F6F6B2829292C432E73657454696D656F7574287429297D7D72657475726E20",
    "532E44656665727265642866756E6374696F6E2865297B6F5B305D5B335D2E616464286C28302C652C6D2872293F723A522C652E6E6F746966795769",
    "746829292C6F5B315D5B335D2E616464286C28302C652C6D2874293F743A5229292C6F5B325D5B335D2E616464286C28302C652C6D286E293F6E3A4D",
    "29297D292E70726F6D69736528297D2C70726F6D6973653A66756E6374696F6E2865297B72657475726E206E756C6C213D653F532E657874656E6428",
    "652C61293A617D7D2C733D7B7D3B72657475726E20532E65616368286F2C66756E6374696F6E28652C74297B766172206E3D745B325D2C723D745B35",
    "5D3B615B745B315D5D3D6E2E6164642C7226266E2E6164642866756E6374696F6E28297B693D727D2C6F5B332D655D5B325D2E64697361626C652C6F",
    "5B332D655D5B335D2E64697361626C652C6F5B305D5B325D2E6C6F636B2C6F5B305D5B335D2E6C6F636B292C6E2E61646428745B335D2E6669726529",
    "2C735B745B305D5D3D66756E6374696F6E28297B72657475726E20735B745B305D2B2257697468225D28746869733D3D3D733F766F696420303A7468",
    "69732C617267756D656E7473292C746869737D2C735B745B305D2B2257697468225D3D6E2E66697265576974687D292C612E70726F6D697365287329",
    "2C652626652E63616C6C28732C73292C737D2C7768656E3A66756E6374696F6E2865297B766172206E3D617267756D656E74732E6C656E6774682C74",
    "3D6E2C723D41727261792874292C693D732E63616C6C28617267756D656E7473292C6F3D532E446566657272656428292C613D66756E6374696F6E28",
    "74297B72657475726E2066756E6374696F6E2865297B725B745D3D746869732C695B745D3D313C617267756D656E74732E6C656E6774683F732E6361",
    "6C6C28617267756D656E7473293A652C2D2D6E7C7C6F2E7265736F6C76655769746828722C69297D7D3B6966286E3C3D312626284928652C6F2E646F",
    "6E652861287429292E7265736F6C76652C6F2E72656A6563742C216E292C2270656E64696E67223D3D3D6F2E737461746528297C7C6D28695B745D26",
    "26695B745D2E7468656E29292972657475726E206F2E7468656E28293B7768696C6528742D2D294928695B745D2C612874292C6F2E72656A65637429",
    "3B72657475726E206F2E70726F6D69736528297D7D293B76617220573D2F5E284576616C7C496E7465726E616C7C52616E67657C5265666572656E63",
    "657C53796E7461787C547970657C555249294572726F72242F3B532E44656665727265642E657863657074696F6E486F6F6B3D66756E6374696F6E28",
    "652C74297B432E636F6E736F6C652626432E636F6E736F6C652E7761726E2626652626572E7465737428652E6E616D65292626432E636F6E736F6C65",
    "2E7761726E28226A51756572792E446566657272656420657863657074696F6E3A20222B652E6D6573736167652C652E737461636B2C74297D2C532E",
    "7265616479457863657074696F6E3D66756E6374696F6E2865297B432E73657454696D656F75742866756E6374696F6E28297B7468726F7720657D29",
    "7D3B76617220463D532E446566657272656428293B66756E6374696F6E204228297B452E72656D6F76654576656E744C697374656E65722822444F4D",
    "436F6E74656E744C6F61646564222C42292C432E72656D6F76654576656E744C697374656E657228226C6F6164222C42292C532E726561647928297D",
    "532E666E2E72656164793D66756E6374696F6E2865297B72657475726E20462E7468656E2865295B226361746368225D2866756E6374696F6E286529",
    "7B532E7265616479457863657074696F6E2865297D292C746869737D2C532E657874656E64287B697352656164793A21312C7265616479576169743A",
    "312C72656164793A66756E6374696F6E2865297B2821303D3D3D653F2D2D532E7265616479576169743A532E69735265616479297C7C28532E697352",
    "656164793D213029213D3D652626303C2D2D532E7265616479576169747C7C462E7265736F6C76655769746828452C5B535D297D7D292C532E726561",
    "64792E7468656E3D462E7468656E2C22636F6D706C657465223D3D3D452E726561647953746174657C7C226C6F6164696E6722213D3D452E72656164",
    "795374617465262621452E646F63756D656E74456C656D656E742E646F5363726F6C6C3F432E73657454696D656F757428532E7265616479293A2845",
    "2E6164644576656E744C697374656E65722822444F4D436F6E74656E744C6F61646564222C42292C432E6164644576656E744C697374656E65722822",
    "6C6F6164222C4229293B76617220243D66756E6374696F6E28652C742C6E2C722C692C6F2C61297B76617220733D302C753D652E6C656E6774682C6C",
    "3D6E756C6C3D3D6E3B696628226F626A656374223D3D3D77286E2929666F72287320696E20693D21302C6E292428652C742C732C6E5B735D2C21302C",
    "6F2C61293B656C736520696628766F69642030213D3D72262628693D21302C6D2872297C7C28613D2130292C6C262628613F28742E63616C6C28652C",
    "72292C743D6E756C6C293A286C3D742C743D66756E6374696F6E28652C742C6E297B72657475726E206C2E63616C6C28532865292C6E297D29292C74",
    "2929666F72283B733C753B732B2B297428655B735D2C6E2C613F723A722E63616C6C28655B735D2C732C7428655B735D2C6E2929293B72657475726E",
    "20693F653A6C3F742E63616C6C2865293A753F7428655B305D2C6E293A6F7D2C5F3D2F5E2D6D732D2F2C7A3D2F2D285B612D7A5D292F673B66756E63",
    "74696F6E205528652C74297B72657475726E20742E746F55707065724361736528297D66756E6374696F6E20582865297B72657475726E20652E7265",
    "706C616365285F2C226D732D22292E7265706C616365287A2C55297D76617220563D66756E6374696F6E2865297B72657475726E20313D3D3D652E6E",
    "6F6465547970657C7C393D3D3D652E6E6F6465547970657C7C212B652E6E6F6465547970657D3B66756E6374696F6E204728297B746869732E657870",
    "616E646F3D532E657870616E646F2B472E7569642B2B7D472E7569643D312C472E70726F746F747970653D7B63616368653A66756E6374696F6E2865",
    "297B76617220743D655B746869732E657870616E646F5D3B72657475726E20747C7C28743D7B7D2C56286529262628652E6E6F6465547970653F655B",
    "746869732E657870616E646F5D3D743A4F626A6563742E646566696E6550726F706572747928652C746869732E657870616E646F2C7B76616C75653A",
    "742C636F6E666967757261626C653A21307D2929292C747D2C7365743A66756E6374696F6E28652C742C6E297B76617220722C693D746869732E6361",
    "6368652865293B69662822737472696E67223D3D747970656F66207429695B582874295D3D6E3B656C736520666F72287220696E207429695B582872",
    "295D3D745B725D3B72657475726E20697D2C6765743A66756E6374696F6E28652C74297B72657475726E20766F696420303D3D3D743F746869732E63",
    "616368652865293A655B746869732E657870616E646F5D2626655B746869732E657870616E646F5D5B582874295D7D2C6163636573733A66756E6374",
    "696F6E28652C742C6E297B72657475726E20766F696420303D3D3D747C7C74262622737472696E67223D3D747970656F6620742626766F696420303D",
    "3D3D6E3F746869732E67657428652C74293A28746869732E73657428652C742C6E292C766F69642030213D3D6E3F6E3A74297D2C72656D6F76653A66",
    "756E6374696F6E28652C74297B766172206E2C723D655B746869732E657870616E646F5D3B696628766F69642030213D3D72297B696628766F696420",
    "30213D3D74297B6E3D28743D41727261792E697341727261792874293F742E6D61702858293A28743D5828742929696E20723F5B745D3A742E6D6174",
    "63682850297C7C5B5D292E6C656E6774683B7768696C65286E2D2D2964656C65746520725B745B6E5D5D7D28766F696420303D3D3D747C7C532E6973",
    "456D7074794F626A65637428722929262628652E6E6F6465547970653F655B746869732E657870616E646F5D3D766F696420303A64656C6574652065",
    "5B746869732E657870616E646F5D297D7D2C686173446174613A66756E6374696F6E2865297B76617220743D655B746869732E657870616E646F5D3B",
    "72657475726E20766F69642030213D3D74262621532E6973456D7074794F626A6563742874297D7D3B76617220593D6E657720472C513D6E65772047",
    "2C4A3D2F5E283F3A5C7B5B5C775C575D2A5C7D7C5C5B5B5C775C575D2A5C5D29242F2C4B3D2F5B412D5A5D2F673B66756E6374696F6E205A28652C74",
    "2C6E297B76617220722C693B696628766F696420303D3D3D6E2626313D3D3D652E6E6F64655479706529696628723D22646174612D222B742E726570",
    "6C616365284B2C222D242622292E746F4C6F7765724361736528292C22737472696E67223D3D747970656F66286E3D652E6765744174747269627574",
    "6528722929297B7472797B6E3D2274727565223D3D3D28693D6E297C7C2266616C736522213D3D69262628226E756C6C223D3D3D693F6E756C6C3A69",
    "3D3D3D2B692B22223F2B693A4A2E746573742869293F4A534F4E2E70617273652869293A69297D63617463682865297B7D512E73657428652C742C6E",
    "297D656C7365206E3D766F696420303B72657475726E206E7D532E657874656E64287B686173446174613A66756E6374696F6E2865297B7265747572",
    "6E20512E686173446174612865297C7C592E686173446174612865297D2C646174613A66756E6374696F6E28652C742C6E297B72657475726E20512E",
    "61636365737328652C742C6E297D2C72656D6F7665446174613A66756E6374696F6E28652C74297B512E72656D6F766528652C74297D2C5F64617461",
    "3A66756E6374696F6E28652C742C6E297B72657475726E20592E61636365737328652C742C6E297D2C5F72656D6F7665446174613A66756E6374696F",
    "6E28652C74297B592E72656D6F766528652C74297D7D292C532E666E2E657874656E64287B646174613A66756E6374696F6E286E2C65297B76617220",
    "742C722C692C6F3D746869735B305D2C613D6F26266F2E617474726962757465733B696628766F696420303D3D3D6E297B696628746869732E6C656E",
    "677468262628693D512E676574286F292C313D3D3D6F2E6E6F646554797065262621592E676574286F2C22686173446174614174747273222929297B",
    "743D612E6C656E6774683B7768696C6528742D2D29615B745D2626303D3D3D28723D615B745D2E6E616D65292E696E6465784F662822646174612D22",
    "29262628723D5828722E736C696365283529292C5A286F2C722C695B725D29293B592E736574286F2C22686173446174614174747273222C2130297D",
    "72657475726E20697D72657475726E226F626A656374223D3D747970656F66206E3F746869732E656163682866756E6374696F6E28297B512E736574",
    "28746869732C6E297D293A2428746869732C66756E6374696F6E2865297B76617220743B6966286F2626766F696420303D3D3D652972657475726E20",
    "766F69642030213D3D28743D512E676574286F2C6E29293F743A766F69642030213D3D28743D5A286F2C6E29293F743A766F696420303B746869732E",
    "656163682866756E6374696F6E28297B512E73657428746869732C6E2C65297D297D2C6E756C6C2C652C313C617267756D656E74732E6C656E677468",
    "2C6E756C6C2C2130297D2C72656D6F7665446174613A66756E6374696F6E2865297B72657475726E20746869732E656163682866756E6374696F6E28",
    "297B512E72656D6F766528746869732C65297D297D7D292C532E657874656E64287B71756575653A66756E6374696F6E28652C742C6E297B76617220",
    "723B696628652972657475726E20743D28747C7C22667822292B227175657565222C723D592E67657428652C74292C6E26262821727C7C4172726179",
    "2E69734172726179286E293F723D592E61636365737328652C742C532E6D616B654172726179286E29293A722E70757368286E29292C727C7C5B5D7D",
    "2C646571756575653A66756E6374696F6E28652C74297B743D747C7C226678223B766172206E3D532E717565756528652C74292C723D6E2E6C656E67",
    "74682C693D6E2E736869667428292C6F3D532E5F7175657565486F6F6B7328652C74293B22696E70726F6772657373223D3D3D69262628693D6E2E73",
    "6869667428292C722D2D292C69262628226678223D3D3D7426266E2E756E73686966742822696E70726F677265737322292C64656C657465206F2E73",
    "746F702C692E63616C6C28652C66756E6374696F6E28297B532E6465717565756528652C74297D2C6F29292C217226266F26266F2E656D7074792E66",
    "69726528297D2C5F7175657565486F6F6B733A66756E6374696F6E28652C74297B766172206E3D742B227175657565486F6F6B73223B72657475726E",
    "20592E67657428652C6E297C7C592E61636365737328652C6E2C7B656D7074793A532E43616C6C6261636B7328226F6E6365206D656D6F727922292E",
    "6164642866756E6374696F6E28297B592E72656D6F766528652C5B742B227175657565222C6E5D297D297D297D7D292C532E666E2E657874656E6428",
    "7B71756575653A66756E6374696F6E28742C6E297B76617220653D323B72657475726E22737472696E6722213D747970656F6620742626286E3D742C",
    "743D226678222C652D2D292C617267756D656E74732E6C656E6774683C653F532E717565756528746869735B305D2C74293A766F696420303D3D3D6E",
    "3F746869733A746869732E656163682866756E6374696F6E28297B76617220653D532E717565756528746869732C742C6E293B532E5F717565756548",
    "6F6F6B7328746869732C74292C226678223D3D3D74262622696E70726F677265737322213D3D655B305D2626532E6465717565756528746869732C74",
    "297D297D2C646571756575653A66756E6374696F6E2865297B72657475726E20746869732E656163682866756E6374696F6E28297B532E6465717565",
    "756528746869732C65297D297D2C636C65617251756575653A66756E6374696F6E2865297B72657475726E20746869732E717565756528657C7C2266",
    "78222C5B5D297D2C70726F6D6973653A66756E6374696F6E28652C74297B766172206E2C723D312C693D532E446566657272656428292C6F3D746869",
    "732C613D746869732E6C656E6774682C733D66756E6374696F6E28297B2D2D727C7C692E7265736F6C766557697468286F2C5B6F5D297D3B22737472",
    "696E6722213D747970656F662065262628743D652C653D766F69642030292C653D657C7C226678223B7768696C6528612D2D29286E3D592E67657428",
    "6F5B615D2C652B227175657565486F6F6B7322292926266E2E656D707479262628722B2B2C6E2E656D7074792E616464287329293B72657475726E20",
    "7328292C692E70726F6D6973652874297D7D293B7661722065653D2F5B2B2D5D3F283F3A5C642A5C2E7C295C642B283F3A5B65455D5B2B2D5D3F5C64",
    "2B7C292F2E736F757263652C74653D6E65772052656745787028225E283F3A285B2B2D5D293D7C2928222B65652B2229285B612D7A255D2A2924222C",
    "226922292C6E653D5B22546F70222C225269676874222C22426F74746F6D222C224C656674225D2C72653D452E646F63756D656E74456C656D656E74",
    "2C69653D66756E6374696F6E2865297B72657475726E20532E636F6E7461696E7328652E6F776E6572446F63756D656E742C65297D2C6F653D7B636F",
    "6D706F7365643A21307D3B72652E676574526F6F744E6F646526262869653D66756E6374696F6E2865297B72657475726E20532E636F6E7461696E73",
    "28652E6F776E6572446F63756D656E742C65297C7C652E676574526F6F744E6F6465286F65293D3D3D652E6F776E6572446F63756D656E747D293B76",
    "61722061653D66756E6374696F6E28652C74297B72657475726E226E6F6E65223D3D3D28653D747C7C65292E7374796C652E646973706C61797C7C22",
    "223D3D3D652E7374796C652E646973706C6179262669652865292626226E6F6E65223D3D3D532E63737328652C22646973706C617922297D3B66756E",
    "6374696F6E20736528652C742C6E2C72297B76617220692C6F2C613D32302C733D723F66756E6374696F6E28297B72657475726E20722E6375722829",
    "7D3A66756E6374696F6E28297B72657475726E20532E63737328652C742C2222297D2C753D7328292C6C3D6E26266E5B335D7C7C28532E6373734E75",
    "6D6265725B745D3F22223A22707822292C633D652E6E6F646554797065262628532E6373734E756D6265725B745D7C7C22707822213D3D6C26262B75",
    "29262674652E6578656328532E63737328652C7429293B696628632626635B335D213D3D6C297B752F3D322C6C3D6C7C7C635B335D2C633D2B757C7C",
    "313B7768696C6528612D2D29532E7374796C6528652C742C632B6C292C28312D6F292A28312D286F3D7328292F757C7C2E3529293C3D30262628613D",
    "30292C632F3D6F3B632A3D322C532E7374796C6528652C742C632B6C292C6E3D6E7C7C5B5D7D72657475726E206E262628633D2B637C7C2B757C7C30",
    "2C693D6E5B315D3F632B286E5B315D2B31292A6E5B325D3A2B6E5B325D2C72262628722E756E69743D6C2C722E73746172743D632C722E656E643D69",
    "29292C697D7661722075653D7B7D3B66756E6374696F6E206C6528652C74297B666F7228766172206E2C722C692C6F2C612C732C752C6C3D5B5D2C63",
    "3D302C663D652E6C656E6774683B633C663B632B2B2928723D655B635D292E7374796C652626286E3D722E7374796C652E646973706C61792C743F28",
    "226E6F6E65223D3D3D6E2626286C5B635D3D592E67657428722C22646973706C617922297C7C6E756C6C2C6C5B635D7C7C28722E7374796C652E6469",
    "73706C61793D222229292C22223D3D3D722E7374796C652E646973706C6179262661652872292626286C5B635D3D28753D613D6F3D766F696420302C",
    "613D28693D72292E6F776E6572446F63756D656E742C733D692E6E6F64654E616D652C28753D75655B735D297C7C286F3D612E626F64792E61707065",
    "6E644368696C6428612E637265617465456C656D656E74287329292C753D532E637373286F2C22646973706C617922292C6F2E706172656E744E6F64",
    "652E72656D6F76654368696C64286F292C226E6F6E65223D3D3D75262628753D22626C6F636B22292C75655B735D3D75292929293A226E6F6E652221",
    "3D3D6E2626286C5B635D3D226E6F6E65222C592E73657428722C22646973706C6179222C6E2929293B666F7228633D303B633C663B632B2B296E756C",
    "6C213D6C5B635D262628655B635D2E7374796C652E646973706C61793D6C5B635D293B72657475726E20657D532E666E2E657874656E64287B73686F",
    "773A66756E6374696F6E28297B72657475726E206C6528746869732C2130297D2C686964653A66756E6374696F6E28297B72657475726E206C652874",
    "686973297D2C746F67676C653A66756E6374696F6E2865297B72657475726E22626F6F6C65616E223D3D747970656F6620653F653F746869732E7368",
    "6F7728293A746869732E6869646528293A746869732E656163682866756E6374696F6E28297B61652874686973293F532874686973292E73686F7728",
    "293A532874686973292E6869646528297D297D7D293B7661722063652C66652C70653D2F5E283F3A636865636B626F787C726164696F29242F692C64",
    "653D2F3C285B612D7A5D5B5E5C2F5C303E5C7832305C745C725C6E5C665D2A292F692C68653D2F5E247C5E6D6F64756C65247C5C2F283F3A6A617661",
    "7C65636D61297363726970742F693B63653D452E637265617465446F63756D656E74467261676D656E7428292E617070656E644368696C6428452E63",
    "7265617465456C656D656E7428226469762229292C2866653D452E637265617465456C656D656E742822696E7075742229292E736574417474726962",
    "757465282274797065222C22726164696F22292C66652E7365744174747269627574652822636865636B6564222C22636865636B656422292C66652E",
    "73657441747472696275746528226E616D65222C227422292C63652E617070656E644368696C64286665292C792E636865636B436C6F6E653D63652E",
    "636C6F6E654E6F6465282130292E636C6F6E654E6F6465282130292E6C6173744368696C642E636865636B65642C63652E696E6E657248544D4C3D22",
    "3C74657874617265613E783C2F74657874617265613E222C792E6E6F436C6F6E65436865636B65643D212163652E636C6F6E654E6F6465282130292E",
    "6C6173744368696C642E64656661756C7456616C75652C63652E696E6E657248544D4C3D223C6F7074696F6E3E3C2F6F7074696F6E3E222C792E6F70",
    "74696F6E3D212163652E6C6173744368696C643B7661722067653D7B74686561643A5B312C223C7461626C653E222C223C2F7461626C653E225D2C63",
    "6F6C3A5B322C223C7461626C653E3C636F6C67726F75703E222C223C2F636F6C67726F75703E3C2F7461626C653E225D2C74723A5B322C223C746162",
    "6C653E3C74626F64793E222C223C2F74626F64793E3C2F7461626C653E225D2C74643A5B332C223C7461626C653E3C74626F64793E3C74723E222C22",
    "3C2F74723E3C2F74626F64793E3C2F7461626C653E225D2C5F64656661756C743A5B302C22222C22225D7D3B66756E6374696F6E20766528652C7429",
    "7B766172206E3B72657475726E206E3D22756E646566696E656422213D747970656F6620652E676574456C656D656E747342795461674E616D653F65",
    "2E676574456C656D656E747342795461674E616D6528747C7C222A22293A22756E646566696E656422213D747970656F6620652E717565727953656C",
    "6563746F72416C6C3F652E717565727953656C6563746F72416C6C28747C7C222A22293A5B5D2C766F696420303D3D3D747C7C7426264128652C7429",
    "3F532E6D65726765285B655D2C6E293A6E7D66756E6374696F6E20796528652C74297B666F7228766172206E3D302C723D652E6C656E6774683B6E3C",
    "723B6E2B2B29592E73657428655B6E5D2C22676C6F62616C4576616C222C21747C7C592E67657428745B6E5D2C22676C6F62616C4576616C2229297D",
    "67652E74626F64793D67652E74666F6F743D67652E636F6C67726F75703D67652E63617074696F6E3D67652E74686561642C67652E74683D67652E74",
    "642C792E6F7074696F6E7C7C2867652E6F707467726F75703D67652E6F7074696F6E3D5B312C223C73656C656374206D756C7469706C653D276D756C",
    "7469706C65273E222C223C2F73656C6563743E225D293B766172206D653D2F3C7C26233F5C772B3B2F3B66756E6374696F6E20786528652C742C6E2C",
    "722C69297B666F7228766172206F2C612C732C752C6C2C632C663D742E637265617465446F63756D656E74467261676D656E7428292C703D5B5D2C64",
    "3D302C683D652E6C656E6774683B643C683B642B2B29696628286F3D655B645D297C7C303D3D3D6F29696628226F626A656374223D3D3D77286F2929",
    "532E6D6572676528702C6F2E6E6F6465547970653F5B6F5D3A6F293B656C7365206966286D652E74657374286F29297B613D617C7C662E617070656E",
    "644368696C6428742E637265617465456C656D656E7428226469762229292C733D2864652E65786563286F297C7C5B22222C22225D295B315D2E746F",
    "4C6F7765724361736528292C753D67655B735D7C7C67652E5F64656661756C742C612E696E6E657248544D4C3D755B315D2B532E68746D6C50726566",
    "696C746572286F292B755B325D2C633D755B305D3B7768696C6528632D2D29613D612E6C6173744368696C643B532E6D6572676528702C612E636869",
    "6C644E6F646573292C28613D662E66697273744368696C64292E74657874436F6E74656E743D22227D656C736520702E7075736828742E6372656174",
    "65546578744E6F6465286F29293B662E74657874436F6E74656E743D22222C643D303B7768696C65286F3D705B642B2B5D296966287226262D313C53",
    "2E696E4172726179286F2C722929692626692E70757368286F293B656C7365206966286C3D6965286F292C613D766528662E617070656E644368696C",
    "64286F292C2273637269707422292C6C262679652861292C6E297B633D303B7768696C65286F3D615B632B2B5D2968652E74657374286F2E74797065",
    "7C7C22222926266E2E70757368286F297D72657475726E20667D7661722062653D2F5E285B5E2E5D2A29283F3A5C2E282E2B297C292F3B66756E6374",
    "696F6E20776528297B72657475726E21307D66756E6374696F6E20546528297B72657475726E21317D66756E6374696F6E20436528652C74297B7265",
    "7475726E20653D3D3D66756E6374696F6E28297B7472797B72657475726E20452E616374697665456C656D656E747D63617463682865297B7D7D2829",
    "3D3D2822666F637573223D3D3D74297D66756E6374696F6E20456528652C742C6E2C722C692C6F297B76617220612C733B696628226F626A65637422",
    "3D3D747970656F662074297B666F72287320696E22737472696E6722213D747970656F66206E262628723D727C7C6E2C6E3D766F69642030292C7429",
    "456528652C732C6E2C722C745B735D2C6F293B72657475726E20657D6966286E756C6C3D3D7226266E756C6C3D3D693F28693D6E2C723D6E3D766F69",
    "642030293A6E756C6C3D3D6926262822737472696E67223D3D747970656F66206E3F28693D722C723D766F69642030293A28693D722C723D6E2C6E3D",
    "766F6964203029292C21313D3D3D6929693D54653B656C73652069662821692972657475726E20653B72657475726E20313D3D3D6F262628613D692C",
    "28693D66756E6374696F6E2865297B72657475726E205328292E6F66662865292C612E6170706C7928746869732C617267756D656E7473297D292E67",
    "7569643D612E677569647C7C28612E677569643D532E677569642B2B29292C652E656163682866756E6374696F6E28297B532E6576656E742E616464",
    "28746869732C742C692C722C6E297D297D66756E6374696F6E20536528652C692C6F297B6F3F28592E73657428652C692C2131292C532E6576656E74",
    "2E61646428652C692C7B6E616D6573706163653A21312C68616E646C65723A66756E6374696F6E2865297B76617220742C6E2C723D592E6765742874",
    "6869732C69293B6966283126652E6973547269676765722626746869735B695D297B696628722E6C656E6774682928532E6576656E742E7370656369",
    "616C5B695D7C7C7B7D292E64656C6567617465547970652626652E73746F7050726F7061676174696F6E28293B656C736520696628723D732E63616C",
    "6C28617267756D656E7473292C592E73657428746869732C692C72292C743D6F28746869732C69292C746869735B695D28292C72213D3D286E3D592E",
    "67657428746869732C6929297C7C743F592E73657428746869732C692C2131293A6E3D7B7D2C72213D3D6E2972657475726E20652E73746F70496D6D",
    "65646961746550726F7061676174696F6E28292C652E70726576656E7444656661756C7428292C6E26266E2E76616C75657D656C736520722E6C656E",
    "677468262628592E73657428746869732C692C7B76616C75653A532E6576656E742E7472696767657228532E657874656E6428725B305D2C532E4576",
    "656E742E70726F746F74797065292C722E736C6963652831292C74686973297D292C652E73746F70496D6D65646961746550726F7061676174696F6E",
    "2829297D7D29293A766F696420303D3D3D592E67657428652C69292626532E6576656E742E61646428652C692C7765297D532E6576656E743D7B676C",
    "6F62616C3A7B7D2C6164643A66756E6374696F6E28742C652C6E2C722C69297B766172206F2C612C732C752C6C2C632C662C702C642C682C672C763D",
    "592E6765742874293B69662856287429297B6E2E68616E646C65722626286E3D286F3D6E292E68616E646C65722C693D6F2E73656C6563746F72292C",
    "692626532E66696E642E6D61746368657353656C6563746F722872652C69292C6E2E677569647C7C286E2E677569643D532E677569642B2B292C2875",
    "3D762E6576656E7473297C7C28753D762E6576656E74733D4F626A6563742E637265617465286E756C6C29292C28613D762E68616E646C65297C7C28",
    "613D762E68616E646C653D66756E6374696F6E2865297B72657475726E22756E646566696E656422213D747970656F6620532626532E6576656E742E",
    "747269676765726564213D3D652E747970653F532E6576656E742E64697370617463682E6170706C7928742C617267756D656E7473293A766F696420",
    "307D292C6C3D28653D28657C7C2222292E6D617463682850297C7C5B22225D292E6C656E6774683B7768696C65286C2D2D29643D673D28733D62652E",
    "6578656328655B6C5D297C7C5B5D295B315D2C683D28735B325D7C7C2222292E73706C697428222E22292E736F727428292C64262628663D532E6576",
    "656E742E7370656369616C5B645D7C7C7B7D2C643D28693F662E64656C6567617465547970653A662E62696E6454797065297C7C642C663D532E6576",
    "656E742E7370656369616C5B645D7C7C7B7D2C633D532E657874656E64287B747970653A642C6F726967547970653A672C646174613A722C68616E64",
    "6C65723A6E2C677569643A6E2E677569642C73656C6563746F723A692C6E65656473436F6E746578743A692626532E657870722E6D617463682E6E65",
    "656473436F6E746578742E746573742869292C6E616D6573706163653A682E6A6F696E28222E22297D2C6F292C28703D755B645D297C7C2828703D75",
    "5B645D3D5B5D292E64656C6567617465436F756E743D302C662E736574757026262131213D3D662E73657475702E63616C6C28742C722C682C61297C",
    "7C742E6164644576656E744C697374656E65722626742E6164644576656E744C697374656E657228642C6129292C662E616464262628662E6164642E",
    "63616C6C28742C63292C632E68616E646C65722E677569647C7C28632E68616E646C65722E677569643D6E2E6775696429292C693F702E73706C6963",
    "6528702E64656C6567617465436F756E742B2B2C302C63293A702E707573682863292C532E6576656E742E676C6F62616C5B645D3D2130297D7D2C72",
    "656D6F76653A66756E6374696F6E28652C742C6E2C722C69297B766172206F2C612C732C752C6C2C632C662C702C642C682C672C763D592E68617344",
    "6174612865292626592E6765742865293B69662876262628753D762E6576656E747329297B6C3D28743D28747C7C2222292E6D617463682850297C7C",
    "5B22225D292E6C656E6774683B7768696C65286C2D2D29696628643D673D28733D62652E6578656328745B6C5D297C7C5B5D295B315D2C683D28735B",
    "325D7C7C2222292E73706C697428222E22292E736F727428292C64297B663D532E6576656E742E7370656369616C5B645D7C7C7B7D2C703D755B643D",
    "28723F662E64656C6567617465547970653A662E62696E6454797065297C7C645D7C7C5B5D2C733D735B325D26266E6577205265674578702822285E",
    "7C5C5C2E29222B682E6A6F696E28225C5C2E283F3A2E2A5C5C2E7C2922292B22285C5C2E7C242922292C613D6F3D702E6C656E6774683B7768696C65",
    "286F2D2D29633D705B6F5D2C2169262667213D3D632E6F726967547970657C7C6E26266E2E67756964213D3D632E677569647C7C73262621732E7465",
    "737428632E6E616D657370616365297C7C72262672213D3D632E73656C6563746F72262628222A2A22213D3D727C7C21632E73656C6563746F72297C",
    "7C28702E73706C696365286F2C31292C632E73656C6563746F722626702E64656C6567617465436F756E742D2D2C662E72656D6F76652626662E7265",
    "6D6F76652E63616C6C28652C6329293B61262621702E6C656E677468262628662E74656172646F776E26262131213D3D662E74656172646F776E2E63",
    "616C6C28652C682C762E68616E646C65297C7C532E72656D6F76654576656E7428652C642C762E68616E646C65292C64656C65746520755B645D297D",
    "656C736520666F72286420696E207529532E6576656E742E72656D6F766528652C642B745B6C5D2C6E2C722C2130293B532E6973456D7074794F626A",
    "6563742875292626592E72656D6F766528652C2268616E646C65206576656E747322297D7D2C64697370617463683A66756E6374696F6E2865297B76",
    "617220742C6E2C722C692C6F2C612C733D6E657720417272617928617267756D656E74732E6C656E677468292C753D532E6576656E742E6669782865",
    "292C6C3D28592E67657428746869732C226576656E747322297C7C4F626A6563742E637265617465286E756C6C29295B752E747970655D7C7C5B5D2C",
    "633D532E6576656E742E7370656369616C5B752E747970655D7C7C7B7D3B666F7228735B305D3D752C743D313B743C617267756D656E74732E6C656E",
    "6774683B742B2B29735B745D3D617267756D656E74735B745D3B696628752E64656C65676174655461726765743D746869732C21632E707265446973",
    "70617463687C7C2131213D3D632E70726544697370617463682E63616C6C28746869732C7529297B613D532E6576656E742E68616E646C6572732E63",
    "616C6C28746869732C752C6C292C743D303B7768696C652828693D615B742B2B5D29262621752E697350726F7061676174696F6E53746F7070656428",
    "29297B752E63757272656E745461726765743D692E656C656D2C6E3D303B7768696C6528286F3D692E68616E646C6572735B6E2B2B5D29262621752E",
    "6973496D6D65646961746550726F7061676174696F6E53746F70706564282929752E726E616D65737061636526262131213D3D6F2E6E616D65737061",
    "6365262621752E726E616D6573706163652E74657374286F2E6E616D657370616365297C7C28752E68616E646C654F626A3D6F2C752E646174613D6F",
    "2E646174612C766F69642030213D3D28723D2828532E6576656E742E7370656369616C5B6F2E6F726967547970655D7C7C7B7D292E68616E646C657C",
    "7C6F2E68616E646C6572292E6170706C7928692E656C656D2C732929262621313D3D3D28752E726573756C743D7229262628752E70726576656E7444",
    "656661756C7428292C752E73746F7050726F7061676174696F6E282929297D72657475726E20632E706F737444697370617463682626632E706F7374",
    "44697370617463682E63616C6C28746869732C75292C752E726573756C747D7D2C68616E646C6572733A66756E6374696F6E28652C74297B76617220",
    "6E2C722C692C6F2C612C733D5B5D2C753D742E64656C6567617465436F756E742C6C3D652E7461726765743B6966287526266C2E6E6F646554797065",
    "2626212822636C69636B223D3D3D652E747970652626313C3D652E627574746F6E2929666F72283B6C213D3D746869733B6C3D6C2E706172656E744E",
    "6F64657C7C7468697329696628313D3D3D6C2E6E6F64655479706526262822636C69636B22213D3D652E747970657C7C2130213D3D6C2E6469736162",
    "6C656429297B666F72286F3D5B5D2C613D7B7D2C6E3D303B6E3C753B6E2B2B29766F696420303D3D3D615B693D28723D745B6E5D292E73656C656374",
    "6F722B2220225D262628615B695D3D722E6E65656473436F6E746578743F2D313C5328692C74686973292E696E646578286C293A532E66696E642869",
    "2C746869732C6E756C6C2C5B6C5D292E6C656E677468292C615B695D26266F2E707573682872293B6F2E6C656E6774682626732E70757368287B656C",
    "656D3A6C2C68616E646C6572733A6F7D297D72657475726E206C3D746869732C753C742E6C656E6774682626732E70757368287B656C656D3A6C2C68",
    "616E646C6572733A742E736C6963652875297D292C737D2C61646450726F703A66756E6374696F6E28742C65297B4F626A6563742E646566696E6550",
    "726F706572747928532E4576656E742E70726F746F747970652C742C7B656E756D657261626C653A21302C636F6E666967757261626C653A21302C67",
    "65743A6D2865293F66756E6374696F6E28297B696628746869732E6F726967696E616C4576656E742972657475726E206528746869732E6F72696769",
    "6E616C4576656E74297D3A66756E6374696F6E28297B696628746869732E6F726967696E616C4576656E742972657475726E20746869732E6F726967",
    "696E616C4576656E745B745D7D2C7365743A66756E6374696F6E2865297B4F626A6563742E646566696E6550726F706572747928746869732C742C7B",
    "656E756D657261626C653A21302C636F6E666967757261626C653A21302C7772697461626C653A21302C76616C75653A657D297D7D297D2C6669783A",
    "66756E6374696F6E2865297B72657475726E20655B532E657870616E646F5D3F653A6E657720532E4576656E742865297D2C7370656369616C3A7B6C",
    "6F61643A7B6E6F427562626C653A21307D2C636C69636B3A7B73657475703A66756E6374696F6E2865297B76617220743D746869737C7C653B726574",
    "75726E2070652E7465737428742E74797065292626742E636C69636B26264128742C22696E70757422292626536528742C22636C69636B222C776529",
    "2C21317D2C747269676765723A66756E6374696F6E2865297B76617220743D746869737C7C653B72657475726E2070652E7465737428742E74797065",
    "292626742E636C69636B26264128742C22696E70757422292626536528742C22636C69636B22292C21307D2C5F64656661756C743A66756E6374696F",
    "6E2865297B76617220743D652E7461726765743B72657475726E2070652E7465737428742E74797065292626742E636C69636B26264128742C22696E",
    "70757422292626592E67657428742C22636C69636B22297C7C4128742C226122297D7D2C6265666F7265756E6C6F61643A7B706F7374446973706174",
    "63683A66756E6374696F6E2865297B766F69642030213D3D652E726573756C742626652E6F726967696E616C4576656E74262628652E6F726967696E",
    "616C4576656E742E72657475726E56616C75653D652E726573756C74297D7D7D7D2C532E72656D6F76654576656E743D66756E6374696F6E28652C74",
    "2C6E297B652E72656D6F76654576656E744C697374656E65722626652E72656D6F76654576656E744C697374656E657228742C6E297D2C532E457665",
    "6E743D66756E6374696F6E28652C74297B69662821287468697320696E7374616E63656F6620532E4576656E74292972657475726E206E657720532E",
    "4576656E7428652C74293B652626652E747970653F28746869732E6F726967696E616C4576656E743D652C746869732E747970653D652E747970652C",
    "746869732E697344656661756C7450726576656E7465643D652E64656661756C7450726576656E7465647C7C766F696420303D3D3D652E6465666175",
    "6C7450726576656E746564262621313D3D3D652E72657475726E56616C75653F77653A54652C746869732E7461726765743D652E7461726765742626",
    "333D3D3D652E7461726765742E6E6F6465547970653F652E7461726765742E706172656E744E6F64653A652E7461726765742C746869732E63757272",
    "656E745461726765743D652E63757272656E745461726765742C746869732E72656C617465645461726765743D652E72656C61746564546172676574",
    "293A746869732E747970653D652C742626532E657874656E6428746869732C74292C746869732E74696D655374616D703D652626652E74696D655374",
    "616D707C7C446174652E6E6F7728292C746869735B532E657870616E646F5D3D21307D2C532E4576656E742E70726F746F747970653D7B636F6E7374",
    "727563746F723A532E4576656E742C697344656661756C7450726576656E7465643A54652C697350726F7061676174696F6E53746F707065643A5465",
    "2C6973496D6D65646961746550726F7061676174696F6E53746F707065643A54652C697353696D756C617465643A21312C70726576656E7444656661",
    "756C743A66756E6374696F6E28297B76617220653D746869732E6F726967696E616C4576656E743B746869732E697344656661756C7450726576656E",
    "7465643D77652C65262621746869732E697353696D756C617465642626652E70726576656E7444656661756C7428297D2C73746F7050726F70616761",
    "74696F6E3A66756E6374696F6E28297B76617220653D746869732E6F726967696E616C4576656E743B746869732E697350726F7061676174696F6E53",
    "746F707065643D77652C65262621746869732E697353696D756C617465642626652E73746F7050726F7061676174696F6E28297D2C73746F70496D6D",
    "65646961746550726F7061676174696F6E3A66756E6374696F6E28297B76617220653D746869732E6F726967696E616C4576656E743B746869732E69",
    "73496D6D65646961746550726F7061676174696F6E53746F707065643D77652C65262621746869732E697353696D756C617465642626652E73746F70",
    "496D6D65646961746550726F7061676174696F6E28292C746869732E73746F7050726F7061676174696F6E28297D7D2C532E65616368287B616C744B",
    "65793A21302C627562626C65733A21302C63616E63656C61626C653A21302C6368616E676564546F75636865733A21302C6374726C4B65793A21302C",
    "64657461696C3A21302C6576656E7450686173653A21302C6D6574614B65793A21302C70616765583A21302C70616765593A21302C73686966744B65",
    "793A21302C766965773A21302C2263686172223A21302C636F64653A21302C63686172436F64653A21302C6B65793A21302C6B6579436F64653A2130",
    "2C627574746F6E3A21302C627574746F6E733A21302C636C69656E74583A21302C636C69656E74593A21302C6F6666736574583A21302C6F66667365",
    "74593A21302C706F696E74657249643A21302C706F696E746572547970653A21302C73637265656E583A21302C73637265656E593A21302C74617267",
    "6574546F75636865733A21302C746F456C656D656E743A21302C746F75636865733A21302C77686963683A21307D2C532E6576656E742E6164645072",
    "6F70292C532E65616368287B666F6375733A22666F637573696E222C626C75723A22666F6375736F7574227D2C66756E6374696F6E28652C74297B53",
    "2E6576656E742E7370656369616C5B655D3D7B73657475703A66756E6374696F6E28297B72657475726E20536528746869732C652C4365292C21317D",
    "2C747269676765723A66756E6374696F6E28297B72657475726E20536528746869732C65292C21307D2C5F64656661756C743A66756E6374696F6E28",
    "297B72657475726E21307D2C64656C6567617465547970653A747D7D292C532E65616368287B6D6F757365656E7465723A226D6F7573656F76657222",
    "2C6D6F7573656C656176653A226D6F7573656F7574222C706F696E746572656E7465723A22706F696E7465726F766572222C706F696E7465726C6561",
    "76653A22706F696E7465726F7574227D2C66756E6374696F6E28652C69297B532E6576656E742E7370656369616C5B655D3D7B64656C656761746554",
    "7970653A692C62696E64547970653A692C68616E646C653A66756E6374696F6E2865297B76617220742C6E3D652E72656C617465645461726765742C",
    "723D652E68616E646C654F626A3B72657475726E206E2626286E3D3D3D746869737C7C532E636F6E7461696E7328746869732C6E29297C7C28652E74",
    "7970653D722E6F726967547970652C743D722E68616E646C65722E6170706C7928746869732C617267756D656E7473292C652E747970653D69292C74",
    "7D7D7D292C532E666E2E657874656E64287B6F6E3A66756E6374696F6E28652C742C6E2C72297B72657475726E20456528746869732C652C742C6E2C",
    "72297D2C6F6E653A66756E6374696F6E28652C742C6E2C72297B72657475726E20456528746869732C652C742C6E2C722C31297D2C6F66663A66756E",
    "6374696F6E28652C742C6E297B76617220722C693B696628652626652E70726576656E7444656661756C742626652E68616E646C654F626A29726574",
    "75726E20723D652E68616E646C654F626A2C5328652E64656C6567617465546172676574292E6F666628722E6E616D6573706163653F722E6F726967",
    "547970652B222E222B722E6E616D6573706163653A722E6F726967547970652C722E73656C6563746F722C722E68616E646C6572292C746869733B69",
    "6628226F626A656374223D3D747970656F662065297B666F72286920696E206529746869732E6F666628692C742C655B695D293B72657475726E2074",
    "6869737D72657475726E2131213D3D7426262266756E6374696F6E22213D747970656F6620747C7C286E3D742C743D766F69642030292C21313D3D3D",
    "6E2626286E3D5465292C746869732E656163682866756E6374696F6E28297B532E6576656E742E72656D6F766528746869732C652C6E2C74297D297D",
    "7D293B766172206B653D2F3C7363726970747C3C7374796C657C3C6C696E6B2F692C41653D2F636865636B65645C732A283F3A5B5E3D5D7C3D5C732A",
    "2E636865636B65642E292F692C4E653D2F5E5C732A3C21283F3A5C5B43444154415C5B7C2D2D297C283F3A5C5D5C5D7C2D2D293E5C732A242F673B66",
    "756E6374696F6E206A6528652C74297B72657475726E204128652C227461626C652229262641283131213D3D742E6E6F6465547970653F743A742E66",
    "697273744368696C642C22747222292626532865292E6368696C6472656E282274626F647922295B305D7C7C657D66756E6374696F6E204465286529",
    "7B72657475726E20652E747970653D286E756C6C213D3D652E6765744174747269627574652822747970652229292B222F222B652E747970652C657D",
    "66756E6374696F6E2071652865297B72657475726E22747275652F223D3D3D28652E747970657C7C2222292E736C69636528302C35293F652E747970",
    "653D652E747970652E736C6963652835293A652E72656D6F766541747472696275746528227479706522292C657D66756E6374696F6E204C6528652C",
    "74297B766172206E2C722C692C6F2C612C733B696628313D3D3D742E6E6F646554797065297B696628592E68617344617461286529262628733D592E",
    "6765742865292E6576656E74732929666F72286920696E20592E72656D6F766528742C2268616E646C65206576656E747322292C7329666F72286E3D",
    "302C723D735B695D2E6C656E6774683B6E3C723B6E2B2B29532E6576656E742E61646428742C692C735B695D5B6E5D293B512E686173446174612865",
    "292626286F3D512E6163636573732865292C613D532E657874656E64287B7D2C6F292C512E73657428742C6129297D7D66756E6374696F6E20486528",
    "6E2C722C692C6F297B723D672872293B76617220652C742C612C732C752C6C2C633D302C663D6E2E6C656E6774682C703D662D312C643D725B305D2C",
    "683D6D2864293B696628687C7C313C66262622737472696E67223D3D747970656F662064262621792E636865636B436C6F6E65262641652E74657374",
    "2864292972657475726E206E2E656163682866756E6374696F6E2865297B76617220743D6E2E65712865293B68262628725B305D3D642E63616C6C28",
    "746869732C652C742E68746D6C282929292C486528742C722C692C6F297D293B69662866262628743D28653D786528722C6E5B305D2E6F776E657244",
    "6F63756D656E742C21312C6E2C6F29292E66697273744368696C642C313D3D3D652E6368696C644E6F6465732E6C656E677468262628653D74292C74",
    "7C7C6F29297B666F7228733D28613D532E6D617028766528652C2273637269707422292C446529292E6C656E6774683B633C663B632B2B29753D652C",
    "63213D3D70262628753D532E636C6F6E6528752C21302C2130292C732626532E6D6572676528612C766528752C22736372697074222929292C692E63",
    "616C6C286E5B635D2C752C63293B6966287329666F72286C3D615B612E6C656E6774682D315D2E6F776E6572446F63756D656E742C532E6D61702861",
    "2C7165292C633D303B633C733B632B2B29753D615B635D2C68652E7465737428752E747970657C7C222229262621592E61636365737328752C22676C",
    "6F62616C4576616C22292626532E636F6E7461696E73286C2C7529262628752E7372632626226D6F64756C6522213D3D28752E747970657C7C222229",
    "2E746F4C6F7765724361736528293F532E5F6576616C55726C262621752E6E6F4D6F64756C652626532E5F6576616C55726C28752E7372632C7B6E6F",
    "6E63653A752E6E6F6E63657C7C752E67657441747472696275746528226E6F6E636522297D2C6C293A6228752E74657874436F6E74656E742E726570",
    "6C616365284E652C2222292C752C6C29297D72657475726E206E7D66756E6374696F6E204F6528652C742C6E297B666F722876617220722C693D743F",
    "532E66696C74657228742C65293A652C6F3D303B6E756C6C213D28723D695B6F5D293B6F2B2B296E7C7C31213D3D722E6E6F6465547970657C7C532E",
    "636C65616E44617461287665287229292C722E706172656E744E6F64652626286E262669652872292626796528766528722C22736372697074222929",
    "2C722E706172656E744E6F64652E72656D6F76654368696C64287229293B72657475726E20657D532E657874656E64287B68746D6C50726566696C74",
    "65723A66756E6374696F6E2865297B72657475726E20657D2C636C6F6E653A66756E6374696F6E28652C742C6E297B76617220722C692C6F2C612C73",
    "2C752C6C2C633D652E636C6F6E654E6F6465282130292C663D69652865293B6966282128792E6E6F436C6F6E65436865636B65647C7C31213D3D652E",
    "6E6F64655479706526263131213D3D652E6E6F6465547970657C7C532E6973584D4C446F632865292929666F7228613D76652863292C723D302C693D",
    "286F3D7665286529292E6C656E6774683B723C693B722B2B29733D6F5B725D2C753D615B725D2C766F696420302C22696E707574223D3D3D286C3D75",
    "2E6E6F64654E616D652E746F4C6F77657243617365282929262670652E7465737428732E74797065293F752E636865636B65643D732E636865636B65",
    "643A22696E70757422213D3D6C262622746578746172656122213D3D6C7C7C28752E64656661756C7456616C75653D732E64656661756C7456616C75",
    "65293B69662874296966286E29666F72286F3D6F7C7C76652865292C613D617C7C76652863292C723D302C693D6F2E6C656E6774683B723C693B722B",
    "2B294C65286F5B725D2C615B725D293B656C7365204C6528652C63293B72657475726E20303C28613D766528632C227363726970742229292E6C656E",
    "6774682626796528612C21662626766528652C227363726970742229292C637D2C636C65616E446174613A66756E6374696F6E2865297B666F722876",
    "617220742C6E2C722C693D532E6576656E742E7370656369616C2C6F3D303B766F69642030213D3D286E3D655B6F5D293B6F2B2B2969662856286E29",
    "297B696628743D6E5B592E657870616E646F5D297B696628742E6576656E747329666F72287220696E20742E6576656E747329695B725D3F532E6576",
    "656E742E72656D6F7665286E2C72293A532E72656D6F76654576656E74286E2C722C742E68616E646C65293B6E5B592E657870616E646F5D3D766F69",
    "6420307D6E5B512E657870616E646F5D2626286E5B512E657870616E646F5D3D766F69642030297D7D7D292C532E666E2E657874656E64287B646574",
    "6163683A66756E6374696F6E2865297B72657475726E204F6528746869732C652C2130297D2C72656D6F76653A66756E6374696F6E2865297B726574",
    "75726E204F6528746869732C65297D2C746578743A66756E6374696F6E2865297B72657475726E202428746869732C66756E6374696F6E2865297B72",
    "657475726E20766F696420303D3D3D653F532E746578742874686973293A746869732E656D70747928292E656163682866756E6374696F6E28297B31",
    "213D3D746869732E6E6F64655479706526263131213D3D746869732E6E6F646554797065262639213D3D746869732E6E6F6465547970657C7C287468",
    "69732E74657874436F6E74656E743D65297D297D2C6E756C6C2C652C617267756D656E74732E6C656E677468297D2C617070656E643A66756E637469",
    "6F6E28297B72657475726E20486528746869732C617267756D656E74732C66756E6374696F6E2865297B31213D3D746869732E6E6F64655479706526",
    "263131213D3D746869732E6E6F646554797065262639213D3D746869732E6E6F6465547970657C7C6A6528746869732C65292E617070656E64436869",
    "6C642865297D297D2C70726570656E643A66756E6374696F6E28297B72657475726E20486528746869732C617267756D656E74732C66756E6374696F",
    "6E2865297B696628313D3D3D746869732E6E6F6465547970657C7C31313D3D3D746869732E6E6F6465547970657C7C393D3D3D746869732E6E6F6465",
    "54797065297B76617220743D6A6528746869732C65293B742E696E736572744265666F726528652C742E66697273744368696C64297D7D297D2C6265",
    "666F72653A66756E6374696F6E28297B72657475726E20486528746869732C617267756D656E74732C66756E6374696F6E2865297B746869732E7061",
    "72656E744E6F64652626746869732E706172656E744E6F64652E696E736572744265666F726528652C74686973297D297D2C61667465723A66756E63",
    "74696F6E28297B72657475726E20486528746869732C617267756D656E74732C66756E6374696F6E2865297B746869732E706172656E744E6F646526",
    "26746869732E706172656E744E6F64652E696E736572744265666F726528652C746869732E6E6578745369626C696E67297D297D2C656D7074793A66",
    "756E6374696F6E28297B666F722876617220652C743D303B6E756C6C213D28653D746869735B745D293B742B2B29313D3D3D652E6E6F646554797065",
    "262628532E636C65616E4461746128766528652C213129292C652E74657874436F6E74656E743D2222293B72657475726E20746869737D2C636C6F6E",
    "653A66756E6374696F6E28652C74297B72657475726E20653D6E756C6C213D652626652C743D6E756C6C3D3D743F653A742C746869732E6D61702866",
    "756E6374696F6E28297B72657475726E20532E636C6F6E6528746869732C652C74297D297D2C68746D6C3A66756E6374696F6E2865297B7265747572",
    "6E202428746869732C66756E6374696F6E2865297B76617220743D746869735B305D7C7C7B7D2C6E3D302C723D746869732E6C656E6774683B696628",
    "766F696420303D3D3D652626313D3D3D742E6E6F6465547970652972657475726E20742E696E6E657248544D4C3B69662822737472696E67223D3D74",
    "7970656F6620652626216B652E7465737428652926262167655B2864652E657865632865297C7C5B22222C22225D295B315D2E746F4C6F7765724361",
    "736528295D297B653D532E68746D6C50726566696C7465722865293B7472797B666F72283B6E3C723B6E2B2B29313D3D3D28743D746869735B6E5D7C",
    "7C7B7D292E6E6F646554797065262628532E636C65616E4461746128766528742C213129292C742E696E6E657248544D4C3D65293B743D307D636174",
    "63682865297B7D7D742626746869732E656D70747928292E617070656E642865297D2C6E756C6C2C652C617267756D656E74732E6C656E677468297D",
    "2C7265706C616365576974683A66756E6374696F6E28297B766172206E3D5B5D3B72657475726E20486528746869732C617267756D656E74732C6675",
    "6E6374696F6E2865297B76617220743D746869732E706172656E744E6F64653B532E696E417272617928746869732C6E293C30262628532E636C6561",
    "6E44617461287665287468697329292C742626742E7265706C6163654368696C6428652C7468697329297D2C6E297D7D292C532E65616368287B6170",
    "70656E64546F3A22617070656E64222C70726570656E64546F3A2270726570656E64222C696E736572744265666F72653A226265666F7265222C696E",
    "7365727441667465723A226166746572222C7265706C616365416C6C3A227265706C61636557697468227D2C66756E6374696F6E28652C61297B532E",
    "666E5B655D3D66756E6374696F6E2865297B666F722876617220742C6E3D5B5D2C723D532865292C693D722E6C656E6774682D312C6F3D303B6F3C3D",
    "693B6F2B2B29743D6F3D3D3D693F746869733A746869732E636C6F6E65282130292C5328725B6F5D295B615D2874292C752E6170706C79286E2C742E",
    "6765742829293B72657475726E20746869732E70757368537461636B286E297D7D293B7661722050653D6E65772052656745787028225E28222B6565",
    "2B2229283F217078295B612D7A255D2B24222C226922292C52653D66756E6374696F6E2865297B76617220743D652E6F776E6572446F63756D656E74",
    "2E64656661756C74566965773B72657475726E20742626742E6F70656E65727C7C28743D43292C742E676574436F6D70757465645374796C65286529",
    "7D2C4D653D66756E6374696F6E28652C742C6E297B76617220722C692C6F3D7B7D3B666F72286920696E2074296F5B695D3D652E7374796C655B695D",
    "2C652E7374796C655B695D3D745B695D3B666F72286920696E20723D6E2E63616C6C2865292C7429652E7374796C655B695D3D6F5B695D3B72657475",
    "726E20727D2C49653D6E657720526567457870286E652E6A6F696E28227C22292C226922293B66756E6374696F6E20576528652C742C6E297B766172",
    "20722C692C6F2C612C733D652E7374796C653B72657475726E286E3D6E7C7C5265286529292626282222213D3D28613D6E2E67657450726F70657274",
    "7956616C75652874297C7C6E5B745D297C7C69652865297C7C28613D532E7374796C6528652C7429292C21792E706978656C426F785374796C657328",
    "29262650652E74657374286129262649652E74657374287429262628723D732E77696474682C693D732E6D696E57696474682C6F3D732E6D61785769",
    "6474682C732E6D696E57696474683D732E6D617857696474683D732E77696474683D612C613D6E2E77696474682C732E77696474683D722C732E6D69",
    "6E57696474683D692C732E6D617857696474683D6F29292C766F69642030213D3D613F612B22223A617D66756E6374696F6E20466528652C74297B72",
    "657475726E7B6765743A66756E6374696F6E28297B696628216528292972657475726E28746869732E6765743D74292E6170706C7928746869732C61",
    "7267756D656E7473293B64656C65746520746869732E6765747D7D7D2166756E6374696F6E28297B66756E6374696F6E206528297B6966286C297B75",
    "2E7374796C652E637373546578743D22706F736974696F6E3A6162736F6C7574653B6C6566743A2D313131313170783B77696474683A363070783B6D",
    "617267696E2D746F703A3170783B70616464696E673A303B626F726465723A30222C6C2E7374796C652E637373546578743D22706F736974696F6E3A",
    "72656C61746976653B646973706C61793A626C6F636B3B626F782D73697A696E673A626F726465722D626F783B6F766572666C6F773A7363726F6C6C",
    "3B6D617267696E3A6175746F3B626F726465723A3170783B70616464696E673A3170783B77696474683A3630253B746F703A3125222C72652E617070",
    "656E644368696C642875292E617070656E644368696C64286C293B76617220653D432E676574436F6D70757465645374796C65286C293B6E3D223125",
    "22213D3D652E746F702C733D31323D3D3D7428652E6D617267696E4C656674292C6C2E7374796C652E72696768743D22363025222C6F3D33363D3D3D",
    "7428652E7269676874292C723D33363D3D3D7428652E7769647468292C6C2E7374796C652E706F736974696F6E3D226162736F6C757465222C693D31",
    "323D3D3D74286C2E6F666673657457696474682F33292C72652E72656D6F76654368696C642875292C6C3D6E756C6C7D7D66756E6374696F6E207428",
    "65297B72657475726E204D6174682E726F756E64287061727365466C6F6174286529297D766172206E2C722C692C6F2C612C732C753D452E63726561",
    "7465456C656D656E74282264697622292C6C3D452E637265617465456C656D656E74282264697622293B6C2E7374796C652626286C2E7374796C652E",
    "6261636B67726F756E64436C69703D22636F6E74656E742D626F78222C6C2E636C6F6E654E6F6465282130292E7374796C652E6261636B67726F756E",
    "64436C69703D22222C792E636C656172436C6F6E655374796C653D22636F6E74656E742D626F78223D3D3D6C2E7374796C652E6261636B67726F756E",
    "64436C69702C532E657874656E6428792C7B626F7853697A696E6752656C6961626C653A66756E6374696F6E28297B72657475726E206528292C727D",
    "2C706978656C426F785374796C65733A66756E6374696F6E28297B72657475726E206528292C6F7D2C706978656C506F736974696F6E3A66756E6374",
    "696F6E28297B72657475726E206528292C6E7D2C72656C6961626C654D617267696E4C6566743A66756E6374696F6E28297B72657475726E20652829",
    "2C737D2C7363726F6C6C626F7853697A653A66756E6374696F6E28297B72657475726E206528292C697D2C72656C6961626C65547244696D656E7369",
    "6F6E733A66756E6374696F6E28297B76617220652C742C6E2C723B72657475726E206E756C6C3D3D61262628653D452E637265617465456C656D656E",
    "7428227461626C6522292C743D452E637265617465456C656D656E742822747222292C6E3D452E637265617465456C656D656E74282264697622292C",
    "652E7374796C652E637373546578743D22706F736974696F6E3A6162736F6C7574653B6C6566743A2D313131313170783B626F726465722D636F6C6C",
    "617073653A7365706172617465222C742E7374796C652E637373546578743D22626F726465723A31707820736F6C6964222C742E7374796C652E6865",
    "696768743D22317078222C6E2E7374796C652E6865696768743D22397078222C6E2E7374796C652E646973706C61793D22626C6F636B222C72652E61",
    "7070656E644368696C642865292E617070656E644368696C642874292E617070656E644368696C64286E292C723D432E676574436F6D707574656453",
    "74796C652874292C613D7061727365496E7428722E6865696768742C3130292B7061727365496E7428722E626F72646572546F7057696474682C3130",
    "292B7061727365496E7428722E626F72646572426F74746F6D57696474682C3130293D3D3D742E6F66667365744865696768742C72652E72656D6F76",
    "654368696C64286529292C617D7D29297D28293B7661722042653D5B225765626B6974222C224D6F7A222C226D73225D2C24653D452E637265617465",
    "456C656D656E74282264697622292E7374796C652C5F653D7B7D3B66756E6374696F6E207A652865297B76617220743D532E63737350726F70735B65",
    "5D7C7C5F655B655D3B72657475726E20747C7C286520696E2024653F653A5F655B655D3D66756E6374696F6E2865297B76617220743D655B305D2E74",
    "6F55707065724361736528292B652E736C6963652831292C6E3D42652E6C656E6774683B7768696C65286E2D2D2969662828653D42655B6E5D2B7429",
    "696E2024652972657475726E20657D2865297C7C65297D7661722055653D2F5E286E6F6E657C7461626C65283F212D635B65615D292E2B292F2C5865",
    "3D2F5E2D2D2F2C56653D7B706F736974696F6E3A226162736F6C757465222C7669736962696C6974793A2268696464656E222C646973706C61793A22",
    "626C6F636B227D2C47653D7B6C657474657253706163696E673A2230222C666F6E745765696768743A22343030227D3B66756E6374696F6E20596528",
    "652C742C6E297B76617220723D74652E657865632874293B72657475726E20723F4D6174682E6D617828302C725B325D2D286E7C7C3029292B28725B",
    "335D7C7C22707822293A747D66756E6374696F6E20516528652C742C6E2C722C692C6F297B76617220613D227769647468223D3D3D743F313A302C73",
    "3D302C753D303B6966286E3D3D3D28723F22626F72646572223A22636F6E74656E7422292972657475726E20303B666F72283B613C343B612B3D3229",
    "226D617267696E223D3D3D6E262628752B3D532E63737328652C6E2B6E655B615D2C21302C6929292C723F2822636F6E74656E74223D3D3D6E262628",
    "752D3D532E63737328652C2270616464696E67222B6E655B615D2C21302C6929292C226D617267696E22213D3D6E262628752D3D532E63737328652C",
    "22626F72646572222B6E655B615D2B225769647468222C21302C692929293A28752B3D532E63737328652C2270616464696E67222B6E655B615D2C21",
    "302C69292C2270616464696E6722213D3D6E3F752B3D532E63737328652C22626F72646572222B6E655B615D2B225769647468222C21302C69293A73",
    "2B3D532E63737328652C22626F72646572222B6E655B615D2B225769647468222C21302C6929293B72657475726E21722626303C3D6F262628752B3D",
    "4D6174682E6D617828302C4D6174682E6365696C28655B226F6666736574222B745B305D2E746F55707065724361736528292B742E736C6963652831",
    "295D2D6F2D752D732D2E3529297C7C30292C757D66756E6374696F6E204A6528652C742C6E297B76617220723D52652865292C693D2821792E626F78",
    "53697A696E6752656C6961626C6528297C7C6E29262622626F726465722D626F78223D3D3D532E63737328652C22626F7853697A696E67222C21312C",
    "72292C6F3D692C613D576528652C742C72292C733D226F6666736574222B745B305D2E746F55707065724361736528292B742E736C6963652831293B",
    "69662850652E74657374286129297B696628216E2972657475726E20613B613D226175746F227D72657475726E2821792E626F7853697A696E675265",
    "6C6961626C6528292626697C7C21792E72656C6961626C65547244696D656E73696F6E73282926264128652C22747222297C7C226175746F223D3D3D",
    "617C7C217061727365466C6F6174286129262622696E6C696E65223D3D3D532E63737328652C22646973706C6179222C21312C7229292626652E6765",
    "74436C69656E74526563747328292E6C656E677468262628693D22626F726465722D626F78223D3D3D532E63737328652C22626F7853697A696E6722",
    "2C21312C72292C286F3D7320696E206529262628613D655B735D29292C28613D7061727365466C6F61742861297C7C30292B516528652C742C6E7C7C",
    "28693F22626F72646572223A22636F6E74656E7422292C6F2C722C61292B227078227D66756E6374696F6E204B6528652C742C6E2C722C69297B7265",
    "7475726E206E6577204B652E70726F746F747970652E696E697428652C742C6E2C722C69297D532E657874656E64287B637373486F6F6B733A7B6F70",
    "61636974793A7B6765743A66756E6374696F6E28652C74297B69662874297B766172206E3D576528652C226F70616369747922293B72657475726E22",
    "223D3D3D6E3F2231223A6E7D7D7D7D2C6373734E756D6265723A7B616E696D6174696F6E497465726174696F6E436F756E743A21302C636F6C756D6E",
    "436F756E743A21302C66696C6C4F7061636974793A21302C666C657847726F773A21302C666C6578536872696E6B3A21302C666F6E74576569676874",
    "3A21302C67726964417265613A21302C67726964436F6C756D6E3A21302C67726964436F6C756D6E456E643A21302C67726964436F6C756D6E537461",
    "72743A21302C67726964526F773A21302C67726964526F77456E643A21302C67726964526F7753746172743A21302C6C696E654865696768743A2130",
    "2C6F7061636974793A21302C6F726465723A21302C6F727068616E733A21302C7769646F77733A21302C7A496E6465783A21302C7A6F6F6D3A21307D",
    "2C63737350726F70733A7B7D2C7374796C653A66756E6374696F6E28652C742C6E2C72297B69662865262633213D3D652E6E6F646554797065262638",
    "213D3D652E6E6F6465547970652626652E7374796C65297B76617220692C6F2C612C733D582874292C753D58652E746573742874292C6C3D652E7374",
    "796C653B696628757C7C28743D7A65287329292C613D532E637373486F6F6B735B745D7C7C532E637373486F6F6B735B735D2C766F696420303D3D3D",
    "6E2972657475726E206126262267657422696E20612626766F69642030213D3D28693D612E67657428652C21312C7229293F693A6C5B745D3B227374",
    "72696E67223D3D3D286F3D747970656F66206E29262628693D74652E65786563286E29292626695B315D2626286E3D736528652C742C69292C6F3D22",
    "6E756D62657222292C6E756C6C213D6E26266E3D3D6E262628226E756D62657222213D3D6F7C7C757C7C286E2B3D692626695B335D7C7C28532E6373",
    "734E756D6265725B735D3F22223A2270782229292C792E636C656172436C6F6E655374796C657C7C2222213D3D6E7C7C30213D3D742E696E6465784F",
    "6628226261636B67726F756E6422297C7C286C5B745D3D22696E686572697422292C6126262273657422696E20612626766F696420303D3D3D286E3D",
    "612E73657428652C6E2C7229297C7C28753F6C2E73657450726F706572747928742C6E293A6C5B745D3D6E29297D7D2C6373733A66756E6374696F6E",
    "28652C742C6E2C72297B76617220692C6F2C612C733D582874293B72657475726E2058652E746573742874297C7C28743D7A65287329292C28613D53",
    "2E637373486F6F6B735B745D7C7C532E637373486F6F6B735B735D2926262267657422696E2061262628693D612E67657428652C21302C6E29292C76",
    "6F696420303D3D3D69262628693D576528652C742C7229292C226E6F726D616C223D3D3D6926267420696E204765262628693D47655B745D292C2222",
    "3D3D3D6E7C7C6E3F286F3D7061727365466C6F61742869292C21303D3D3D6E7C7C697346696E697465286F293F6F7C7C303A69293A697D7D292C532E",
    "65616368285B22686569676874222C227769647468225D2C66756E6374696F6E28652C75297B532E637373486F6F6B735B755D3D7B6765743A66756E",
    "6374696F6E28652C742C6E297B696628742972657475726E2155652E7465737428532E63737328652C22646973706C61792229297C7C652E67657443",
    "6C69656E74526563747328292E6C656E6774682626652E676574426F756E64696E67436C69656E745265637428292E77696474683F4A6528652C752C",
    "6E293A4D6528652C56652C66756E6374696F6E28297B72657475726E204A6528652C752C6E297D297D2C7365743A66756E6374696F6E28652C742C6E",
    "297B76617220722C693D52652865292C6F3D21792E7363726F6C6C626F7853697A6528292626226162736F6C757465223D3D3D692E706F736974696F",
    "6E2C613D286F7C7C6E29262622626F726465722D626F78223D3D3D532E63737328652C22626F7853697A696E67222C21312C69292C733D6E3F516528",
    "652C752C6E2C612C69293A303B72657475726E206126266F262628732D3D4D6174682E6365696C28655B226F6666736574222B755B305D2E746F5570",
    "7065724361736528292B752E736C6963652831295D2D7061727365466C6F617428695B755D292D516528652C752C22626F72646572222C21312C6929",
    "2D2E3529292C73262628723D74652E6578656328742929262622707822213D3D28725B335D7C7C2270782229262628652E7374796C655B755D3D742C",
    "743D532E63737328652C7529292C596528302C742C73297D7D7D292C532E637373486F6F6B732E6D617267696E4C6566743D466528792E72656C6961",
    "626C654D617267696E4C6566742C66756E6374696F6E28652C74297B696628742972657475726E287061727365466C6F617428576528652C226D6172",
    "67696E4C6566742229297C7C652E676574426F756E64696E67436C69656E745265637428292E6C6566742D4D6528652C7B6D617267696E4C6566743A",
    "307D2C66756E6374696F6E28297B72657475726E20652E676574426F756E64696E67436C69656E745265637428292E6C6566747D29292B227078227D",
    "292C532E65616368287B6D617267696E3A22222C70616464696E673A22222C626F726465723A225769647468227D2C66756E6374696F6E28692C6F29",
    "7B532E637373486F6F6B735B692B6F5D3D7B657870616E643A66756E6374696F6E2865297B666F722876617220743D302C6E3D7B7D2C723D22737472",
    "696E67223D3D747970656F6620653F652E73706C697428222022293A5B655D3B743C343B742B2B296E5B692B6E655B745D2B6F5D3D725B745D7C7C72",
    "5B742D325D7C7C725B305D3B72657475726E206E7D7D2C226D617267696E22213D3D69262628532E637373486F6F6B735B692B6F5D2E7365743D5965",
    "297D292C532E666E2E657874656E64287B6373733A66756E6374696F6E28652C74297B72657475726E202428746869732C66756E6374696F6E28652C",
    "742C6E297B76617220722C692C6F3D7B7D2C613D303B69662841727261792E69734172726179287429297B666F7228723D52652865292C693D742E6C",
    "656E6774683B613C693B612B2B296F5B745B615D5D3D532E63737328652C745B615D2C21312C72293B72657475726E206F7D72657475726E20766F69",
    "642030213D3D6E3F532E7374796C6528652C742C6E293A532E63737328652C74297D2C652C742C313C617267756D656E74732E6C656E677468297D7D",
    "292C2828532E547765656E3D4B65292E70726F746F747970653D7B636F6E7374727563746F723A4B652C696E69743A66756E6374696F6E28652C742C",
    "6E2C722C692C6F297B746869732E656C656D3D652C746869732E70726F703D6E2C746869732E656173696E673D697C7C532E656173696E672E5F6465",
    "6661756C742C746869732E6F7074696F6E733D742C746869732E73746172743D746869732E6E6F773D746869732E63757228292C746869732E656E64",
    "3D722C746869732E756E69743D6F7C7C28532E6373734E756D6265725B6E5D3F22223A22707822297D2C6375723A66756E6374696F6E28297B766172",
    "20653D4B652E70726F70486F6F6B735B746869732E70726F705D3B72657475726E20652626652E6765743F652E6765742874686973293A4B652E7072",
    "6F70486F6F6B732E5F64656661756C742E6765742874686973297D2C72756E3A66756E6374696F6E2865297B76617220742C6E3D4B652E70726F7048",
    "6F6F6B735B746869732E70726F705D3B72657475726E20746869732E6F7074696F6E732E6475726174696F6E3F746869732E706F733D743D532E6561",
    "73696E675B746869732E656173696E675D28652C746869732E6F7074696F6E732E6475726174696F6E2A652C302C312C746869732E6F7074696F6E73",
    "2E6475726174696F6E293A746869732E706F733D743D652C746869732E6E6F773D28746869732E656E642D746869732E7374617274292A742B746869",
    "732E73746172742C746869732E6F7074696F6E732E737465702626746869732E6F7074696F6E732E737465702E63616C6C28746869732E656C656D2C",
    "746869732E6E6F772C74686973292C6E26266E2E7365743F6E2E7365742874686973293A4B652E70726F70486F6F6B732E5F64656661756C742E7365",
    "742874686973292C746869737D7D292E696E69742E70726F746F747970653D4B652E70726F746F747970652C284B652E70726F70486F6F6B733D7B5F",
    "64656661756C743A7B6765743A66756E6374696F6E2865297B76617220743B72657475726E2031213D3D652E656C656D2E6E6F6465547970657C7C6E",
    "756C6C213D652E656C656D5B652E70726F705D26266E756C6C3D3D652E656C656D2E7374796C655B652E70726F705D3F652E656C656D5B652E70726F",
    "705D3A28743D532E63737328652E656C656D2C652E70726F702C222229292626226175746F22213D3D743F743A307D2C7365743A66756E6374696F6E",
    "2865297B532E66782E737465705B652E70726F705D3F532E66782E737465705B652E70726F705D2865293A31213D3D652E656C656D2E6E6F64655479",
    "70657C7C21532E637373486F6F6B735B652E70726F705D26266E756C6C3D3D652E656C656D2E7374796C655B7A6528652E70726F70295D3F652E656C",
    "656D5B652E70726F705D3D652E6E6F773A532E7374796C6528652E656C656D2C652E70726F702C652E6E6F772B652E756E6974297D7D7D292E736372",
    "6F6C6C546F703D4B652E70726F70486F6F6B732E7363726F6C6C4C6566743D7B7365743A66756E6374696F6E2865297B652E656C656D2E6E6F646554",
    "7970652626652E656C656D2E706172656E744E6F6465262628652E656C656D5B652E70726F705D3D652E6E6F77297D7D2C532E656173696E673D7B6C",
    "696E6561723A66756E6374696F6E2865297B72657475726E20657D2C7377696E673A66756E6374696F6E2865297B72657475726E2E352D4D6174682E",
    "636F7328652A4D6174682E5049292F327D2C5F64656661756C743A227377696E67227D2C532E66783D4B652E70726F746F747970652E696E69742C53",
    "2E66782E737465703D7B7D3B766172205A652C65742C74742C6E742C72743D2F5E283F3A746F67676C657C73686F777C6869646529242F2C69743D2F",
    "7175657565486F6F6B73242F3B66756E6374696F6E206F7428297B657426262821313D3D3D452E68696464656E2626432E72657175657374416E696D",
    "6174696F6E4672616D653F432E72657175657374416E696D6174696F6E4672616D65286F74293A432E73657454696D656F7574286F742C532E66782E",
    "696E74657276616C292C532E66782E7469636B2829297D66756E6374696F6E20617428297B72657475726E20432E73657454696D656F75742866756E",
    "6374696F6E28297B5A653D766F696420307D292C5A653D446174652E6E6F7728297D66756E6374696F6E20737428652C74297B766172206E2C723D30",
    "2C693D7B6865696768743A657D3B666F7228743D743F313A303B723C343B722B3D322D7429695B226D617267696E222B286E3D6E655B725D295D3D69",
    "5B2270616464696E67222B6E5D3D653B72657475726E2074262628692E6F7061636974793D692E77696474683D65292C697D66756E6374696F6E2075",
    "7428652C742C6E297B666F722876617220722C693D286C742E747765656E6572735B745D7C7C5B5D292E636F6E636174286C742E747765656E657273",
    "5B222A225D292C6F3D302C613D692E6C656E6774683B6F3C613B6F2B2B29696628723D695B6F5D2E63616C6C286E2C742C65292972657475726E2072",
    "7D66756E6374696F6E206C74286F2C652C74297B766172206E2C612C723D302C693D6C742E70726566696C746572732E6C656E6774682C733D532E44",
    "6566657272656428292E616C776179732866756E6374696F6E28297B64656C65746520752E656C656D7D292C753D66756E6374696F6E28297B696628",
    "612972657475726E21313B666F722876617220653D5A657C7C617428292C743D4D6174682E6D617828302C6C2E737461727454696D652B6C2E647572",
    "6174696F6E2D65292C6E3D312D28742F6C2E6475726174696F6E7C7C30292C723D302C693D6C2E747765656E732E6C656E6774683B723C693B722B2B",
    "296C2E747765656E735B725D2E72756E286E293B72657475726E20732E6E6F7469667957697468286F2C5B6C2C6E2C745D292C6E3C312626693F743A",
    "28697C7C732E6E6F7469667957697468286F2C5B6C2C312C305D292C732E7265736F6C766557697468286F2C5B6C5D292C2131297D2C6C3D732E7072",
    "6F6D697365287B656C656D3A6F2C70726F70733A532E657874656E64287B7D2C65292C6F7074733A532E657874656E642821302C7B7370656369616C",
    "456173696E673A7B7D2C656173696E673A532E656173696E672E5F64656661756C747D2C74292C6F726967696E616C50726F706572746965733A652C",
    "6F726967696E616C4F7074696F6E733A742C737461727454696D653A5A657C7C617428292C6475726174696F6E3A742E6475726174696F6E2C747765",
    "656E733A5B5D2C637265617465547765656E3A66756E6374696F6E28652C74297B766172206E3D532E547765656E286F2C6C2E6F7074732C652C742C",
    "6C2E6F7074732E7370656369616C456173696E675B655D7C7C6C2E6F7074732E656173696E67293B72657475726E206C2E747765656E732E70757368",
    "286E292C6E7D2C73746F703A66756E6374696F6E2865297B76617220743D302C6E3D653F6C2E747765656E732E6C656E6774683A303B696628612972",
    "657475726E20746869733B666F7228613D21303B743C6E3B742B2B296C2E747765656E735B745D2E72756E2831293B72657475726E20653F28732E6E",
    "6F7469667957697468286F2C5B6C2C312C305D292C732E7265736F6C766557697468286F2C5B6C2C655D29293A732E72656A65637457697468286F2C",
    "5B6C2C655D292C746869737D7D292C633D6C2E70726F70733B666F72282166756E6374696F6E28652C74297B766172206E2C722C692C6F2C613B666F",
    "72286E20696E206529696628693D745B723D58286E295D2C6F3D655B6E5D2C41727261792E69734172726179286F29262628693D6F5B315D2C6F3D65",
    "5B6E5D3D6F5B305D292C6E213D3D72262628655B725D3D6F2C64656C65746520655B6E5D292C28613D532E637373486F6F6B735B725D292626226578",
    "70616E6422696E206129666F72286E20696E206F3D612E657870616E64286F292C64656C65746520655B725D2C6F296E20696E20657C7C28655B6E5D",
    "3D6F5B6E5D2C745B6E5D3D69293B656C736520745B725D3D697D28632C6C2E6F7074732E7370656369616C456173696E67293B723C693B722B2B2969",
    "66286E3D6C742E70726566696C746572735B725D2E63616C6C286C2C6F2C632C6C2E6F707473292972657475726E206D286E2E73746F702926262853",
    "2E5F7175657565486F6F6B73286C2E656C656D2C6C2E6F7074732E7175657565292E73746F703D6E2E73746F702E62696E64286E29292C6E3B726574",
    "75726E20532E6D617028632C75742C6C292C6D286C2E6F7074732E73746172742926266C2E6F7074732E73746172742E63616C6C286F2C6C292C6C2E",
    "70726F6772657373286C2E6F7074732E70726F6772657373292E646F6E65286C2E6F7074732E646F6E652C6C2E6F7074732E636F6D706C657465292E",
    "6661696C286C2E6F7074732E6661696C292E616C77617973286C2E6F7074732E616C77617973292C532E66782E74696D657228532E657874656E6428",
    "752C7B656C656D3A6F2C616E696D3A6C2C71756575653A6C2E6F7074732E71756575657D29292C6C7D532E416E696D6174696F6E3D532E657874656E",
    "64286C742C7B747765656E6572733A7B222A223A5B66756E6374696F6E28652C74297B766172206E3D746869732E637265617465547765656E28652C",
    "74293B72657475726E207365286E2E656C656D2C652C74652E657865632874292C6E292C6E7D5D7D2C747765656E65723A66756E6374696F6E28652C",
    "74297B6D2865293F28743D652C653D5B222A225D293A653D652E6D617463682850293B666F7228766172206E2C723D302C693D652E6C656E6774683B",
    "723C693B722B2B296E3D655B725D2C6C742E747765656E6572735B6E5D3D6C742E747765656E6572735B6E5D7C7C5B5D2C6C742E747765656E657273",
    "5B6E5D2E756E73686966742874297D2C70726566696C746572733A5B66756E6374696F6E28652C742C6E297B76617220722C692C6F2C612C732C752C",
    "6C2C632C663D22776964746822696E20747C7C2268656967687422696E20742C703D746869732C643D7B7D2C683D652E7374796C652C673D652E6E6F",
    "646554797065262661652865292C763D592E67657428652C22667873686F7722293B666F72287220696E206E2E71756575657C7C286E756C6C3D3D28",
    "613D532E5F7175657565486F6F6B7328652C2266782229292E756E717565756564262628612E756E7175657565643D302C733D612E656D7074792E66",
    "6972652C612E656D7074792E666972653D66756E6374696F6E28297B612E756E7175657565647C7C7328297D292C612E756E7175657565642B2B2C70",
    "2E616C776179732866756E6374696F6E28297B702E616C776179732866756E6374696F6E28297B612E756E7175657565642D2D2C532E717565756528",
    "652C22667822292E6C656E6774687C7C612E656D7074792E6669726528297D297D29292C7429696628693D745B725D2C72742E74657374286929297B",
    "69662864656C65746520745B725D2C6F3D6F7C7C22746F67676C65223D3D3D692C693D3D3D28673F2268696465223A2273686F772229297B69662822",
    "73686F7722213D3D697C7C21767C7C766F696420303D3D3D765B725D29636F6E74696E75653B673D21307D645B725D3D762626765B725D7C7C532E73",
    "74796C6528652C72297D69662828753D21532E6973456D7074794F626A656374287429297C7C21532E6973456D7074794F626A65637428642929666F",
    "72287220696E20662626313D3D3D652E6E6F6465547970652626286E2E6F766572666C6F773D5B682E6F766572666C6F772C682E6F766572666C6F77",
    "582C682E6F766572666C6F77595D2C6E756C6C3D3D286C3D762626762E646973706C6179292626286C3D592E67657428652C22646973706C61792229",
    "292C226E6F6E65223D3D3D28633D532E63737328652C22646973706C61792229292626286C3F633D6C3A286C65285B655D2C2130292C6C3D652E7374",
    "796C652E646973706C61797C7C6C2C633D532E63737328652C22646973706C617922292C6C65285B655D2929292C2822696E6C696E65223D3D3D637C",
    "7C22696E6C696E652D626C6F636B223D3D3D6326266E756C6C213D6C292626226E6F6E65223D3D3D532E63737328652C22666C6F6174222926262875",
    "7C7C28702E646F6E652866756E6374696F6E28297B682E646973706C61793D6C7D292C6E756C6C3D3D6C262628633D682E646973706C61792C6C3D22",
    "6E6F6E65223D3D3D633F22223A6329292C682E646973706C61793D22696E6C696E652D626C6F636B2229292C6E2E6F766572666C6F77262628682E6F",
    "766572666C6F773D2268696464656E222C702E616C776179732866756E6374696F6E28297B682E6F766572666C6F773D6E2E6F766572666C6F775B30",
    "5D2C682E6F766572666C6F77583D6E2E6F766572666C6F775B315D2C682E6F766572666C6F77593D6E2E6F766572666C6F775B325D7D29292C753D21",
    "312C6429757C7C28763F2268696464656E22696E2076262628673D762E68696464656E293A763D592E61636365737328652C22667873686F77222C7B",
    "646973706C61793A6C7D292C6F262628762E68696464656E3D2167292C6726266C65285B655D2C2130292C702E646F6E652866756E6374696F6E2829",
    "7B666F72287220696E20677C7C6C65285B655D292C592E72656D6F766528652C22667873686F7722292C6429532E7374796C6528652C722C645B725D",
    "297D29292C753D757428673F765B725D3A302C722C70292C7220696E20767C7C28765B725D3D752E73746172742C67262628752E656E643D752E7374",
    "6172742C752E73746172743D3029297D5D2C70726566696C7465723A66756E6374696F6E28652C74297B743F6C742E70726566696C746572732E756E",
    "73686966742865293A6C742E70726566696C746572732E707573682865297D7D292C532E73706565643D66756E6374696F6E28652C742C6E297B7661",
    "7220723D652626226F626A656374223D3D747970656F6620653F532E657874656E64287B7D2C65293A7B636F6D706C6574653A6E7C7C216E2626747C",
    "7C6D2865292626652C6475726174696F6E3A652C656173696E673A6E2626747C7C742626216D2874292626747D3B72657475726E20532E66782E6F66",
    "663F722E6475726174696F6E3D303A226E756D62657222213D747970656F6620722E6475726174696F6E262628722E6475726174696F6E20696E2053",
    "2E66782E7370656564733F722E6475726174696F6E3D532E66782E7370656564735B722E6475726174696F6E5D3A722E6475726174696F6E3D532E66",
    "782E7370656564732E5F64656661756C74292C6E756C6C213D722E717565756526262130213D3D722E71756575657C7C28722E71756575653D226678",
    "22292C722E6F6C643D722E636F6D706C6574652C722E636F6D706C6574653D66756E6374696F6E28297B6D28722E6F6C64292626722E6F6C642E6361",
    "6C6C2874686973292C722E71756575652626532E6465717565756528746869732C722E7175657565297D2C727D2C532E666E2E657874656E64287B66",
    "616465546F3A66756E6374696F6E28652C742C6E2C72297B72657475726E20746869732E66696C746572286165292E63737328226F70616369747922",
    "2C30292E73686F7728292E656E6428292E616E696D617465287B6F7061636974793A747D2C652C6E2C72297D2C616E696D6174653A66756E6374696F",
    "6E28742C652C6E2C72297B76617220693D532E6973456D7074794F626A6563742874292C6F3D532E737065656428652C6E2C72292C613D66756E6374",
    "696F6E28297B76617220653D6C7428746869732C532E657874656E64287B7D2C74292C6F293B28697C7C592E67657428746869732C2266696E697368",
    "2229292626652E73746F70282130297D3B72657475726E20612E66696E6973683D612C697C7C21313D3D3D6F2E71756575653F746869732E65616368",
    "2861293A746869732E7175657565286F2E71756575652C61297D2C73746F703A66756E6374696F6E28692C652C6F297B76617220613D66756E637469",
    "6F6E2865297B76617220743D652E73746F703B64656C65746520652E73746F702C74286F297D3B72657475726E22737472696E6722213D747970656F",
    "6620692626286F3D652C653D692C693D766F69642030292C652626746869732E717565756528697C7C226678222C5B5D292C746869732E6561636828",
    "66756E6374696F6E28297B76617220653D21302C743D6E756C6C213D692626692B227175657565486F6F6B73222C6E3D532E74696D6572732C723D59",
    "2E6765742874686973293B6966287429725B745D2626725B745D2E73746F7026266128725B745D293B656C736520666F72287420696E207229725B74",
    "5D2626725B745D2E73746F70262669742E7465737428742926266128725B745D293B666F7228743D6E2E6C656E6774683B742D2D3B296E5B745D2E65",
    "6C656D213D3D746869737C7C6E756C6C213D6926266E5B745D2E7175657565213D3D697C7C286E5B745D2E616E696D2E73746F70286F292C653D2131",
    "2C6E2E73706C69636528742C3129293B216526266F7C7C532E6465717565756528746869732C69297D297D2C66696E6973683A66756E6374696F6E28",
    "61297B72657475726E2131213D3D61262628613D617C7C22667822292C746869732E656163682866756E6374696F6E28297B76617220652C743D592E",
    "6765742874686973292C6E3D745B612B227175657565225D2C723D745B612B227175657565486F6F6B73225D2C693D532E74696D6572732C6F3D6E3F",
    "6E2E6C656E6774683A303B666F7228742E66696E6973683D21302C532E717565756528746869732C612C5B5D292C722626722E73746F702626722E73",
    "746F702E63616C6C28746869732C2130292C653D692E6C656E6774683B652D2D3B29695B655D2E656C656D3D3D3D746869732626695B655D2E717565",
    "75653D3D3D61262628695B655D2E616E696D2E73746F70282130292C692E73706C69636528652C3129293B666F7228653D303B653C6F3B652B2B296E",
    "5B655D26266E5B655D2E66696E69736826266E5B655D2E66696E6973682E63616C6C2874686973293B64656C65746520742E66696E6973687D297D7D",
    "292C532E65616368285B22746F67676C65222C2273686F77222C2268696465225D2C66756E6374696F6E28652C72297B76617220693D532E666E5B72",
    "5D3B532E666E5B725D3D66756E6374696F6E28652C742C6E297B72657475726E206E756C6C3D3D657C7C22626F6F6C65616E223D3D747970656F6620",
    "653F692E6170706C7928746869732C617267756D656E7473293A746869732E616E696D61746528737428722C2130292C652C742C6E297D7D292C532E",
    "65616368287B736C696465446F776E3A7374282273686F7722292C736C69646555703A737428226869646522292C736C696465546F67676C653A7374",
    "2822746F67676C6522292C66616465496E3A7B6F7061636974793A2273686F77227D2C666164654F75743A7B6F7061636974793A2268696465227D2C",
    "66616465546F67676C653A7B6F7061636974793A22746F67676C65227D7D2C66756E6374696F6E28652C72297B532E666E5B655D3D66756E6374696F",
    "6E28652C742C6E297B72657475726E20746869732E616E696D61746528722C652C742C6E297D7D292C532E74696D6572733D5B5D2C532E66782E7469",
    "636B3D66756E6374696F6E28297B76617220652C743D302C6E3D532E74696D6572733B666F72285A653D446174652E6E6F7728293B743C6E2E6C656E",
    "6774683B742B2B2928653D6E5B745D2928297C7C6E5B745D213D3D657C7C6E2E73706C69636528742D2D2C31293B6E2E6C656E6774687C7C532E6678",
    "2E73746F7028292C5A653D766F696420307D2C532E66782E74696D65723D66756E6374696F6E2865297B532E74696D6572732E707573682865292C53",
    "2E66782E737461727428297D2C532E66782E696E74657276616C3D31332C532E66782E73746172743D66756E6374696F6E28297B65747C7C2865743D",
    "21302C6F742829297D2C532E66782E73746F703D66756E6374696F6E28297B65743D6E756C6C7D2C532E66782E7370656564733D7B736C6F773A3630",
    "302C666173743A3230302C5F64656661756C743A3430307D2C532E666E2E64656C61793D66756E6374696F6E28722C65297B72657475726E20723D53",
    "2E66782626532E66782E7370656564735B725D7C7C722C653D657C7C226678222C746869732E717565756528652C66756E6374696F6E28652C74297B",
    "766172206E3D432E73657454696D656F757428652C72293B742E73746F703D66756E6374696F6E28297B432E636C65617254696D656F7574286E297D",
    "7D297D2C74743D452E637265617465456C656D656E742822696E70757422292C6E743D452E637265617465456C656D656E74282273656C6563742229",
    "2E617070656E644368696C6428452E637265617465456C656D656E7428226F7074696F6E2229292C74742E747970653D22636865636B626F78222C79",
    "2E636865636B4F6E3D2222213D3D74742E76616C75652C792E6F707453656C65637465643D6E742E73656C65637465642C2874743D452E6372656174",
    "65456C656D656E742822696E7075742229292E76616C75653D2274222C74742E747970653D22726164696F222C792E726164696F56616C75653D2274",
    "223D3D3D74742E76616C75653B7661722063742C66743D532E657870722E6174747248616E646C653B532E666E2E657874656E64287B617474723A66",
    "756E6374696F6E28652C74297B72657475726E202428746869732C532E617474722C652C742C313C617267756D656E74732E6C656E677468297D2C72",
    "656D6F7665417474723A66756E6374696F6E2865297B72657475726E20746869732E656163682866756E6374696F6E28297B532E72656D6F76654174",
    "747228746869732C65297D297D7D292C532E657874656E64287B617474723A66756E6374696F6E28652C742C6E297B76617220722C692C6F3D652E6E",
    "6F6465547970653B69662833213D3D6F262638213D3D6F262632213D3D6F2972657475726E22756E646566696E6564223D3D747970656F6620652E67",
    "65744174747269627574653F532E70726F7028652C742C6E293A28313D3D3D6F2626532E6973584D4C446F632865297C7C28693D532E61747472486F",
    "6F6B735B742E746F4C6F7765724361736528295D7C7C28532E657870722E6D617463682E626F6F6C2E746573742874293F63743A766F696420302929",
    "2C766F69642030213D3D6E3F6E756C6C3D3D3D6E3F766F696420532E72656D6F76654174747228652C74293A6926262273657422696E20692626766F",
    "69642030213D3D28723D692E73657428652C6E2C7429293F723A28652E73657441747472696275746528742C6E2B2222292C6E293A69262622676574",
    "22696E206926266E756C6C213D3D28723D692E67657428652C7429293F723A6E756C6C3D3D28723D532E66696E642E6174747228652C7429293F766F",
    "696420303A72297D2C61747472486F6F6B733A7B747970653A7B7365743A66756E6374696F6E28652C74297B69662821792E726164696F56616C7565",
    "262622726164696F223D3D3D7426264128652C22696E7075742229297B766172206E3D652E76616C75653B72657475726E20652E7365744174747269",
    "62757465282274797065222C74292C6E262628652E76616C75653D6E292C747D7D7D7D2C72656D6F7665417474723A66756E6374696F6E28652C7429",
    "7B766172206E2C723D302C693D742626742E6D617463682850293B696628692626313D3D3D652E6E6F646554797065297768696C65286E3D695B722B",
    "2B5D29652E72656D6F7665417474726962757465286E297D7D292C63743D7B7365743A66756E6374696F6E28652C742C6E297B72657475726E21313D",
    "3D3D743F532E72656D6F76654174747228652C6E293A652E736574417474726962757465286E2C6E292C6E7D7D2C532E6561636828532E657870722E",
    "6D617463682E626F6F6C2E736F757263652E6D61746368282F5C772B2F67292C66756E6374696F6E28652C74297B76617220613D66745B745D7C7C53",
    "2E66696E642E617474723B66745B745D3D66756E6374696F6E28652C742C6E297B76617220722C692C6F3D742E746F4C6F7765724361736528293B72",
    "657475726E206E7C7C28693D66745B6F5D2C66745B6F5D3D722C723D6E756C6C213D6128652C742C6E293F6F3A6E756C6C2C66745B6F5D3D69292C72",
    "7D7D293B7661722070743D2F5E283F3A696E7075747C73656C6563747C74657874617265617C627574746F6E29242F692C64743D2F5E283F3A617C61",
    "72656129242F693B66756E6374696F6E2068742865297B72657475726E28652E6D617463682850297C7C5B5D292E6A6F696E28222022297D66756E63",
    "74696F6E2067742865297B72657475726E20652E6765744174747269627574652626652E6765744174747269627574652822636C61737322297C7C22",
    "227D66756E6374696F6E2076742865297B72657475726E2041727261792E697341727261792865293F653A22737472696E67223D3D747970656F6620",
    "652626652E6D617463682850297C7C5B5D7D532E666E2E657874656E64287B70726F703A66756E6374696F6E28652C74297B72657475726E20242874",
    "6869732C532E70726F702C652C742C313C617267756D656E74732E6C656E677468297D2C72656D6F766550726F703A66756E6374696F6E2865297B72",
    "657475726E20746869732E656163682866756E6374696F6E28297B64656C65746520746869735B532E70726F704669785B655D7C7C655D7D297D7D29",
    "2C532E657874656E64287B70726F703A66756E6374696F6E28652C742C6E297B76617220722C692C6F3D652E6E6F6465547970653B69662833213D3D",
    "6F262638213D3D6F262632213D3D6F2972657475726E20313D3D3D6F2626532E6973584D4C446F632865297C7C28743D532E70726F704669785B745D",
    "7C7C742C693D532E70726F70486F6F6B735B745D292C766F69642030213D3D6E3F6926262273657422696E20692626766F69642030213D3D28723D69",
    "2E73657428652C6E2C7429293F723A655B745D3D6E3A6926262267657422696E206926266E756C6C213D3D28723D692E67657428652C7429293F723A",
    "655B745D7D2C70726F70486F6F6B733A7B746162496E6465783A7B6765743A66756E6374696F6E2865297B76617220743D532E66696E642E61747472",
    "28652C22746162696E64657822293B72657475726E20743F7061727365496E7428742C3130293A70742E7465737428652E6E6F64654E616D65297C7C",
    "64742E7465737428652E6E6F64654E616D65292626652E687265663F303A2D317D7D7D2C70726F704669783A7B22666F72223A2268746D6C466F7222",
    "2C22636C617373223A22636C6173734E616D65227D7D292C792E6F707453656C65637465647C7C28532E70726F70486F6F6B732E73656C6563746564",
    "3D7B6765743A66756E6374696F6E2865297B76617220743D652E706172656E744E6F64653B72657475726E20742626742E706172656E744E6F646526",
    "26742E706172656E744E6F64652E73656C6563746564496E6465782C6E756C6C7D2C7365743A66756E6374696F6E2865297B76617220743D652E7061",
    "72656E744E6F64653B74262628742E73656C6563746564496E6465782C742E706172656E744E6F64652626742E706172656E744E6F64652E73656C65",
    "63746564496E646578297D7D292C532E65616368285B22746162496E646578222C22726561644F6E6C79222C226D61784C656E677468222C2263656C",
    "6C53706163696E67222C2263656C6C50616464696E67222C22726F775370616E222C22636F6C5370616E222C227573654D6170222C226672616D6542",
    "6F72646572222C22636F6E74656E744564697461626C65225D2C66756E6374696F6E28297B532E70726F704669785B746869732E746F4C6F77657243",
    "61736528295D3D746869737D292C532E666E2E657874656E64287B616464436C6173733A66756E6374696F6E2874297B76617220652C6E2C722C692C",
    "6F2C612C732C753D303B6966286D2874292972657475726E20746869732E656163682866756E6374696F6E2865297B532874686973292E616464436C",
    "61737328742E63616C6C28746869732C652C677428746869732929297D293B69662828653D7674287429292E6C656E677468297768696C65286E3D74",
    "6869735B752B2B5D29696628693D6774286E292C723D313D3D3D6E2E6E6F64655479706526262220222B68742869292B222022297B613D303B776869",
    "6C65286F3D655B612B2B5D29722E696E6465784F66282220222B6F2B222022293C30262628722B3D6F2B222022293B69213D3D28733D687428722929",
    "26266E2E7365744174747269627574652822636C617373222C73297D72657475726E20746869737D2C72656D6F7665436C6173733A66756E6374696F",
    "6E2874297B76617220652C6E2C722C692C6F2C612C732C753D303B6966286D2874292972657475726E20746869732E656163682866756E6374696F6E",
    "2865297B532874686973292E72656D6F7665436C61737328742E63616C6C28746869732C652C677428746869732929297D293B69662821617267756D",
    "656E74732E6C656E6774682972657475726E20746869732E617474722822636C617373222C2222293B69662828653D7674287429292E6C656E677468",
    "297768696C65286E3D746869735B752B2B5D29696628693D6774286E292C723D313D3D3D6E2E6E6F64655479706526262220222B68742869292B2220",
    "22297B613D303B7768696C65286F3D655B612B2B5D297768696C65282D313C722E696E6465784F66282220222B6F2B2220222929723D722E7265706C",
    "616365282220222B6F2B2220222C222022293B69213D3D28733D68742872292926266E2E7365744174747269627574652822636C617373222C73297D",
    "72657475726E20746869737D2C746F67676C65436C6173733A66756E6374696F6E28692C74297B766172206F3D747970656F6620692C613D22737472",
    "696E67223D3D3D6F7C7C41727261792E697341727261792869293B72657475726E22626F6F6C65616E223D3D747970656F6620742626613F743F7468",
    "69732E616464436C6173732869293A746869732E72656D6F7665436C6173732869293A6D2869293F746869732E656163682866756E6374696F6E2865",
    "297B532874686973292E746F67676C65436C61737328692E63616C6C28746869732C652C67742874686973292C74292C74297D293A746869732E6561",
    "63682866756E6374696F6E28297B76617220652C742C6E2C723B69662861297B743D302C6E3D532874686973292C723D76742869293B7768696C6528",
    "653D725B742B2B5D296E2E686173436C6173732865293F6E2E72656D6F7665436C6173732865293A6E2E616464436C6173732865297D656C73652076",
    "6F69642030213D3D69262622626F6F6C65616E22213D3D6F7C7C2828653D6774287468697329292626592E73657428746869732C225F5F636C617373",
    "4E616D655F5F222C65292C746869732E7365744174747269627574652626746869732E7365744174747269627574652822636C617373222C657C7C21",
    "313D3D3D693F22223A592E67657428746869732C225F5F636C6173734E616D655F5F22297C7C222229297D297D2C686173436C6173733A66756E6374",
    "696F6E2865297B76617220742C6E2C723D303B743D2220222B652B2220223B7768696C65286E3D746869735B722B2B5D29696628313D3D3D6E2E6E6F",
    "64655479706526262D313C282220222B6874286774286E29292B222022292E696E6465784F662874292972657475726E21303B72657475726E21317D",
    "7D293B7661722079743D2F5C722F673B532E666E2E657874656E64287B76616C3A66756E6374696F6E286E297B76617220722C652C692C743D746869",
    "735B305D3B72657475726E20617267756D656E74732E6C656E6774683F28693D6D286E292C746869732E656163682866756E6374696F6E2865297B76",
    "617220743B313D3D3D746869732E6E6F6465547970652626286E756C6C3D3D28743D693F6E2E63616C6C28746869732C652C532874686973292E7661",
    "6C2829293A6E293F743D22223A226E756D626572223D3D747970656F6620743F742B3D22223A41727261792E69734172726179287429262628743D53",
    "2E6D617028742C66756E6374696F6E2865297B72657475726E206E756C6C3D3D653F22223A652B22227D29292C28723D532E76616C486F6F6B735B74",
    "6869732E747970655D7C7C532E76616C486F6F6B735B746869732E6E6F64654E616D652E746F4C6F7765724361736528295D2926262273657422696E",
    "20722626766F69642030213D3D722E73657428746869732C742C2276616C756522297C7C28746869732E76616C75653D7429297D29293A743F28723D",
    "532E76616C486F6F6B735B742E747970655D7C7C532E76616C486F6F6B735B742E6E6F64654E616D652E746F4C6F7765724361736528295D29262622",
    "67657422696E20722626766F69642030213D3D28653D722E67657428742C2276616C75652229293F653A22737472696E67223D3D747970656F662865",
    "3D742E76616C7565293F652E7265706C6163652879742C2222293A6E756C6C3D3D653F22223A653A766F696420307D7D292C532E657874656E64287B",
    "76616C486F6F6B733A7B6F7074696F6E3A7B6765743A66756E6374696F6E2865297B76617220743D532E66696E642E6174747228652C2276616C7565",
    "22293B72657475726E206E756C6C213D743F743A687428532E74657874286529297D7D2C73656C6563743A7B6765743A66756E6374696F6E2865297B",
    "76617220742C6E2C722C693D652E6F7074696F6E732C6F3D652E73656C6563746564496E6465782C613D2273656C6563742D6F6E65223D3D3D652E74",
    "7970652C733D613F6E756C6C3A5B5D2C753D613F6F2B313A692E6C656E6774683B666F7228723D6F3C303F753A613F6F3A303B723C753B722B2B2969",
    "662828286E3D695B725D292E73656C65637465647C7C723D3D3D6F292626216E2E64697361626C6564262628216E2E706172656E744E6F64652E6469",
    "7361626C65647C7C2141286E2E706172656E744E6F64652C226F707467726F7570222929297B696628743D53286E292E76616C28292C612972657475",
    "726E20743B732E707573682874297D72657475726E20737D2C7365743A66756E6374696F6E28652C74297B766172206E2C722C693D652E6F7074696F",
    "6E732C6F3D532E6D616B6541727261792874292C613D692E6C656E6774683B7768696C6528612D2D292828723D695B615D292E73656C65637465643D",
    "2D313C532E696E417272617928532E76616C486F6F6B732E6F7074696F6E2E6765742872292C6F29292626286E3D2130293B72657475726E206E7C7C",
    "28652E73656C6563746564496E6465783D2D31292C6F7D7D7D7D292C532E65616368285B22726164696F222C22636865636B626F78225D2C66756E63",
    "74696F6E28297B532E76616C486F6F6B735B746869735D3D7B7365743A66756E6374696F6E28652C74297B69662841727261792E6973417272617928",
    "74292972657475726E20652E636865636B65643D2D313C532E696E417272617928532865292E76616C28292C74297D7D2C792E636865636B4F6E7C7C",
    "28532E76616C486F6F6B735B746869735D2E6765743D66756E6374696F6E2865297B72657475726E206E756C6C3D3D3D652E67657441747472696275",
    "7465282276616C756522293F226F6E223A652E76616C75657D297D292C792E666F637573696E3D226F6E666F637573696E22696E20433B766172206D",
    "743D2F5E283F3A666F637573696E666F6375737C666F6375736F7574626C757229242F2C78743D66756E6374696F6E2865297B652E73746F7050726F",
    "7061676174696F6E28297D3B532E657874656E6428532E6576656E742C7B747269676765723A66756E6374696F6E28652C742C6E2C72297B76617220",
    "692C6F2C612C732C752C6C2C632C662C703D5B6E7C7C455D2C643D762E63616C6C28652C227479706522293F652E747970653A652C683D762E63616C",
    "6C28652C226E616D65737061636522293F652E6E616D6573706163652E73706C697428222E22293A5B5D3B6966286F3D663D613D6E3D6E7C7C452C33",
    "213D3D6E2E6E6F646554797065262638213D3D6E2E6E6F6465547970652626216D742E7465737428642B532E6576656E742E74726967676572656429",
    "2626282D313C642E696E6465784F6628222E2229262628643D28683D642E73706C697428222E2229292E736869667428292C682E736F72742829292C",
    "753D642E696E6465784F6628223A22293C302626226F6E222B642C28653D655B532E657870616E646F5D3F653A6E657720532E4576656E7428642C22",
    "6F626A656374223D3D747970656F66206526266529292E6973547269676765723D723F323A332C652E6E616D6573706163653D682E6A6F696E28222E",
    "22292C652E726E616D6573706163653D652E6E616D6573706163653F6E6577205265674578702822285E7C5C5C2E29222B682E6A6F696E28225C5C2E",
    "283F3A2E2A5C5C2E7C2922292B22285C5C2E7C242922293A6E756C6C2C652E726573756C743D766F696420302C652E7461726765747C7C28652E7461",
    "726765743D6E292C743D6E756C6C3D3D743F5B655D3A532E6D616B65417272617928742C5B655D292C633D532E6576656E742E7370656369616C5B64",
    "5D7C7C7B7D2C727C7C21632E747269676765727C7C2131213D3D632E747269676765722E6170706C79286E2C742929297B6966282172262621632E6E",
    "6F427562626C6526262178286E29297B666F7228733D632E64656C6567617465547970657C7C642C6D742E7465737428732B64297C7C286F3D6F2E70",
    "6172656E744E6F6465293B6F3B6F3D6F2E706172656E744E6F646529702E70757368286F292C613D6F3B613D3D3D286E2E6F776E6572446F63756D65",
    "6E747C7C45292626702E7075736828612E64656661756C74566965777C7C612E706172656E7457696E646F777C7C43297D693D303B7768696C652828",
    "6F3D705B692B2B5D29262621652E697350726F7061676174696F6E53746F70706564282929663D6F2C652E747970653D313C693F733A632E62696E64",
    "547970657C7C642C286C3D28592E676574286F2C226576656E747322297C7C4F626A6563742E637265617465286E756C6C29295B652E747970655D26",
    "26592E676574286F2C2268616E646C6522292926266C2E6170706C79286F2C74292C286C3D7526266F5B755D2926266C2E6170706C79262656286F29",
    "262628652E726573756C743D6C2E6170706C79286F2C74292C21313D3D3D652E726573756C742626652E70726576656E7444656661756C742829293B",
    "72657475726E20652E747970653D642C727C7C652E697344656661756C7450726576656E74656428297C7C632E5F64656661756C7426262131213D3D",
    "632E5F64656661756C742E6170706C7928702E706F7028292C74297C7C2156286E297C7C7526266D286E5B645D2926262178286E2926262828613D6E",
    "5B755D292626286E5B755D3D6E756C6C292C532E6576656E742E7472696767657265643D642C652E697350726F7061676174696F6E53746F70706564",
    "28292626662E6164644576656E744C697374656E657228642C7874292C6E5B645D28292C652E697350726F7061676174696F6E53746F707065642829",
    "2626662E72656D6F76654576656E744C697374656E657228642C7874292C532E6576656E742E7472696767657265643D766F696420302C612626286E",
    "5B755D3D6129292C652E726573756C747D7D2C73696D756C6174653A66756E6374696F6E28652C742C6E297B76617220723D532E657874656E64286E",
    "657720532E4576656E742C6E2C7B747970653A652C697353696D756C617465643A21307D293B532E6576656E742E7472696767657228722C6E756C6C",
    "2C74297D7D292C532E666E2E657874656E64287B747269676765723A66756E6374696F6E28652C74297B72657475726E20746869732E656163682866",
    "756E6374696F6E28297B532E6576656E742E7472696767657228652C742C74686973297D297D2C7472696767657248616E646C65723A66756E637469",
    "6F6E28652C74297B766172206E3D746869735B305D3B6966286E2972657475726E20532E6576656E742E7472696767657228652C742C6E2C2130297D",
    "7D292C792E666F637573696E7C7C532E65616368287B666F6375733A22666F637573696E222C626C75723A22666F6375736F7574227D2C66756E6374",
    "696F6E286E2C72297B76617220693D66756E6374696F6E2865297B532E6576656E742E73696D756C61746528722C652E7461726765742C532E657665",
    "6E742E666978286529297D3B532E6576656E742E7370656369616C5B725D3D7B73657475703A66756E6374696F6E28297B76617220653D746869732E",
    "6F776E6572446F63756D656E747C7C746869732E646F63756D656E747C7C746869732C743D592E61636365737328652C72293B747C7C652E61646445",
    "76656E744C697374656E6572286E2C692C2130292C592E61636365737328652C722C28747C7C30292B31297D2C74656172646F776E3A66756E637469",
    "6F6E28297B76617220653D746869732E6F776E6572446F63756D656E747C7C746869732E646F63756D656E747C7C746869732C743D592E6163636573",
    "7328652C72292D313B743F592E61636365737328652C722C74293A28652E72656D6F76654576656E744C697374656E6572286E2C692C2130292C592E",
    "72656D6F766528652C7229297D7D7D293B7661722062743D432E6C6F636174696F6E2C77743D7B677569643A446174652E6E6F7728297D2C54743D2F",
    "5C3F2F3B532E7061727365584D4C3D66756E6374696F6E2865297B76617220742C6E3B69662821657C7C22737472696E6722213D747970656F662065",
    "2972657475726E206E756C6C3B7472797B743D286E657720432E444F4D506172736572292E706172736546726F6D537472696E6728652C2274657874",
    "2F786D6C22297D63617463682865297B7D72657475726E206E3D742626742E676574456C656D656E747342795461674E616D65282270617273657265",
    "72726F7222295B305D2C742626216E7C7C532E6572726F722822496E76616C696420584D4C3A20222B286E3F532E6D6170286E2E6368696C644E6F64",
    "65732C66756E6374696F6E2865297B72657475726E20652E74657874436F6E74656E747D292E6A6F696E28225C6E22293A6529292C747D3B76617220",
    "43743D2F5C5B5C5D242F2C45743D2F5C723F5C6E2F672C53743D2F5E283F3A7375626D69747C627574746F6E7C696D6167657C72657365747C66696C",
    "6529242F692C6B743D2F5E283F3A696E7075747C73656C6563747C74657874617265617C6B657967656E292F693B66756E6374696F6E204174286E2C",
    "652C722C69297B76617220743B69662841727261792E6973417272617928652929532E6561636828652C66756E6374696F6E28652C74297B727C7C43",
    "742E74657374286E293F69286E2C74293A4174286E2B225B222B28226F626A656374223D3D747970656F66207426266E756C6C213D743F653A222229",
    "2B225D222C742C722C69297D293B656C736520696628727C7C226F626A65637422213D3D772865292969286E2C65293B656C736520666F7228742069",
    "6E2065294174286E2B225B222B742B225D222C655B745D2C722C69297D532E706172616D3D66756E6374696F6E28652C74297B766172206E2C723D5B",
    "5D2C693D66756E6374696F6E28652C74297B766172206E3D6D2874293F7428293A743B725B722E6C656E6774685D3D656E636F6465555249436F6D70",
    "6F6E656E742865292B223D222B656E636F6465555249436F6D706F6E656E74286E756C6C3D3D6E3F22223A6E297D3B6966286E756C6C3D3D65297265",
    "7475726E22223B69662841727261792E697341727261792865297C7C652E6A7175657279262621532E6973506C61696E4F626A65637428652929532E",
    "6561636828652C66756E6374696F6E28297B6928746869732E6E616D652C746869732E76616C7565297D293B656C736520666F72286E20696E206529",
    "4174286E2C655B6E5D2C742C69293B72657475726E20722E6A6F696E28222622297D2C532E666E2E657874656E64287B73657269616C697A653A6675",
    "6E6374696F6E28297B72657475726E20532E706172616D28746869732E73657269616C697A6541727261792829297D2C73657269616C697A65417272",
    "61793A66756E6374696F6E28297B72657475726E20746869732E6D61702866756E6374696F6E28297B76617220653D532E70726F7028746869732C22",
    "656C656D656E747322293B72657475726E20653F532E6D616B6541727261792865293A746869737D292E66696C7465722866756E6374696F6E28297B",
    "76617220653D746869732E747970653B72657475726E20746869732E6E616D65262621532874686973292E697328223A64697361626C656422292626",
    "6B742E7465737428746869732E6E6F64654E616D652926262153742E74657374286529262628746869732E636865636B65647C7C2170652E74657374",
    "286529297D292E6D61702866756E6374696F6E28652C74297B766172206E3D532874686973292E76616C28293B72657475726E206E756C6C3D3D6E3F",
    "6E756C6C3A41727261792E69734172726179286E293F532E6D6170286E2C66756E6374696F6E2865297B72657475726E7B6E616D653A742E6E616D65",
    "2C76616C75653A652E7265706C6163652845742C225C725C6E22297D7D293A7B6E616D653A742E6E616D652C76616C75653A6E2E7265706C61636528",
    "45742C225C725C6E22297D7D292E67657428297D7D293B766172204E743D2F2532302F672C6A743D2F232E2A242F2C44743D2F285B3F265D295F3D5B",
    "5E265D2A2F2C71743D2F5E282E2A3F293A5B205C745D2A285B5E5C725C6E5D2A29242F676D2C4C743D2F5E283F3A4745547C4845414429242F2C4874",
    "3D2F5E5C2F5C2F2F2C4F743D7B7D2C50743D7B7D2C52743D222A2F222E636F6E63617428222A22292C4D743D452E637265617465456C656D656E7428",
    "226122293B66756E6374696F6E204974286F297B72657475726E2066756E6374696F6E28652C74297B22737472696E6722213D747970656F66206526",
    "2628743D652C653D222A22293B766172206E2C723D302C693D652E746F4C6F7765724361736528292E6D617463682850297C7C5B5D3B6966286D2874",
    "29297768696C65286E3D695B722B2B5D29222B223D3D3D6E5B305D3F286E3D6E2E736C6963652831297C7C222A222C286F5B6E5D3D6F5B6E5D7C7C5B",
    "5D292E756E7368696674287429293A286F5B6E5D3D6F5B6E5D7C7C5B5D292E707573682874297D7D66756E6374696F6E20577428742C692C6F2C6129",
    "7B76617220733D7B7D2C753D743D3D3D50743B66756E6374696F6E206C2865297B76617220723B72657475726E20735B655D3D21302C532E65616368",
    "28745B655D7C7C5B5D2C66756E6374696F6E28652C74297B766172206E3D7428692C6F2C61293B72657475726E22737472696E6722213D747970656F",
    "66206E7C7C757C7C735B6E5D3F753F2128723D6E293A766F696420303A28692E6461746154797065732E756E7368696674286E292C6C286E292C2131",
    "297D292C727D72657475726E206C28692E6461746154797065735B305D297C7C21735B222A225D26266C28222A22297D66756E6374696F6E20467428",
    "652C74297B766172206E2C722C693D532E616A617853657474696E67732E666C61744F7074696F6E737C7C7B7D3B666F72286E20696E207429766F69",
    "642030213D3D745B6E5D26262828695B6E5D3F653A727C7C28723D7B7D29295B6E5D3D745B6E5D293B72657475726E20722626532E657874656E6428",
    "21302C652C72292C657D4D742E687265663D62742E687265662C532E657874656E64287B6163746976653A302C6C6173744D6F6469666965643A7B7D",
    "2C657461673A7B7D2C616A617853657474696E67733A7B75726C3A62742E687265662C747970653A22474554222C69734C6F63616C3A2F5E283F3A61",
    "626F75747C6170707C6170702D73746F726167657C2E2B2D657874656E73696F6E7C66696C657C7265737C776964676574293A242F2E746573742862",
    "742E70726F746F636F6C292C676C6F62616C3A21302C70726F63657373446174613A21302C6173796E633A21302C636F6E74656E74547970653A2261",
    "70706C69636174696F6E2F782D7777772D666F726D2D75726C656E636F6465643B20636861727365743D5554462D38222C616363657074733A7B222A",
    "223A52742C746578743A22746578742F706C61696E222C68746D6C3A22746578742F68746D6C222C786D6C3A226170706C69636174696F6E2F786D6C",
    "2C20746578742F786D6C222C6A736F6E3A226170706C69636174696F6E2F6A736F6E2C20746578742F6A617661736372697074227D2C636F6E74656E",
    "74733A7B786D6C3A2F5C62786D6C5C622F2C68746D6C3A2F5C6268746D6C2F2C6A736F6E3A2F5C626A736F6E5C622F7D2C726573706F6E7365466965",
    "6C64733A7B786D6C3A22726573706F6E7365584D4C222C746578743A22726573706F6E736554657874222C6A736F6E3A22726573706F6E73654A534F",
    "4E227D2C636F6E766572746572733A7B222A2074657874223A537472696E672C22746578742068746D6C223A21302C2274657874206A736F6E223A4A",
    "534F4E2E70617273652C227465787420786D6C223A532E7061727365584D4C7D2C666C61744F7074696F6E733A7B75726C3A21302C636F6E74657874",
    "3A21307D7D2C616A617853657475703A66756E6374696F6E28652C74297B72657475726E20743F467428467428652C532E616A617853657474696E67",
    "73292C74293A467428532E616A617853657474696E67732C65297D2C616A617850726566696C7465723A4974284F74292C616A61785472616E73706F",
    "72743A4974285074292C616A61783A66756E6374696F6E28652C74297B226F626A656374223D3D747970656F662065262628743D652C653D766F6964",
    "2030292C743D747C7C7B7D3B76617220632C662C702C6E2C642C722C682C672C692C6F2C763D532E616A61785365747570287B7D2C74292C793D762E",
    "636F6E746578747C7C762C6D3D762E636F6E74657874262628792E6E6F6465547970657C7C792E6A7175657279293F532879293A532E6576656E742C",
    "783D532E446566657272656428292C623D532E43616C6C6261636B7328226F6E6365206D656D6F727922292C773D762E737461747573436F64657C7C",
    "7B7D2C613D7B7D2C733D7B7D2C753D2263616E63656C6564222C543D7B726561647953746174653A302C676574526573706F6E73654865616465723A",
    "66756E6374696F6E2865297B76617220743B69662868297B696628216E297B6E3D7B7D3B7768696C6528743D71742E65786563287029296E5B745B31",
    "5D2E746F4C6F7765724361736528292B2220225D3D286E5B745B315D2E746F4C6F7765724361736528292B2220225D7C7C5B5D292E636F6E63617428",
    "745B325D297D743D6E5B652E746F4C6F7765724361736528292B2220225D7D72657475726E206E756C6C3D3D743F6E756C6C3A742E6A6F696E28222C",
    "2022297D2C676574416C6C526573706F6E7365486561646572733A66756E6374696F6E28297B72657475726E20683F703A6E756C6C7D2C7365745265",
    "71756573744865616465723A66756E6374696F6E28652C74297B72657475726E206E756C6C3D3D68262628653D735B652E746F4C6F77657243617365",
    "28295D3D735B652E746F4C6F7765724361736528295D7C7C652C615B655D3D74292C746869737D2C6F766572726964654D696D65547970653A66756E",
    "6374696F6E2865297B72657475726E206E756C6C3D3D68262628762E6D696D65547970653D65292C746869737D2C737461747573436F64653A66756E",
    "6374696F6E2865297B76617220743B69662865296966286829542E616C7761797328655B542E7374617475735D293B656C736520666F72287420696E",
    "206529775B745D3D5B775B745D2C655B745D5D3B72657475726E20746869737D2C61626F72743A66756E6374696F6E2865297B76617220743D657C7C",
    "753B72657475726E20632626632E61626F72742874292C6C28302C74292C746869737D7D3B696628782E70726F6D6973652854292C762E75726C3D28",
    "28657C7C762E75726C7C7C62742E68726566292B2222292E7265706C6163652848742C62742E70726F746F636F6C2B222F2F22292C762E747970653D",
    "742E6D6574686F647C7C742E747970657C7C762E6D6574686F647C7C762E747970652C762E6461746154797065733D28762E64617461547970657C7C",
    "222A22292E746F4C6F7765724361736528292E6D617463682850297C7C5B22225D2C6E756C6C3D3D762E63726F7373446F6D61696E297B723D452E63",
    "7265617465456C656D656E7428226122293B7472797B722E687265663D762E75726C2C722E687265663D722E687265662C762E63726F7373446F6D61",
    "696E3D4D742E70726F746F636F6C2B222F2F222B4D742E686F7374213D722E70726F746F636F6C2B222F2F222B722E686F73747D6361746368286529",
    "7B762E63726F7373446F6D61696E3D21307D7D696628762E646174612626762E70726F6365737344617461262622737472696E6722213D747970656F",
    "6620762E64617461262628762E646174613D532E706172616D28762E646174612C762E747261646974696F6E616C29292C5774284F742C762C742C54",
    "292C682972657475726E20543B666F72286920696E28673D532E6576656E742626762E676C6F62616C292626303D3D532E6163746976652B2B262653",
    "2E6576656E742E747269676765722822616A6178537461727422292C762E747970653D762E747970652E746F55707065724361736528292C762E6861",
    "73436F6E74656E743D214C742E7465737428762E74797065292C663D762E75726C2E7265706C616365286A742C2222292C762E686173436F6E74656E",
    "743F762E646174612626762E70726F63657373446174612626303D3D3D28762E636F6E74656E74547970657C7C2222292E696E6465784F6628226170",
    "706C69636174696F6E2F782D7777772D666F726D2D75726C656E636F6465642229262628762E646174613D762E646174612E7265706C616365284E74",
    "2C222B2229293A286F3D762E75726C2E736C69636528662E6C656E677468292C762E64617461262628762E70726F63657373446174617C7C22737472",
    "696E67223D3D747970656F6620762E6461746129262628662B3D2854742E746573742866293F2226223A223F22292B762E646174612C64656C657465",
    "20762E64617461292C21313D3D3D762E6361636865262628663D662E7265706C6163652844742C22243122292C6F3D2854742E746573742866293F22",
    "26223A223F22292B225F3D222B77742E677569642B2B2B6F292C762E75726C3D662B6F292C762E69664D6F646966696564262628532E6C6173744D6F",
    "6469666965645B665D2626542E73657452657175657374486561646572282249662D4D6F6469666965642D53696E6365222C532E6C6173744D6F6469",
    "666965645B665D292C532E657461675B665D2626542E73657452657175657374486561646572282249662D4E6F6E652D4D61746368222C532E657461",
    "675B665D29292C28762E646174612626762E686173436F6E74656E7426262131213D3D762E636F6E74656E74547970657C7C742E636F6E74656E7454",
    "797065292626542E736574526571756573744865616465722822436F6E74656E742D54797065222C762E636F6E74656E7454797065292C542E736574",
    "526571756573744865616465722822416363657074222C762E6461746154797065735B305D2626762E616363657074735B762E646174615479706573",
    "5B305D5D3F762E616363657074735B762E6461746154797065735B305D5D2B28222A22213D3D762E6461746154797065735B305D3F222C20222B5274",
    "2B223B20713D302E3031223A2222293A762E616363657074735B222A225D292C762E6865616465727329542E73657452657175657374486561646572",
    "28692C762E686561646572735B695D293B696628762E6265666F726553656E6426262821313D3D3D762E6265666F726553656E642E63616C6C28792C",
    "542C76297C7C68292972657475726E20542E61626F727428293B696628753D2261626F7274222C622E61646428762E636F6D706C657465292C542E64",
    "6F6E6528762E73756363657373292C542E6661696C28762E6572726F72292C633D57742850742C762C742C5429297B696628542E7265616479537461",
    "74653D312C6726266D2E747269676765722822616A617853656E64222C5B542C765D292C682972657475726E20543B762E6173796E632626303C762E",
    "74696D656F7574262628643D432E73657454696D656F75742866756E6374696F6E28297B542E61626F7274282274696D656F757422297D2C762E7469",
    "6D656F757429293B7472797B683D21312C632E73656E6428612C6C297D63617463682865297B69662868297468726F7720653B6C282D312C65297D7D",
    "656C7365206C282D312C224E6F205472616E73706F727422293B66756E6374696F6E206C28652C742C6E2C72297B76617220692C6F2C612C732C752C",
    "6C3D743B687C7C28683D21302C642626432E636C65617254696D656F75742864292C633D766F696420302C703D727C7C22222C542E72656164795374",
    "6174653D303C653F343A302C693D3230303C3D652626653C3330307C7C3330343D3D3D652C6E262628733D66756E6374696F6E28652C742C6E297B76",
    "617220722C692C6F2C612C733D652E636F6E74656E74732C753D652E6461746154797065733B7768696C6528222A223D3D3D755B305D29752E736869",
    "667428292C766F696420303D3D3D72262628723D652E6D696D65547970657C7C742E676574526573706F6E73654865616465722822436F6E74656E74",
    "2D547970652229293B6966287229666F72286920696E207329696628735B695D2626735B695D2E74657374287229297B752E756E7368696674286929",
    "3B627265616B7D696628755B305D696E206E296F3D755B305D3B656C73657B666F72286920696E206E297B69662821755B305D7C7C652E636F6E7665",
    "72746572735B692B2220222B755B305D5D297B6F3D693B627265616B7D617C7C28613D69297D6F3D6F7C7C617D6966286F2972657475726E206F213D",
    "3D755B305D2626752E756E7368696674286F292C6E5B6F5D7D28762C542C6E29292C216926262D313C532E696E41727261792822736372697074222C",
    "762E646174615479706573292626532E696E417272617928226A736F6E222C762E646174615479706573293C30262628762E636F6E76657274657273",
    "5B227465787420736372697074225D3D66756E6374696F6E28297B7D292C733D66756E6374696F6E28652C742C6E2C72297B76617220692C6F2C612C",
    "732C752C6C3D7B7D2C633D652E6461746154797065732E736C69636528293B696628635B315D29666F72286120696E20652E636F6E76657274657273",
    "296C5B612E746F4C6F7765724361736528295D3D652E636F6E766572746572735B615D3B6F3D632E736869667428293B7768696C65286F2969662865",
    "2E726573706F6E73654669656C64735B6F5D2626286E5B652E726573706F6E73654669656C64735B6F5D5D3D74292C21752626722626652E64617461",
    "46696C746572262628743D652E6461746146696C74657228742C652E646174615479706529292C753D6F2C6F3D632E7368696674282929696628222A",
    "223D3D3D6F296F3D753B656C736520696628222A22213D3D75262675213D3D6F297B6966282128613D6C5B752B2220222B6F5D7C7C6C5B222A20222B",
    "6F5D2929666F72286920696E206C2969662828733D692E73706C69742822202229295B315D3D3D3D6F262628613D6C5B752B2220222B735B305D5D7C",
    "7C6C5B222A20222B735B305D5D29297B21303D3D3D613F613D6C5B695D3A2130213D3D6C5B695D2626286F3D735B305D2C632E756E73686966742873",
    "5B315D29293B627265616B7D6966282130213D3D6129696628612626655B227468726F7773225D29743D612874293B656C7365207472797B743D6128",
    "74297D63617463682865297B72657475726E7B73746174653A227061727365726572726F72222C6572726F723A613F653A224E6F20636F6E76657273",
    "696F6E2066726F6D20222B752B2220746F20222B6F7D7D7D72657475726E7B73746174653A2273756363657373222C646174613A747D7D28762C732C",
    "542C69292C693F28762E69664D6F64696669656426262828753D542E676574526573706F6E736548656164657228224C6173742D4D6F646966696564",
    "222929262628532E6C6173744D6F6469666965645B665D3D75292C28753D542E676574526573706F6E73654865616465722822657461672229292626",
    "28532E657461675B665D3D7529292C3230343D3D3D657C7C2248454144223D3D3D762E747970653F6C3D226E6F636F6E74656E74223A3330343D3D3D",
    "653F6C3D226E6F746D6F646966696564223A286C3D732E73746174652C6F3D732E646174612C693D2128613D732E6572726F722929293A28613D6C2C",
    "216526266C7C7C286C3D226572726F72222C653C30262628653D302929292C542E7374617475733D652C542E737461747573546578743D28747C7C6C",
    "292B22222C693F782E7265736F6C76655769746828792C5B6F2C6C2C545D293A782E72656A6563745769746828792C5B542C6C2C615D292C542E7374",
    "61747573436F64652877292C773D766F696420302C6726266D2E7472696767657228693F22616A617853756363657373223A22616A61784572726F72",
    "222C5B542C762C693F6F3A615D292C622E666972655769746828792C5B542C6C5D292C672626286D2E747269676765722822616A6178436F6D706C65",
    "7465222C5B542C765D292C2D2D532E6163746976657C7C532E6576656E742E747269676765722822616A617853746F70222929297D72657475726E20",
    "547D2C6765744A534F4E3A66756E6374696F6E28652C742C6E297B72657475726E20532E67657428652C742C6E2C226A736F6E22297D2C6765745363",
    "726970743A66756E6374696F6E28652C74297B72657475726E20532E67657428652C766F696420302C742C2273637269707422297D7D292C532E6561",
    "6368285B22676574222C22706F7374225D2C66756E6374696F6E28652C69297B535B695D3D66756E6374696F6E28652C742C6E2C72297B7265747572",
    "6E206D287429262628723D727C7C6E2C6E3D742C743D766F69642030292C532E616A617828532E657874656E64287B75726C3A652C747970653A692C",
    "64617461547970653A722C646174613A742C737563636573733A6E7D2C532E6973506C61696E4F626A65637428652926266529297D7D292C532E616A",
    "617850726566696C7465722866756E6374696F6E2865297B76617220743B666F72287420696E20652E686561646572732922636F6E74656E742D7479",
    "7065223D3D3D742E746F4C6F776572436173652829262628652E636F6E74656E74547970653D652E686561646572735B745D7C7C2222297D292C532E",
    "5F6576616C55726C3D66756E6374696F6E28652C742C6E297B72657475726E20532E616A6178287B75726C3A652C747970653A22474554222C646174",
    "61547970653A22736372697074222C63616368653A21302C6173796E633A21312C676C6F62616C3A21312C636F6E766572746572733A7B2274657874",
    "20736372697074223A66756E6374696F6E28297B7D7D2C6461746146696C7465723A66756E6374696F6E2865297B532E676C6F62616C4576616C2865",
    "2C742C6E297D7D297D2C532E666E2E657874656E64287B77726170416C6C3A66756E6374696F6E2865297B76617220743B72657475726E2074686973",
    "5B305D2626286D286529262628653D652E63616C6C28746869735B305D29292C743D5328652C746869735B305D2E6F776E6572446F63756D656E7429",
    "2E65712830292E636C6F6E65282130292C746869735B305D2E706172656E744E6F64652626742E696E736572744265666F726528746869735B305D29",
    "2C742E6D61702866756E6374696F6E28297B76617220653D746869733B7768696C6528652E6669727374456C656D656E744368696C6429653D652E66",
    "69727374456C656D656E744368696C643B72657475726E20657D292E617070656E64287468697329292C746869737D2C77726170496E6E65723A6675",
    "6E6374696F6E286E297B72657475726E206D286E293F746869732E656163682866756E6374696F6E2865297B532874686973292E77726170496E6E65",
    "72286E2E63616C6C28746869732C6529297D293A746869732E656163682866756E6374696F6E28297B76617220653D532874686973292C743D652E63",
    "6F6E74656E747328293B742E6C656E6774683F742E77726170416C6C286E293A652E617070656E64286E297D297D2C777261703A66756E6374696F6E",
    "2874297B766172206E3D6D2874293B72657475726E20746869732E656163682866756E6374696F6E2865297B532874686973292E77726170416C6C28",
    "6E3F742E63616C6C28746869732C65293A74297D297D2C756E777261703A66756E6374696F6E2865297B72657475726E20746869732E706172656E74",
    "2865292E6E6F742822626F647922292E656163682866756E6374696F6E28297B532874686973292E7265706C6163655769746828746869732E636869",
    "6C644E6F646573297D292C746869737D7D292C532E657870722E70736575646F732E68696464656E3D66756E6374696F6E2865297B72657475726E21",
    "532E657870722E70736575646F732E76697369626C652865297D2C532E657870722E70736575646F732E76697369626C653D66756E6374696F6E2865",
    "297B72657475726E212128652E6F666673657457696474687C7C652E6F66667365744865696768747C7C652E676574436C69656E7452656374732829",
    "2E6C656E677468297D2C532E616A617853657474696E67732E7868723D66756E6374696F6E28297B7472797B72657475726E206E657720432E584D4C",
    "48747470526571756573747D63617463682865297B7D7D3B7661722042743D7B303A3230302C313232333A3230347D2C24743D532E616A6178536574",
    "74696E67732E78687228293B792E636F72733D212124742626227769746843726564656E7469616C7322696E2024742C792E616A61783D24743D2121",
    "24742C532E616A61785472616E73706F72742866756E6374696F6E2869297B766172206F2C613B696628792E636F72737C7C2474262621692E63726F",
    "7373446F6D61696E2972657475726E7B73656E643A66756E6374696F6E28652C74297B766172206E2C723D692E78687228293B696628722E6F70656E",
    "28692E747970652C692E75726C2C692E6173796E632C692E757365726E616D652C692E70617373776F7264292C692E7868724669656C647329666F72",
    "286E20696E20692E7868724669656C647329725B6E5D3D692E7868724669656C64735B6E5D3B666F72286E20696E20692E6D696D6554797065262672",
    "2E6F766572726964654D696D65547970652626722E6F766572726964654D696D655479706528692E6D696D6554797065292C692E63726F7373446F6D",
    "61696E7C7C655B22582D5265717565737465642D57697468225D7C7C28655B22582D5265717565737465642D57697468225D3D22584D4C4874747052",
    "65717565737422292C6529722E73657452657175657374486561646572286E2C655B6E5D293B6F3D66756E6374696F6E2865297B72657475726E2066",
    "756E6374696F6E28297B6F2626286F3D613D722E6F6E6C6F61643D722E6F6E6572726F723D722E6F6E61626F72743D722E6F6E74696D656F75743D72",
    "2E6F6E726561647973746174656368616E67653D6E756C6C2C2261626F7274223D3D3D653F722E61626F727428293A226572726F72223D3D3D653F22",
    "6E756D62657222213D747970656F6620722E7374617475733F7428302C226572726F7222293A7428722E7374617475732C722E737461747573546578",
    "74293A742842745B722E7374617475735D7C7C722E7374617475732C722E737461747573546578742C227465787422213D3D28722E726573706F6E73",
    "65547970657C7C227465787422297C7C22737472696E6722213D747970656F6620722E726573706F6E7365546578743F7B62696E6172793A722E7265",
    "73706F6E73657D3A7B746578743A722E726573706F6E7365546578747D2C722E676574416C6C526573706F6E736548656164657273282929297D7D2C",
    "722E6F6E6C6F61643D6F28292C613D722E6F6E6572726F723D722E6F6E74696D656F75743D6F28226572726F7222292C766F69642030213D3D722E6F",
    "6E61626F72743F722E6F6E61626F72743D613A722E6F6E726561647973746174656368616E67653D66756E6374696F6E28297B343D3D3D722E726561",
    "647953746174652626432E73657454696D656F75742866756E6374696F6E28297B6F26266128297D297D2C6F3D6F282261626F727422293B7472797B",
    "722E73656E6428692E686173436F6E74656E742626692E646174617C7C6E756C6C297D63617463682865297B6966286F297468726F7720657D7D2C61",
    "626F72743A66756E6374696F6E28297B6F26266F28297D7D7D292C532E616A617850726566696C7465722866756E6374696F6E2865297B652E63726F",
    "7373446F6D61696E262628652E636F6E74656E74732E7363726970743D2131297D292C532E616A61785365747570287B616363657074733A7B736372",
    "6970743A22746578742F6A6176617363726970742C206170706C69636174696F6E2F6A6176617363726970742C206170706C69636174696F6E2F6563",
    "6D617363726970742C206170706C69636174696F6E2F782D65636D61736372697074227D2C636F6E74656E74733A7B7363726970743A2F5C62283F3A",
    "6A6176617C65636D61297363726970745C622F7D2C636F6E766572746572733A7B227465787420736372697074223A66756E6374696F6E2865297B72",
    "657475726E20532E676C6F62616C4576616C2865292C657D7D7D292C532E616A617850726566696C7465722822736372697074222C66756E6374696F",
    "6E2865297B766F696420303D3D3D652E6361636865262628652E63616368653D2131292C652E63726F7373446F6D61696E262628652E747970653D22",
    "47455422297D292C532E616A61785472616E73706F72742822736372697074222C66756E6374696F6E286E297B76617220722C693B6966286E2E6372",
    "6F7373446F6D61696E7C7C6E2E73637269707441747472732972657475726E7B73656E643A66756E6374696F6E28652C74297B723D5328223C736372",
    "6970743E22292E61747472286E2E73637269707441747472737C7C7B7D292E70726F70287B636861727365743A6E2E73637269707443686172736574",
    "2C7372633A6E2E75726C7D292E6F6E28226C6F6164206572726F72222C693D66756E6374696F6E2865297B722E72656D6F766528292C693D6E756C6C",
    "2C6526267428226572726F72223D3D3D652E747970653F3430343A3230302C652E74797065297D292C452E686561642E617070656E644368696C6428",
    "725B305D297D2C61626F72743A66756E6374696F6E28297B6926266928297D7D7D293B766172205F742C7A743D5B5D2C55743D2F283D295C3F283F3D",
    "267C24297C5C3F5C3F2F3B532E616A61785365747570287B6A736F6E703A2263616C6C6261636B222C6A736F6E7043616C6C6261636B3A66756E6374",
    "696F6E28297B76617220653D7A742E706F7028297C7C532E657870616E646F2B225F222B77742E677569642B2B3B72657475726E20746869735B655D",
    "3D21302C657D7D292C532E616A617850726566696C74657228226A736F6E206A736F6E70222C66756E6374696F6E28652C742C6E297B76617220722C",
    "692C6F2C613D2131213D3D652E6A736F6E7026262855742E7465737428652E75726C293F2275726C223A22737472696E67223D3D747970656F662065",
    "2E646174612626303D3D3D28652E636F6E74656E74547970657C7C2222292E696E6465784F6628226170706C69636174696F6E2F782D7777772D666F",
    "726D2D75726C656E636F6465642229262655742E7465737428652E64617461292626226461746122293B696628617C7C226A736F6E70223D3D3D652E",
    "6461746154797065735B305D2972657475726E20723D652E6A736F6E7043616C6C6261636B3D6D28652E6A736F6E7043616C6C6261636B293F652E6A",
    "736F6E7043616C6C6261636B28293A652E6A736F6E7043616C6C6261636B2C613F655B615D3D655B615D2E7265706C6163652855742C222431222B72",
    "293A2131213D3D652E6A736F6E70262628652E75726C2B3D2854742E7465737428652E75726C293F2226223A223F22292B652E6A736F6E702B223D22",
    "2B72292C652E636F6E766572746572735B22736372697074206A736F6E225D3D66756E6374696F6E28297B72657475726E206F7C7C532E6572726F72",
    "28722B2220776173206E6F742063616C6C656422292C6F5B305D7D2C652E6461746154797065735B305D3D226A736F6E222C693D435B725D2C435B72",
    "5D3D66756E6374696F6E28297B6F3D617267756D656E74737D2C6E2E616C776179732866756E6374696F6E28297B766F696420303D3D3D693F532843",
    "292E72656D6F766550726F702872293A435B725D3D692C655B725D262628652E6A736F6E7043616C6C6261636B3D742E6A736F6E7043616C6C626163",
    "6B2C7A742E70757368287229292C6F26266D286929262669286F5B305D292C6F3D693D766F696420307D292C22736372697074227D292C792E637265",
    "61746548544D4C446F63756D656E743D28285F743D452E696D706C656D656E746174696F6E2E63726561746548544D4C446F63756D656E7428222229",
    "2E626F6479292E696E6E657248544D4C3D223C666F726D3E3C2F666F726D3E3C666F726D3E3C2F666F726D3E222C323D3D3D5F742E6368696C644E6F",
    "6465732E6C656E677468292C532E706172736548544D4C3D66756E6374696F6E28652C742C6E297B72657475726E22737472696E6722213D74797065",
    "6F6620653F5B5D3A2822626F6F6C65616E223D3D747970656F6620742626286E3D742C743D2131292C747C7C28792E63726561746548544D4C446F63",
    "756D656E743F2828723D28743D452E696D706C656D656E746174696F6E2E63726561746548544D4C446F63756D656E7428222229292E637265617465",
    "456C656D656E742822626173652229292E687265663D452E6C6F636174696F6E2E687265662C742E686561642E617070656E644368696C6428722929",
    "3A743D45292C6F3D216E26265B5D2C28693D4E2E65786563286529293F5B742E637265617465456C656D656E7428695B315D295D3A28693D7865285B",
    "655D2C742C6F292C6F26266F2E6C656E677468262653286F292E72656D6F766528292C532E6D65726765285B5D2C692E6368696C644E6F6465732929",
    "293B76617220722C692C6F7D2C532E666E2E6C6F61643D66756E6374696F6E28652C742C6E297B76617220722C692C6F2C613D746869732C733D652E",
    "696E6465784F6628222022293B72657475726E2D313C73262628723D687428652E736C696365287329292C653D652E736C69636528302C7329292C6D",
    "2874293F286E3D742C743D766F69642030293A742626226F626A656374223D3D747970656F662074262628693D22504F535422292C303C612E6C656E",
    "6774682626532E616A6178287B75726C3A652C747970653A697C7C22474554222C64617461547970653A2268746D6C222C646174613A747D292E646F",
    "6E652866756E6374696F6E2865297B6F3D617267756D656E74732C612E68746D6C28723F5328223C6469763E22292E617070656E6428532E70617273",
    "6548544D4C286529292E66696E642872293A65297D292E616C77617973286E262666756E6374696F6E28652C74297B612E656163682866756E637469",
    "6F6E28297B6E2E6170706C7928746869732C6F7C7C5B652E726573706F6E7365546578742C742C655D297D297D292C746869737D2C532E657870722E",
    "70736575646F732E616E696D617465643D66756E6374696F6E2874297B72657475726E20532E6772657028532E74696D6572732C66756E6374696F6E",
    "2865297B72657475726E20743D3D3D652E656C656D7D292E6C656E6774687D2C532E6F66667365743D7B7365744F66667365743A66756E6374696F6E",
    "28652C742C6E297B76617220722C692C6F2C612C732C752C6C3D532E63737328652C22706F736974696F6E22292C633D532865292C663D7B7D3B2273",
    "7461746963223D3D3D6C262628652E7374796C652E706F736974696F6E3D2272656C617469766522292C733D632E6F666673657428292C6F3D532E63",
    "737328652C22746F7022292C753D532E63737328652C226C65667422292C28226162736F6C757465223D3D3D6C7C7C226669786564223D3D3D6C2926",
    "262D313C286F2B75292E696E6465784F6628226175746F22293F28613D28723D632E706F736974696F6E2829292E746F702C693D722E6C656674293A",
    "28613D7061727365466C6F6174286F297C7C302C693D7061727365466C6F61742875297C7C30292C6D287429262628743D742E63616C6C28652C6E2C",
    "532E657874656E64287B7D2C732929292C6E756C6C213D742E746F70262628662E746F703D742E746F702D732E746F702B61292C6E756C6C213D742E",
    "6C656674262628662E6C6566743D742E6C6566742D732E6C6566742B69292C227573696E6722696E20743F742E7573696E672E63616C6C28652C6629",
    "3A632E6373732866297D7D2C532E666E2E657874656E64287B6F66667365743A66756E6374696F6E2874297B696628617267756D656E74732E6C656E",
    "6774682972657475726E20766F696420303D3D3D743F746869733A746869732E656163682866756E6374696F6E2865297B532E6F66667365742E7365",
    "744F666673657428746869732C742C65297D293B76617220652C6E2C723D746869735B305D3B72657475726E20723F722E676574436C69656E745265",
    "63747328292E6C656E6774683F28653D722E676574426F756E64696E67436C69656E745265637428292C6E3D722E6F776E6572446F63756D656E742E",
    "64656661756C74566965772C7B746F703A652E746F702B6E2E70616765594F66667365742C6C6566743A652E6C6566742B6E2E70616765584F666673",
    "65747D293A7B746F703A302C6C6566743A307D3A766F696420307D2C706F736974696F6E3A66756E6374696F6E28297B696628746869735B305D297B",
    "76617220652C742C6E2C723D746869735B305D2C693D7B746F703A302C6C6566743A307D3B696628226669786564223D3D3D532E63737328722C2270",
    "6F736974696F6E222929743D722E676574426F756E64696E67436C69656E745265637428293B656C73657B743D746869732E6F666673657428292C6E",
    "3D722E6F776E6572446F63756D656E742C653D722E6F6666736574506172656E747C7C6E2E646F63756D656E74456C656D656E743B7768696C652865",
    "262628653D3D3D6E2E626F64797C7C653D3D3D6E2E646F63756D656E74456C656D656E7429262622737461746963223D3D3D532E63737328652C2270",
    "6F736974696F6E222929653D652E706172656E744E6F64653B65262665213D3D722626313D3D3D652E6E6F64655479706526262828693D532865292E",
    "6F66667365742829292E746F702B3D532E63737328652C22626F72646572546F705769647468222C2130292C692E6C6566742B3D532E63737328652C",
    "22626F726465724C6566745769647468222C213029297D72657475726E7B746F703A742E746F702D692E746F702D532E63737328722C226D61726769",
    "6E546F70222C2130292C6C6566743A742E6C6566742D692E6C6566742D532E63737328722C226D617267696E4C656674222C2130297D7D7D2C6F6666",
    "736574506172656E743A66756E6374696F6E28297B72657475726E20746869732E6D61702866756E6374696F6E28297B76617220653D746869732E6F",
    "6666736574506172656E743B7768696C652865262622737461746963223D3D3D532E63737328652C22706F736974696F6E222929653D652E6F666673",
    "6574506172656E743B72657475726E20657C7C72657D297D7D292C532E65616368287B7363726F6C6C4C6566743A2270616765584F6666736574222C",
    "7363726F6C6C546F703A2270616765594F6666736574227D2C66756E6374696F6E28742C69297B766172206F3D2270616765594F6666736574223D3D",
    "3D693B532E666E5B745D3D66756E6374696F6E2865297B72657475726E202428746869732C66756E6374696F6E28652C742C6E297B76617220723B69",
    "6628782865293F723D653A393D3D3D652E6E6F646554797065262628723D652E64656661756C7456696577292C766F696420303D3D3D6E2972657475",
    "726E20723F725B695D3A655B745D3B723F722E7363726F6C6C546F286F3F722E70616765584F66667365743A6E2C6F3F6E3A722E70616765594F6666",
    "736574293A655B745D3D6E7D2C742C652C617267756D656E74732E6C656E677468297D7D292C532E65616368285B22746F70222C226C656674225D2C",
    "66756E6374696F6E28652C6E297B532E637373486F6F6B735B6E5D3D466528792E706978656C506F736974696F6E2C66756E6374696F6E28652C7429",
    "7B696628742972657475726E20743D576528652C6E292C50652E746573742874293F532865292E706F736974696F6E28295B6E5D2B227078223A747D",
    "297D292C532E65616368287B4865696768743A22686569676874222C57696474683A227769647468227D2C66756E6374696F6E28612C73297B532E65",
    "616368287B70616464696E673A22696E6E6572222B612C636F6E74656E743A732C22223A226F75746572222B617D2C66756E6374696F6E28722C6F29",
    "7B532E666E5B6F5D3D66756E6374696F6E28652C74297B766172206E3D617267756D656E74732E6C656E677468262628727C7C22626F6F6C65616E22",
    "213D747970656F662065292C693D727C7C2821303D3D3D657C7C21303D3D3D743F226D617267696E223A22626F7264657222293B72657475726E2024",
    "28746869732C66756E6374696F6E28652C742C6E297B76617220723B72657475726E20782865293F303D3D3D6F2E696E6465784F6628226F75746572",
    "22293F655B22696E6E6572222B615D3A652E646F63756D656E742E646F63756D656E74456C656D656E745B22636C69656E74222B615D3A393D3D3D65",
    "2E6E6F6465547970653F28723D652E646F63756D656E74456C656D656E742C4D6174682E6D617828652E626F64795B227363726F6C6C222B615D2C72",
    "5B227363726F6C6C222B615D2C652E626F64795B226F6666736574222B615D2C725B226F6666736574222B615D2C725B22636C69656E74222B615D29",
    "293A766F696420303D3D3D6E3F532E63737328652C742C69293A532E7374796C6528652C742C6E2C69297D2C732C6E3F653A766F696420302C6E297D",
    "7D297D292C532E65616368285B22616A61785374617274222C22616A617853746F70222C22616A6178436F6D706C657465222C22616A61784572726F",
    "72222C22616A617853756363657373222C22616A617853656E64225D2C66756E6374696F6E28652C74297B532E666E5B745D3D66756E6374696F6E28",
    "65297B72657475726E20746869732E6F6E28742C65297D7D292C532E666E2E657874656E64287B62696E643A66756E6374696F6E28652C742C6E297B",
    "72657475726E20746869732E6F6E28652C6E756C6C2C742C6E297D2C756E62696E643A66756E6374696F6E28652C74297B72657475726E2074686973",
    "2E6F666628652C6E756C6C2C74297D2C64656C65676174653A66756E6374696F6E28652C742C6E2C72297B72657475726E20746869732E6F6E28742C",
    "652C6E2C72297D2C756E64656C65676174653A66756E6374696F6E28652C742C6E297B72657475726E20313D3D3D617267756D656E74732E6C656E67",
    "74683F746869732E6F666628652C222A2A22293A746869732E6F666628742C657C7C222A2A222C6E297D2C686F7665723A66756E6374696F6E28652C",
    "74297B72657475726E20746869732E6D6F757365656E7465722865292E6D6F7573656C6561766528747C7C65297D7D292C532E656163682822626C75",
    "7220666F63757320666F637573696E20666F6375736F757420726573697A65207363726F6C6C20636C69636B2064626C636C69636B206D6F75736564",
    "6F776E206D6F7573657570206D6F7573656D6F7665206D6F7573656F766572206D6F7573656F7574206D6F757365656E746572206D6F7573656C6561",
    "7665206368616E67652073656C656374207375626D6974206B6579646F776E206B65797072657373206B6579757020636F6E746578746D656E75222E",
    "73706C697428222022292C66756E6374696F6E28652C6E297B532E666E5B6E5D3D66756E6374696F6E28652C74297B72657475726E20303C61726775",
    "6D656E74732E6C656E6774683F746869732E6F6E286E2C6E756C6C2C652C74293A746869732E74726967676572286E297D7D293B7661722058743D2F",
    "5E5B5C735C75464546465C7841305D2B7C5B5C735C75464546465C7841305D2B242F673B532E70726F78793D66756E6374696F6E28652C74297B7661",
    "72206E2C722C693B69662822737472696E67223D3D747970656F6620742626286E3D655B745D2C743D652C653D6E292C6D2865292972657475726E20",
    "723D732E63616C6C28617267756D656E74732C32292C28693D66756E6374696F6E28297B72657475726E20652E6170706C7928747C7C746869732C72",
    "2E636F6E63617428732E63616C6C28617267756D656E74732929297D292E677569643D652E677569643D652E677569647C7C532E677569642B2B2C69",
    "7D2C532E686F6C6452656164793D66756E6374696F6E2865297B653F532E7265616479576169742B2B3A532E7265616479282130297D2C532E697341",
    "727261793D41727261792E697341727261792C532E70617273654A534F4E3D4A534F4E2E70617273652C532E6E6F64654E616D653D412C532E697346",
    "756E6374696F6E3D6D2C532E697357696E646F773D782C532E63616D656C436173653D582C532E747970653D772C532E6E6F773D446174652E6E6F77",
    "2C532E69734E756D657269633D66756E6374696F6E2865297B76617220743D532E747970652865293B72657475726E28226E756D626572223D3D3D74",
    "7C7C22737472696E67223D3D3D742926262169734E614E28652D7061727365466C6F6174286529297D2C532E7472696D3D66756E6374696F6E286529",
    "7B72657475726E206E756C6C3D3D653F22223A28652B2222292E7265706C6163652858742C2222297D2C2266756E6374696F6E223D3D747970656F66",
    "20646566696E652626646566696E652E616D642626646566696E6528226A7175657279222C5B5D2C66756E6374696F6E28297B72657475726E20537D",
    "293B7661722056743D432E6A51756572792C47743D432E243B72657475726E20532E6E6F436F6E666C6963743D66756E6374696F6E2865297B726574",
    "75726E20432E243D3D3D53262628432E243D4774292C652626432E6A51756572793D3D3D53262628432E6A51756572793D5674292C537D2C22756E64",
    "6566696E6564223D3D747970656F662065262628432E6A51756572793D432E243D53292C537D293B0A0A",
    0
};



const char *VGX_BUILTIN_JS_uptime_js[] = {
    "/******************************************************************************",
    " *",
    " * VGX Server",
    " * Distributed engine for plugin-based graph and vector search",
    " *",
    " * Module:  vgx",
    " * File:    uptime.js",
    " * Author:  Stian Lysne <...>",
    " *",
    " * Copyright Â© 2025 Rakuten, Inc.",
    " *",
    " * Licensed under the Apache License, Version 2.0 (the \"License\");",
    " * you may not use this file except in compliance with the License.",
    " * You may obtain a copy of the License at",
    " *",
    " *     http://www.apache.org/licenses/LICENSE-2.0",
    " *",
    " * Unless required by applicable law or agreed to in writing, software",
    " * distributed under the License is distributed on an \"AS IS\" BASIS,",
    " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
    " * See the License for the specific language governing permissions and",
    " * limitations under the License.",
    " *",
    " *****************************************************************************/",
    "",
    "class UptimeRefresher {",
    "",
    "    constructor(destElemId, onResyncCallback, onErrorCallback) {",
    "        this.destElemId = destElemId;",
    "        this.onResyncCallback = onResyncCallback;",
    "        this.onErrorCallback = onErrorCallback;",
    "        this.uptimeCounter = 0;",
    "        this.localEpochAtServerT0 = 0;",
    "        this.serverUptimeSeconds = 0;",
    "        this.serverUpDays = 0;",
    "        this.serverUpHours = 0;",
    "        this.serverUpMinutes = 0;",
    "        this.serverUpSeconds = 0;",
    "        this.uptimeRefresher = null;",
    "        this.uptimeResyncer = null;",
    "    }",
    "",
    "    start() {",
    "        UptimeRefresher.resyncServerUptime( this );",
    "    }",
    "",
    "    static setUptimeAsync(obj, resyncInterval, localRefreshInterval) {",
    "        if (obj.uptimeRefresher != null) {",
    "            clearInterval(obj.uptimeRefresher);",
    "            obj.uptimeRefresher = null;",
    "        }",
    "        if (obj.uptimeResyncer != null) {",
    "            clearTimeout(obj.uptimeResyncer);",
    "            obj.uptimeResyncer = null;",
    "        }",
    "        if (localRefreshInterval != null) {",
    "            obj.uptimeRefresher = setInterval(UptimeRefresher.refreshUptime, localRefreshInterval, obj);",
    "        }",
    "        obj.uptimeResyncer = setTimeout(UptimeRefresher.resyncServerUptime, resyncInterval, obj);",
    "    }",
    "",
    "    getUptimeString() {",
    "        return this.serverUpDays.toString().padStart(3, \"0\") +",
    "         \":\" + this.serverUpHours.toString().padStart(2, \"0\") +",
    "         \":\" + this.serverUpMinutes.toString().padStart(2, \"0\") +",
    "         \":\" + this.serverUpSeconds.toString().padStart(2, \"0\");",
    "    }",
    "",
    "    static refreshUptime( obj ) {",
    "        const t1 = Date.now() / 1000;",
    "        const uptime = Math.round(t1 - obj.localEpochAtServerT0);",
    "        if (uptime > obj.uptimeCounter) {",
    "            obj.uptimeCounter += 1;",
    "            obj.serverUpSeconds += 1;",
    "            if (obj.serverUpSeconds >= 60) {",
    "                obj.serverUpSeconds = 0;",
    "                obj.serverUpMinutes += 1;",
    "                if (obj.serverUpMinutes >= 60) {",
    "                    obj.serverUpMinutes = 0;",
    "                    obj.serverUpHours += 1;",
    "                    if (obj.serverUpHours >= 24) {",
    "                        obj.serverUpHours = 0;",
    "                        obj.serverUpDays += 1;",
    "                    }",
    "                }",
    "            }",
    "            let s = obj.getUptimeString();",
    "            let e = document.getElementById( obj.destElemId );",
    "            if (e.tagName.toLowerCase() == \"input\") {",
    "                e.value = s;",
    "            }",
    "            else {",
    "                e.innerHTML = s;",
    "            }",
    "        }",
    "    }",
    "",
    "    static resyncServerUptime( obj ) {",
    "        $.get(\"/vgx/time\", function (data, textStatus, jqXHR) {",
    "            try {",
    "                const response = data[\"response\"];",
    "                const serverUptime = response[\"time\"][\"up\"];",
    "                let localEpochSeconds = Date.now() / 1000;",
    "                // parse d:hh:mm:ss into serverUpX variables",
    "                obj.uptimeCounter = obj.serverUptimeSeconds = obj.parseUptime(serverUptime);",
    "                obj.localEpochAtServerT0 = localEpochSeconds - obj.serverUptimeSeconds;",
    "                obj.onResyncCallback();",
    "            }",
    "            catch (error) {",
    "                if (obj.onErrorCallback != null) {",
    "                    obj.onErrorCallback( error );",
    "                }",
    "            }",
    "            finally {",
    "                UptimeRefresher.setUptimeAsync(obj, 10000, 50);",
    "            }",
    "        }).fail(function (xhr, txt, err) {",
    "            UptimeRefresher.setUptimeAsync(obj, 2000, null);",
    "            if (obj.onErrorCallback != null) {",
    "                obj.onErrorCallback( txt );",
    "            }",
    "            let s = \"---:--:--:--\";",
    "            let e = document.getElementById( obj.destElemId );",
    "            if (e.tagName.toLowerCase() == \"input\") {",
    "                e.value = s;",
    "            }",
    "            else {",
    "                e.innerHTML = s;",
    "            }",
    "        });",
    "",
    "    }",
    "",
    "    parseUptime(uptimeStr) {",
    "        let uptime = 0;",
    "        try {",
    "            const rex = /(\\d+):(\\d+):(\\d+):(\\d+)/;",
    "            const match = rex.exec(uptimeStr);",
    "            if (match) {",
    "                this.serverUpDays = parseInt(match[1]);",
    "                this.serverUpHours = parseInt(match[2]);",
    "                this.serverUpMinutes = parseInt(match[3]);",
    "                this.serverUpSeconds = parseInt(match[4]);",
    "                uptime = this.serverUpDays * 86400 + this.serverUpHours * 3600 + this.serverUpMinutes * 60 + this.serverUpSeconds;",
    "            }",
    "        }",
    "        catch(error) {",
    "            uptime = -1;",
    "        }",
    "        return uptime;",
    "    }",
    "}",
    "",
    0
};



const char *VGX_BUILTIN_IMAGE_favicon_ico[] = {
    "000001000300101000000100200068040000360000002020000001002000281100009E040000303000000100200068260000C6150000280000001000",
    "000020000000010020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000001212127E1A1A1A88181818941E1E1E4C1616169E1A1A1A881616169C00000001000000000000000000000000000000000000",
    "00000000000000000000000000000C0C0C91000000001B1B1B37070707F316161672000000001010108E7F7F7F020000000000000000000000000000",
    "000000000000000000000000000054545409090909C0151515801313139C1E1E1E76121212B815151580121212BF7F7F7F0200000000000000000000",
    "000000000000484848073F3F3F283E3E3E290B0B0BB61919198E0D0D0DAB2A2A2A5B666666054848482A0E0E0ED64646462400000000000000000000",
    "000000000000000000000B0B0B6C0C0C0C770A0A0A610C0C0CA70A0A0AA30A0A0A610D0D0D831A1A1A7C0D0D0DA70A0A0A610F0F0FB77F7F7F020000",
    "00000000000000000000000000000606066F1E1E1E22000000000F0F0F910C0C0C91000000001B1B1B371818188616161672000000001010108E7F7F",
    "7F02000000000000000000000000000000001515153C1717178C1A1A1A8814141466141414711A1A1A881717178E1F1F1F4014141492121212D11717",
    "178D0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000003333330A0404047C0505",
    "05E6080808740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003535352B0000",
    "00FF000000FF060606FF7F7F7F0200000000000000000000000000000000000000000000000000000000000000000000000000000000000000003131",
    "3129000000FF000000FF060606FE7F7F7F02000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "00007F7F7F020808083E000000400D0D0D37000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000280000002000000040000000010020000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003737",
    "37201F1F1F80272727882727278827272788222222842F2F2F305555550625252575272727882727278827272788272727882C2C2C56000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000909098C0B0B0BCE0E0E0E890E0E0E890E0E0E890D0D0DBC0F0F0FB22C2C2C4A0A0A0AF20E0E0E890E0E0E890E0E0E891212129A0B0B",
    "0BFA7F7F7F04000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000000000008E191919940000000000000000000000001E1E1E6E040404F1090909DF171717E400000000000000000000",
    "00003B3B3B1E0C0C0CFF9999990500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000008E191919940000000000000000000000001E1E1E6E050505FF0C0C0CFF171717E40000",
    "000000000000000000003B3B3B1E0C0C0CFF999999050000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000008E1B1B1B96BFBFBF04BFBFBF04BFBFBF04222222700C0C0CB73D3D",
    "3D5B171717E4BFBFBF04BFBFBF04BFBFBF044B4B4B220C0C0CFF99999905000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000050505023060606DE080808FE141414FD121212FD131313FD0D0D",
    "0DFE1C1C1C973131312E0A0A0AFB141414FD121212FD131313FD121212FD131313DFFFFFFF0200000000000000000000000000000000000000000000",
    "00000000000000000000000000000000000000000000000000000000000000000000000000004D4D4D210A0A0ADD020202FF272727733636363D0000",
    "00FF222222765A5A5A11FFFFFF02000000007373730B4B4B4B110A0A0AE1121212C04B4B4B119F9F9F08000000000000000000000000000000000000",
    "00000000000000000000000000000000000000000000000000004242421B4242425042424250424242503F3F3F550D0D0DDE010101FE2C2C2C7E3737",
    "374936363671000000FF2424249A3C3C3C4C4B4B4B11000000004545453E42424250090909E9131313D0424242504343432600000000000000000000",
    "00000000000000000000000000000000000000000000000000000000000000000000121212D30A0A0AD50A0A0AC20A0A0AC20A0A0AC2060606EF1010",
    "108D11111183060606E60A0A0AC20A0A0AC20A0A0AC2080808DC131313A92D2D2D3D060606F80A0A0AC20A0A0AC20A0A0AC20C0C0CCC0E0E0EF3AAAA",
    "AA0300000000000000000000000000000000000000000000000000000000000000000000000000000000080808DE1D1D1D4500000000000000000000",
    "0000181818BD000000650000008E191919940000000000000000000000001E1E1E6E0B0B0BB537373757171717E40000000000000000000000003B3B",
    "3B1E0C0C0CFF9999990500000000000000000000000000000000000000000000000000000000000000000000000000000000080808DE1D1D1D450000",
    "00000000000000000000181818BD000000650000008E191919940000000000000000000000001E1E1E6E0B0B0BB537373757171717E4000000000000",
    "0000000000003B3B3B1E0C0C0CFF99999905000000000000000000000000000000000000000000000000000000000000000000000000000000000808",
    "08DE1D1D1D45000000000000000000000000181818BD000000650000008E191919940000000000000000000000001E1E1E6E0B0B0BB5373737571717",
    "17E40000000000000000000000003B3B3B1E0C0C0CFF9999990500000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000D0D0DD1121212D71A1A1AC81A1A1AC81A1A1AC80A0A0AF11515155E141414880D0D0DE81A1A1AC81A1A1AC81A1A1AC80F0F0FE01313",
    "13AB2F2F2F40070707F91A1A1AC81A1A1AC81A1A1AC8171717CF0D0D0DF3AAAAAA030000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000474747201F1F1F481C1C1C481C1C1C481C1C1C4829292943AAAAAA065555550C262626481C1C1C481C1C1C481C1C",
    "1C48232323485C5C5C16FFFFFF013131313E1C1C1C48080808E80E0E0ECE1C1C1C484141412B00000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000001000000010A0A0ADF111111BC00000001000000010000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000000000000000000000000000003030302A080808F3000000FA000000FE000000FE000000FA131313D57F7F7F020000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000037373757000000FF000000FF000000FF000000FF000000FF0C0C",
    "0CFF99999905000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000000000000000000000000000000000000000000000000000000000000037373757000000FF000000FF000000FF0000",
    "00FF000000FF0C0C0CFF9999990500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037373757000000FF0000",
    "00FF000000FF000000FF000000FF0C0C0CFF999999050000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002B2B",
    "2B4C000000FF000000FF000000FF000000FF000000FF0C0C0CFC99999905000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000006666660A10101079000000800000008000000080000000801E1E1E5D0000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000280000003000",
    "000060000000010020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000003F3F3F042E2E2E21454545374747473947474739474747394747",
    "4739474747393A3A3A3428282819FFFFFF01555555032929292548484838474747394747473947474739474747394747473938383832424242170000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003030302A101010D9111111FD1414",
    "14FF141414FF141414FF141414FF141414FF0D0D0DFA141414BE5454541B2929293E0F0F0FE8121212FF141414FF141414FF141414FF141414FF1414",
    "14FF0E0E0EF8232323B9FFFFFF0200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000707",
    "0743030303FF282828771E1E1E3B1E1E1E3B1E1E1E3B1E1E1E3B1E1E1E3B141414C8030303E62C2C2C3432323288050505F8232323881E1E1E3B1E1E",
    "1E3B1E1E1E3B1E1E1E3B212121440D0D0DB9141414FC9F9F9F0800000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000044030303FF4444444E00000000000000000000000000000000000000001E1E1EB7020202F7101010BF121212DD0707",
    "07F635353564000000000000000000000000000000003333330A0B0B0B9E141414FF8D8D8D0900000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000044030303FF4444444E00000000000000000000000000000000000000001E1E1EB70000",
    "00FF000000FF000000FF070707F635353564000000000000000000000000000000003333330A0B0B0B9E141414FF8D8D8D0900000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000044030303FF4444444E0000000000000000000000000000",
    "0000000000001E1E1EB7030303FF171717FE101010FF070707F635353564000000000000000000000000000000003333330A0B0B0B9E141414FF8D8D",
    "8D0900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044030303FF4747474F7F7F",
    "7F027F7F7F027F7F7F027F7F7F027F7F7F02202020B7040404E73A3A3A3D3B3B3B96070707F6373737657F7F7F027F7F7F027F7F7F027F7F7F023F3F",
    "3F0C0B0B0B9F141414FF8D8D8D0900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001717",
    "176B010101FF252525A82929298229292982292929822929298229292982121212DB040404E6343434352F2F2F81040404FB222222B3292929822929",
    "29822929298229292982292929870D0D0DCF151515FC9F9F9F0800000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "00000000000051515161050505EB000000FF050505FF0A0A0AFE080808FE060606FE070707FE0A0A0AFE070707FF1C1C1CC363636312444444341212",
    "12F4080808FF0A0A0AFE070707FE060606FE080808FE0A0A0AFE090909FE262626ABFFFFFF0100000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000003F3F3F0431313153080808EC000000FF070707F12F2F2F6C4141412B0F0F0FB8000000FF202020BC5151511C6464641CDADA",
    "DA0700000000000000008989890D5B5B5B1C5151511C131313D0000000FF2929299B5151511C7171711BBFBFBF040000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000000000000000000000393939540D0D0DDF000000FF060606F127272773545454092F2F2F100D0D0DAF000000FF1F1F",
    "1FB40000000000000000000000000000000000000000000000000000000000000000121212CA000000FF2727278E0000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000BFBFBF043A3A3A4644444486424242864242428642424286424242863B3B3B910A0A0AED000000FF030303FC4141417C3A3A3A4F3E3E3E823F3F",
    "3F8D121212D9000000FF1B1B1BDC424242863737377B4F4F4F300000000000000000484848554343438542424286111111E6000000FF242424C94242",
    "42863E3E3E77606060250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000003939394C070707EE030303F5030303EB030303EB030303EB030303EB030303EB030303F6030303FB2A2A2A712828",
    "2833090909F5030303F1030303EB030303EB030303EB030303EB030303EB020202F90A0A0ADE5757572339393955020202FE030303F3030303EB0303",
    "03EB030303EB030303EB030303EC020202F81C1C1CDDFFFFFF0200000000000000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000000000000000000000000000001818185E030303F41A1A1A9C1E1E1E431E1E1E431E1E1E431E1E1E431E1E1E432424",
    "24AE010101E60000002207070744030303FF2929297C1E1E1E431E1E1E431E1E1E431E1E1E431E1E1E43151515CA030303E6262626352D2D2D870505",
    "05F82424248D1E1E1E431E1E1E431E1E1E431E1E1E432222224B0C0C0CBA141414FF8D8D8D0900000000000000000000000000000000000000000000",
    "00000000000000000000000000000000000000000000000000000000000000000000000000001212125E030303F41C1C1C7300000000000000000000",
    "0000000000000000000036363691000000E50000002200000044030303FF4444444E00000000000000000000000000000000000000001E1E1EB70303",
    "03E62626263537373792070707F635353564000000000000000000000000000000003333330A0B0B0B9E141414FF8D8D8D0900000000000000000000",
    "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001212125E030303F41C1C",
    "1C73000000000000000000000000000000000000000036363691000000E50000002200000044030303FF4444444E0000000000000000000000000000",
    "0000000000001E1E1EB7030303E62626263537373792070707F635353564000000000000000000000000000000003333330A0B0B0B9E141414FF8D8D",
    "8D0900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "00001212125E030303F41C1C1C73000000000000000000000000000000000000000036363691000000E50000002200000044030303FF4444444E0000",
    "0000000000000000000000000000000000001E1E1EB7030303E62626263537373792070707F635353564000000000000000000000000000000003333",
    "330A0B0B0B9E141414FF8D8D8D0900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000001212125E030303F41C1C1C73000000000000000000000000000000000000000036363691000000E5000000220000",
    "0044030303FF4444444E00000000000000000000000000000000000000001E1E1EB7030303E62626263537373792070707F635353564000000000000",
    "000000000000000000003333330A0B0B0B9E141414FF8D8D8D0900000000000000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000000000000000000000000000001F1F1F5A040404F21B1B1BCD363636A4363636A4363636A4363636A4363636A41F1F",
    "1FD8030303E20707072117171741050505FE2A2A2AC1363636A4363636A4363636A4363636A4363636A4121212E5040404E5333333322B2B2B7B0404",
    "04FC262626C8363636A4363636A4363636A4363636A4333333A8111111DC151515F89F9F9F0800000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000031313124181818A80B0B0BC70A0A0AC70A0A0AC70A0A",
    "0AC70A0A0AC70A0A0AC70C0C0CC6212121913C3C3C114141411F1A1A1AAC0B0B0BC70A0A0AC70A0A0AC70A0A0AC70A0A0AC70A0A0AC70E0E0EC71D1D",
    "1D94696969114141412B141414B80B0B0BC70A0A0AC7050505F3000000FF0B0B0BE70A0A0AC70F0F0FC626262685FFFFFF0100000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014B4B4B111F1F",
    "1F181F1F1F181F1F1F181F1F1F181F1F1F181F1F1F181F1F1F184E4E4E0D00000001000000013F3F3F101F1F1F181F1F1F181F1F1F181F1F1F181F1F",
    "1F181F1F1F182A2A2A185555550C0000000000000001434343131F1F1F181F1F1F18111111CF000000FF242424991F1F1F182A2A2A185F5F5F080000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000001121212CA000000FF2727278E0000",
    "000100000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000006F6F6F101D1D1D710000007C0000007C0808",
    "08E3000000FF0F0F0FC50000007C0808087B303030440000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002222225F0404",
    "04FA000000FD000000FD000000FF000000FF000000FE000000FD010101FD171717E27F7F7F0600000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "00000000000037373792000000FF000000FF000000FF000000FF000000FF000000FF000000FF000000FF141414FF8D8D8D0900000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000000000000037373792000000FF000000FF000000FF000000FF000000FF000000FF000000FF000000FF141414FF8D8D",
    "8D0900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000000000000000000000000000000000000037373792000000FF000000FF000000FF000000FF000000FF000000FF0000",
    "00FF000000FF141414FF8D8D8D0900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000000000000000000000000000000000000000000000000000000000000037373792000000FF000000FF000000FF0000",
    "00FF000000FF000000FF000000FF000000FF141414FF8D8D8D0900000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000373737920000",
    "00FF000000FF000000FF000000FF000000FF000000FF000000FF000000FF141414FF8D8D8D0900000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "00000000000023232372000000FF000000FF000000FF000000FF000000FF000000FF000000FF000000FF141414F79191910700000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000006969691D1C1C1CBF010101D0000000D0000000D0000000D0000000D0000000D0070707CF2D2D2D750000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000007F7F7F0200000004000000040000000400000004000000040000",
    "000400000004000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    0
};



const char *VGX_BUILTIN_IMAGE_loader_gif[] = {
    "47494638396196009600D53D00040204BCBEBCC4C2C4FCFEFCFCFAFCE4E2E4F4F2F4C4C6C4DCDADC8C8E8CD4D2D4F4F6F4DCDEDCD4D6D4CCCACC1416",
    "14ECEAEC7C7E7CECEEECE4E6E4040604B4B6B4545654CCCECC1412147C7A7C0C0E0C5C5A5C1C1A1C0C0A0C3C3A3C9C9A9C1C1E1C9496946C6A6CACAE",
    "AC6462644C4E4C242624B4B2B47472743C3E3C5C5E5C6C6E6C3436348482848486846466642C2A2C4C4A4C7476742C2E2C444244242224A4A2A49C9E",
    "9C3432348C8A8C444644ACAAAC545254FFFFFF00000000000021FF0B4E45545343415045322E30030100000021FF0B584D502044617461584D503C3F",
    "787061636B657420626567696E3D22EFBBBF222069643D2257354D304D7043656869487A7265537A4E54637A6B633964223F3E203C783A786D706D65",
    "746120786D6C6E733A783D2261646F62653A6E733A6D6574612F2220783A786D70746B3D2241646F626520584D5020436F726520352E302D63303630",
    "2036312E3133343737372C20323031302F30322F31322D31373A33323A30302020202020202020223E203C7264663A52444620786D6C6E733A726466",
    "3D22687474703A2F2F7777772E77332E6F72672F313939392F30322F32322D7264662D73796E7461782D6E7323223E203C7264663A44657363726970",
    "74696F6E207264663A61626F75743D222220786D6C6E733A786D703D22687474703A2F2F6E732E61646F62652E636F6D2F7861702F312E302F222078",
    "6D6C6E733A786D704D4D3D22687474703A2F2F6E732E61646F62652E636F6D2F7861702F312E302F6D6D2F2220786D6C6E733A73745265663D226874",
    "74703A2F2F6E732E61646F62652E636F6D2F7861702F312E302F73547970652F5265736F75726365526566232220786D703A43726561746F72546F6F",
    "6C3D2241646F62652050686F746F73686F70204353352057696E646F77732220786D704D4D3A496E7374616E636549443D22786D702E6969643A3945",
    "4538443445464539383231314531424137423841434242423731453241372220786D704D4D3A446F63756D656E7449443D22786D702E6469643A3945",
    "453844344630453938323131453142413742384143424242373145324137223E203C786D704D4D3A4465726976656446726F6D2073745265663A696E",
    "7374616E636549443D22786D702E6969643A3945453844344544453938323131453142413742384143424242373145324137222073745265663A646F",
    "63756D656E7449443D22786D702E6469643A3945453844344545453938323131453142413742384143424242373145324137222F3E203C2F7264663A",
    "4465736372697074696F6E3E203C2F7264663A5244463E203C2F783A786D706D6574613E203C3F787061636B657420656E643D2272223F3E01FFFEFD",
    "FCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1",
    "C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988878685",
    "84838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A49",
    "4847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D",
    "0C0B0A090807060504030201000021F9040906003D002C00000000960096000006FFC09E70482C1A8FC8A472C96C3A9FD0A8744AAD5AAFD8AC76CBED",
    "7ABFE0B0784C2E9BCFE8B47ACD6EBBDFF0B87C4EAFDBEFF8BC7ECFEFFBFF808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D",
    "9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BA8003061308170E1242243529221F0D04BB48030B0C0E020101D2C33D1B00D9",
    "001433110C03CC42BD0AD2D3E502D616DAEB141B07E0BA0B0DE7D4E601D6D8EBEB1D240CB80310CAD59B4630800121EAF4E9E3B003DE2C020DEC49A3",
    "574D483E85FA562CA00561A0C082D30EF64888711D067FB3063010C8B29E0008164BAE7B704016818D3D544E04595024C9FF9234C54170A86A000201",
    "220714003951800305223FE83001D481B8A5DF584D9876402481023B033840606059110307323C985933E74A6A30552D38D0D4EB5B0105CC2A91E002",
    "0380A03997D63BA0D794517B01BA5E55507809C4126D957A0C80209584B0D214F7204034CAD781F670961AA000B439A45724B7A486A073A8051FE955",
    "B642E002E282021A8762609A606E2CB05D7A2C30DA817097C4B32CFD4890312903CC093AD04D85C0CED8A2436D15709D5A722D477DBB8C2B0A01CF89",
    "22B518402CF07BA80BDDA74DE7623DF63405A40E9896869F0B6989F55835CA040514686081E96D01C181079217CE83104E412083055AC38504141638",
    "417E3CDDD7FFC500B675780129A57527C03BF4D1259C340D90625E87A86D21C164E6A024CA044D096763162F9AE82028D031458D00AE55C7DD790264",
    "07CA00C61D899B7B551C76DB7DD479F2168C4A4E116474789912DC8AD4F4570501C6B1674E959E0C300F8C094EA1536F94A112E48A4915E9C49B1EFD",
    "768A94BE7955C0056D2AD10BA0E25C59CF6CA82C502677492D270003680E4140789A7D265DA4A104448D9FB81D8080049C1131000112AC4990664A4D",
    "F4E39E47350A26350710DAC30417A80860A54B41990A01661170E56A15F5F022683B555A562C92D1E8515C6BC63758A0AF74C49C7DD60C4BAC4498A6",
    "62545800C22544B3DD9A53809DAE40A01FB73D7D0B74678016DA322945E309612D537931634078B789440E800220906D4A5F453390BE1E29506F8443",
    "8C0A01020A382012030A180CC1BF08576CF1C51867ACF1C61C77ECF1C720872CF2C824976CF2C928A7ACF2CA2CB7ECF2CB30C72CF3CC34D76CF3CD38",
    "E7ACF3CE3CF7ECF3CF40072DF4D044EB11040021F9040906003D002C00000000960096000006FFC09E70482C1A8FC8A472C96C3A9FD0A8744AAD5AAF",
    "D8AC76CBED7ABFE0B0784C2E9BCFE8B47ACD6EBBDFF0B87C4EAFDBEFF8BC7ECFEFFBFF808182838485868788898A8B8C8D8E8F909192939495969798",
    "999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BA8003061308170E1242243529221F0D04BB48030B0C0E020101D2",
    "C33D1B00D9001438190C03CC42BD0AD2D3E502D616DAEB14160EE0BA0B0DE7D4E601D6D8EBEC2405B80310E5EA4D1B18C0801075FAF471D8016F1681",
    "06F6A4D1AB26245F427D2B16D082203020C169067B20BCB80E03035A0318045C594F00848A24D73D38208B80C61E29257E24187224C9FF99E246DC5C",
    "3500818090030A7C9428C08182901F7498F8E9400881080050344C3561DA8190040AE80CE000818165450C1C40014226CD1E57B35118B16AC101A660",
    "55522B8056898416180000858B551B8809A98ADA0BF0555C01057D993C2CF1362EC6ADA4248C95D6182E662896F57550706A80028103051CBD123A21",
    "89CFA01678A487E0CA8214313B202EC50035410191A934084C3241A9010E5A46EC876540E18B1E827F32E091A003E954203C20A9A1F6A8AEAA950B60",
    "AE45444CBAA310EC9418524B809819485DD019F03A17081C485A2075C0B734D25C1080DB453890324101082688607B5B9C90C083103E784338145668",
    "C5810A26680D17126498FFE06EA2F4B75300006E31C0052306700129A7D147CD01B05541C05DE205D00029EA8DB8DA16127494DA49DF31A51C905AE4",
    "E8A24BA450B7143502C4280501E12D25C050A120C7E452E459A1D8620341C65B75A951498592608E678A6C11B55422150424B7D839D87D32C03C3A32",
    "38454EBE4DE39D294A8A8794934CE0D91170A86C991A58055C60A712BD282A8E5EF6EC79CA026EAA869452AA311027110418C518A2D66D2A0A40D480",
    "9ADA01084840C056031020019D03759694442F1165D4A535BEE8680F135C40639A9D85154096AA1080160190B2548F3539A2A653B067C592D49BA999",
    "532B9D2EDAD3D92C1C5537DB3D4234EB6C44A2AA52D45869527384ED66FE1500282B10F4872E4F424004663DC2E4D2E9442DD52A2E96E5C66280A75C",
    "86444E9A022010F02CAD16108D400677A4005F1612D12A040828E040480C283031040B572CF2C824976CF2C928A7ACF2CA2CB7ECF2CB30C72CF3CC34",
    "D76CF3CD38E7ACF3CE3CF7ECF3CF40072DF4D044176DF4D14827ADF4D24C37EDF4D35047AD47100021F9040906003D002C00000000960096000006FF",
    "C09E70482C1A8FC8A472C96C3A9FD0A8744AAD5AAFD8AC76CBED7ABFE0B0784C2E9BCFE8B47ACD6EBBDFF0B87C4EAFDBEFF8BC7ECFEFFBFF80818283",
    "8485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BA8003061308",
    "170E1242243529221F0D04BB48030B0C0E020101D2C33D1B00D9001438190C03CC42BD0AD2D3E502D616DAEB14160EE0BA0B0DE7D4E601D6D8EBEC24",
    "05B80310E5EA4D1B18C0801075FAF471D8016F168106F6A4D1AB26245F427D2B16D082203020C169067B20BCB80E03035A0318045C594F00848A24D7",
    "3D38208B80C61E29257E24187224C9FF99E246DC5C3500818090030A7C9428C08182901F7498F8E9400881080050344C3561DA8190040AE80CE00081",
    "8165450C1C40014226CD1E57B35118B16AC101A66055522B8056898416180000858B551B8809A98ADA0BF0555C01057D993C2CF1362EC6ADA4248C95",
    "D6182E662896F57550706A80028103051CBD123A2189CFA01678A487E0CA8214313B202EC50035410191A934084C3241A9010E5A46EC876540E18B1E",
    "827F32E091A003E954203C20A9A1F6A8AEAA950B60AE45444CBAA310EC9418524B809819485DD019F03A17081C485A2075C0B734D25C1080DB453890",
    "324101082688607B5B9C90C083103E784338145668C5810A26680D170E4608FFE184A3F4B75300006E31800724B140CA69F45173006C554C90DF45FB",
    "A53722350C62F11E491118C89472276D41424C279042DD52D40800A3141310979006418A825C924B9167050128C444C3929CE835A200435571400731",
    "85608A6C11B554221506CC1093062F1D37CF97394A4140063189C06527478A87D49E4AB4A68D060DA0A2D86F601570419D49F4B2A85578EAD3632A0B",
    "249724524AA9C600764510601463212DF01C00266C880A40385AA5546A07202001015B0D408004730ED4D99D7209C04A51ABE194A9722E3EDAC30417",
    "DC955A3D9D890A800BAE108016015EB2548F35EA2DA65C670354C06962ABD2B3984B42CCD9A23D9DCDC25175B3DD239144B5D64EB42D519FA67B4E9C",
    "E2A6995A0180AA02417F637D141244D5D9234C2E9E4ED4529CECAEC71733067C6A6D48E4A4290002EFD6226B01D1080471470A2C6CE110B242808002",
    "0E84C480021D4350F1C72CB7ECF2CB30C72CF3CC34D76CF3CD38E7ACF3CE3CF7ECF3CF40072DF4D044176DF4D14827ADF4D24C37EDF4D350472DF5D4",
    "54576DF5D55867ADF5D67C04010021F9040906003D002C00000000960096000006FFC09E70482C1A8FC8A472C96C3A9FD0A8744AAD5AAFD8AC76CBED",
    "7ABFE0B0784C2E9BCFE8B47ACD6EBBDFF0B87C4EAFDBEFF8BC7ECFEFFBFF808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D",
    "9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BA8003061308170E1242243529221F0D04BB48030B0C0E020101D2C33D1B00D9",
    "001438190C03CC42BD0AD2D3E502D616DAEB14160EE0BA0B0DE7D4E601D6D8EBEC2405B80310E5EA4D1B18C0801075FAF471D8016F168106F6A4D1AB",
    "26245F427D2B16D082203020C169067B20BCB80E03035A0318045C594F00848A24D73D38208B80C61E29257E24187224C9FF99E246DC5C3500818090",
    "030A7C9428C08182901F7498F8E9400881080050344C3561DA8190040AE80CE000818165450C1C40014226CD1E57B35118B16AC101A66055522B8056",
    "898416180000858B551B8809A98ADA0BF0555C01057D993C2CF1362EC6ADA4248C95D6182E662896F57550706A80028103051CBD123A2189CFA01678",
    "A487E0CA8214313B202EC50035410191A934084C3247A9010E5A46EC876540E18B1E607732E091A083E055203C20A9A1F6A8AEAA950B60AE45444CBA",
    "A310EC9418524B809819485DD019F03A17081C485A2075C0B734D25C1080DB453890324101082688607B5B9C90C083103E784338145668C5810A2668",
    "0D170E4608FFE184A3F4B75300006E31800724B140CA69F451738074544C90DF45FBA53722350C62F11E491118C89472276D41424C279042DD52D408",
    "0063141310979006418A825C924B9167050128C444C3929BE835A20043557140073185608A6C11B554221506CC1093062F1D37CF97394A4140063189",
    "C02527478A87D49E46C0D39A361A34808A62BF8155C0057526811C0D95E1A94F8FA92C905C924829A51A03D81951C00A640ED69A091BA202108E5629",
    "95DA01084840C056034C7002091AB86595A41408C04A51ABE1A4A9722E322A44021E6C77D10355F5B000562EB842005A0478C9523DF8C4948DA81574",
    "AA4A528B4DEBD241D666C3C15BB37054DD6CF7C014932E001858090BAFFE7514A74F2451E082B6AE40D0DF581FF514AE0901E4428051694A14A7454F",
    "66502A2E0610BC5841E03EB98277E10C10563402F9AB0D06297C2001A0B6580C01020A3810120A2C58D0C209515AE8F2CB30C72CF3CC34D76CF3CD38",
    "E7ACF3CE3CF7ECF3CF40072DF4D044176DF4D14827ADF4D24C37EDF4D350472DF5D454576DF5D55867ADF5D65C775D4B100021F9040906003D002C00",
    "000000960096000006FFC09E70482C1A8FC8A472C96C3A9FD0A8744AAD5AAFD8AC76CBED7ABFE0B0784C2E9BCFE8B47ACD6EBBDFF0B87C4EAFDBEFF8",
    "BC7ECFEFFBFF808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5",
    "B6B7B8B9BA8003061308170E1242243529221F0D04BB48030B0C0E020101D2C33D1B00D9001438190C03CC42BD0AD2D3E502D616DAEB14160EE0BA0B",
    "0DE7D4E601D6D8EBEC2405B80310E5EA4D1B18C0801075FAF471D8016F168106F6A4D1AB26245F427D2B16D082203020C169067B20BCB80E03035A03",
    "18045C594F00848A24D73D38208B80C61E29257E24187224C9FF99E246DC5C3500818090030A7C9428C08182901F7498F8E9400881080050344C3561",
    "DA8190040AE80CE000818165450C1C40014226CD1E57B35118B16AC101A66055522B8056898416180000858B551B8809A98ADA0BF0555C01057D993C",
    "2CF1362EC6ADA4248C95D6182E662896F57550706A80028103051CBD123A2189CFA01678A487E0CA8214313B202EC50035410191A934084C3247A901",
    "0E5A46EC876540E18B1E607732E091A083E055203C20A9A1F6A8AEAA950B60AE45444CBAA310EC9418524B809819485DD019F03A17081C485A2075C0",
    "B734D25C1080DB453890324101082688607B5B9C90C083103E784338145668C5810A26680D170E4608FFE184A3F4B75300006E31800724B140CA69F4",
    "51738074544C90DF45FBA53722350C62F11E491118C89472276D41424C279042DD52D4080063141310979006418A825C924B9167050128C444C3929B",
    "E835A20043557140073185608A6C11B554221506CC1093062F1D37CF97394A4140063189C02527478A0716764CC0D39A361A34808A62BF819581070A",
    "EC29CE01345486A73E3DA6B240724982D542361AB4B0611205AC40E660AD99F0E92900E168D5A4DA3CF04200134436C0042790A0815BABCA25002B45",
    "AD06D7A62471C0C2054224E0C176173D50550F0B60E5822B04A075674CDA540013B5A45600A82A5751406D36D68AF42D001CBC35CB08E3827B96EDB7",
    "185809CB022878FB6DB83E9144810BDBB632C0086D511BAE45249910402E1388402649F4BE99C1A9B6984682BCFAFC7B91062B7817CEACC6DE5AED41",
    "25A5F081048E368CC0081158C0C2AE3DA0C082052D9C10A58530C72CF3CC34D76CF3CD38E7ACF3CE3CF7ECF3CF40072DF4D044176DF4D14827ADF4D2",
    "4C37EDF4D350472DF5D454576DF5D55867ADF5D65C77EDF5D7B504010021F9040906003D002C00000000960096000006FFC09E70482C1A8FC8A472C9",
    "6C3A9FD0A8744AAD5AAFD8AC76CBED7ABFE0B0784C2E9BCFE8B47ACD6EBBDFF0B87C4EAFDBEFF8BC7ECFEFFBFF808182838485868788898A8B8C8D8E",
    "8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BA8003061308170E1242243529221F0D04",
    "BB48030B0C0E020101D2C33D1B00D9001438190C03CC42BD0AD2D3E502D616DAEB14160EE0BA0B0DE7D4E601D6D8EBEC2405B80310E5EA4D1B18C080",
    "1075FAF471D8016F168106F6A4D1AB26245F427D2B16D082203020C169067B20BCB80E03035A0318045C594F00848A24D73D38208B80C61E29257E24",
    "187224C9FF99E246DC5C3500818090030A7C9428C08182901F7498F8E9400881080050344C3561DA8190040AE80CE000818165450C1C40014226CD1E",
    "57B35118B16AC101A66055522B8056898416180000858B551B8809A98ADA0BF0555C01057D993C2CF1362EC6ADA4248C95D6182E662896F57550706A",
    "80028103051CBD123A2189CFA01678A487E0CA8214313B202EC50035410191A934084C3247A9010E5A46EC876540E18B1E607732E091A083E055203C",
    "20A9A1F6A8AEAA950B60AE45444CBAA310EC9418524B809819485DD019F03A17081C485A2075C0B734D25C1080DB453890324101082688607B5B9C90",
    "C083103E784338145668450811461880170E6628FF2129F95D5442170292C402291E90640283584C106242FB8D62DE451400E85E4C1190F2017C5C90",
    "10D309A42840014920B058C5041A7077D22804CC109371CDA110130DD275F25C42183480C5011DC41482290C0C49D288562CE024772F1DE7935BAC65",
    "109308557AE280986CE2841D13F0B4A68D065A96E6639D0464E08102711231C0013454E6A63E39A6C2C076D9605059611AB4608D1205ACD0E560AD99",
    "70292A360CC9E99582BD10C004910D30C1092424A90DA78B5220002B038820A938A4AEC3010B17089180079026F440553D2C80950BAE3C6355AE0955",
    "00534C825556C19DAA0C90019D31392B12B4D970F0D62C2370AB8DB616418B0179B12C808E02B62469BB268D2E50DBCA0023B4052DB9DC9AB0212E13",
    "88D065BB07C5A441069FDE621A09EC66836F421AACE05D38AAFEEAAAC2016B83410A1F4850A83F088C1081052CCCDA030A2C58D0C2094B5AA8F2CA2C",
    "B7ECF2CB30C72CF3CC34D76CF3CD38E7ACF3CE3CF7ECF3CF40072DF4D044176DF4D14827ADF4D24C37EDF4D350472DF5D454576DF5D558676D4B1000",
    "21F9040906003D002C00000000960096000006FFC09E70482C1A8FC8A472C96C3A9FD0A8744AAD5AAFD8AC76CBED7ABFE0B0784C2E9BCFE8B47ACD6E",
    "BBDFF0B87C4EAFDBEFF8BC7ECFEFFBFF808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAAB",
    "ACADAEAFB0B1B2B3B4B5B6B7B8B9BA8003061308170E1242243529221F0D04BB48030B0C0E020101D2C33D1B00D9001438190C03CC42BD0AD2D3E502",
    "D616DAEB14160EE0BA0B0DE7D4E601D6D8EBEC2405B80310E5EA4D1B18C0801075FAF471D8016F168106F6A4D1AB26245F427D2B16D082203020C169",
    "067B20BCB80E03035A0318045C594F00848A24D73D3820CB0002712A057E04793066B6FF99E2466864454005069A3D0614F82851800305213FE83041",
    "F281032104220040D130D5070A003820255040E23407080C2C2B62E0800C0E32C76ADD366215020CDAAC62CD29A0C05A25125AE005DA23EB3A101352",
    "0D18F913A952057F993C2C2137E18AAEA4027448487840E42886137650708A408CAA48AB0CC8109304E6500D7CAAB8422045CC0E894BC98889184B03",
    "BC2473945A002366882CA12F7A78EDE902D88B35866281F080A4869BA342C474C14544CCBAA35E90A4D0804B8098194879200923A416EA247990827B",
    "B1449701B62FE220152281FFFFFE05E0C5090002784338082668457F0506386083FE1D380A7D09D9C7456D24B1A01E4926B897FFC50414EA23DF28DE",
    "5D4401695B9C475204A47C801E1724C47402290A3C9710081E5A318106D69D340A0133C4241C1603A010130DCC7932D745189477C5019B91745C290C",
    "D858E1150B0469DD4BA52C861A6DAC912442929F38606563E27CD6043CC9ADA38193A60C10635C5865E08102641631C001348C15E63A2CA6C24075D9",
    "1C85D55C1AB4608D1205ACB019616D9AB0282A368005E9923FBD10C004910D30C10946D15958981408C0CA0022189A14A60AB1708110097840286757",
    "F5B08056DCB5F2CCA13E6553014C3E415A819AABAC76E645BF8AD46B58A9C932C2B2BE02DB2B06FDCCB2000AC726942C63E3B940AC2B038C0042AFC9",
    "5AC4A180B84C20774294C8F6645D0693DE3280022AB0BB4EB91769B00276E1781A2B8FDA6C5B520A1F4890672E032030420416B0606A0F28B060410B",
    "27F8A8E0C51867ACF1C61C77ECF1C720872CF2C824976CF2C928A7ACF2CA2CB7ECF2CB30C72CF3CC34D76CF3CD38E7ACF3CE3CF7ECF3CF40072DF4D0",
    "44176DB42D41000021F9040906003D002C00000000960096000006FFC09E70482C1A8FC8A472C96C3A9FD0A8744AAD5AAFD8AC76CBED7ABFE0B0784C",
    "2E9BCFE8B47ACD6EBBDFF0B87C4EAFDBEFF8BC7ECFEFFBFF808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3",
    "A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BA800B171F2F1E200142243529221F0D04BB48040D32301D00D30015421BD4001438190C03CC",
    "42030125D9D9D63D16E5D314160EDFBA081614EAD4E7D8F4DA2405B8041F18F8F584A4030880C38E77B30CA82018B0C73D862B16D0B2C1B0E1408618",
    "18D01A10A162B56B151F1C9065008190051D199EBB884F64B811125911508161640F8E004DC46820E4830EFF132D1D0821D01105C2541FE671B04920",
    "433910112E183022C1810C0ED95CF620BA6EC42A04FFA63D10DA03A5D81031954868F14F2B576A2026A41AC01280DB0C3AF63919D0A004D394D9561C",
    "2515405A39AD039651795BAE8382530462B4B45985B13A1283433520A8E20A8114003BC82D2503605C2C0D3400CC516A010C8021B20C6801D043664F",
    "17E6D1AB91F60A8407F834981C1502A00B2E22007A1DF5021F059E5B0200CC40CA033E1853B7FCC6C78314567A25BA0C004D0F07A91009D2AB4F3FAC",
    "CB89F5EB6F809B4FDF0A7AF8ECBDBCC79F40FEA8EFEA84C7C567F8B0501D3E2664A7C5040096D3DD28C9D143C163D1011401291F4CC70509009D40FF",
    "8A02BAA9038282574CA01A3D1A68340A0133AC261B0A00D1709B2780A9830174561C60183DB195C24088015EB1408BC141600A5D9379E6143E22CCF8",
    "8903408A65536252BC6319351AE058CA001C66C554061E28E06411031C40C397EA5C980A03C04D53D3502969D082044C14B082346ED568029DAAD830",
    "4F9E87BD10C0048A8533C109347939D4921408C0CA0022BC79538DE570C0C2054224E0419BEA8C755247C7B5B2808A57D2630F436E5550A82B036410",
    "A5A90255B4542D2378F491431E61A0972C0BA0F0AA3A2B5544810BABC632C00820A804124126B477CB0422EC086CACC165C0672E0328A082B40D3D94",
    "8D062B0C07CE0013687AE234C1528357410A1F483026B6088C1081052C38DA030A2C58D0C2092AD6E7EFBF00072CF0C004176CF0C10827ACF0C20C37",
    "ECF0C310472CF1C414576CF1C51867ACF1C61C77ECF1C720872CF2C824976CF2C928A7ACF2CA2CB76C4B100021F9040906003D002C00000000960096",
    "000006FFC09E70482C1A8FC8A472C96C3A9FD0A8744AAD5AAFD8AC76CBED7ABFE0B0784C2E9BCFE8B47ACD6EBBDFF0B87C4EAFDBEFF8BC7ECFEFFBFF",
    "808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BA80",
    "0B171F2F1E20014208070A08130B03BB48040D32301D00D30015420D02010102020E0CCACC42030125D4E6D5D7DBDADADC0D06CBBA081614E7E6D63D",
    "08ECEAEB020D04B8043E60A877EE1EB675EAB2653B0001DE2C032A08D6BB974FA1BE6CEA10388C6543E2C474081162E4B680D680081EED11DBA78F9F",
    "0003B20C2010B200654A743D0EB6BC08B3C780FF112559115081E180389B044DC468206482020718136EEB49200300141B517DA0C7C1688FAAE74044",
    "B8D093080199DCF8518D408FC2885508064E7BE080A6CD0721822A2150209B03AA2DCC8198906A8085730FBC568DC1000A010554AD9E5B9175540069",
    "88BD0EF847056CBD0E0A4E11882131F115CF04495406D520A58AD3293C76205C4A86C7C1581A68F098A3D402181E4364191058A287D59D2ED0235843",
    "EF15080F246A98392A8447175C44787C3BEA85440A4CB704F0988194078930CA66812E9107290E124B7419109B200E522112E8DFAF7F589713FCF177",
    "4338041668457E01F6E70580092630E028F011241F1704D4570F0BE64964827A584C10FF613DEE8DA21D411484269E471190F201795C90E0D109A428",
    "B05C3D207058C504BB11A44163A31030036FC3A1E0110DC87582543D188467C5019811245C290CCC58CF84552CF0A37410986258695E55815A3D2214",
    "E9890352CEA5196750C043C091D468A0642903B8688E695F65E08102621231C001342826993929A6C24074D31425C49AD368D082044C14B082347422",
    "4A8D098CAA62033D91B2F9C00B014C80A64F139C40D49C7E4E438100AC0C2082A13EB1690E072C5C2044021E105A0F5D7601805D2B0BF028694AF76C",
    "7053A4157CDACA00199449D03D87DDD4552D23DC444DB0D202804101B42C8082B21FF5D06C4A14B8602C2C3F817013B52999E07EDF2D1388D064B7DF",
    "D6A3410695E63280022ABC3BAD10C2CABB0275E10C3001AD394EC3AC3918A4F0810479E2320002234460010BA8F680020B16B470028F0676ECF1C720",
    "872CF2C824976CF2C928A7ACF2CA2CB7ECF2CB30C72CF3CC34D76CF3CD38E7ACF3CE3CF7ECF3CF40072DF4D044176DF4D14827ADF4D24CDB12040021",
    "F9040906003D002C00000000960096000006FFC09E70482C1A8FC8A472C96C3A9FD0A8744AAD5AAFD8AC76CBED7ABFE0B0784C2E9BCFE8B47ACD6EBB",
    "DFF0B87C4EAFDBEFF8BC7ECFEFFBFF808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABAC",
    "ADAEAFB0B1B2B3B4B5B6B7B8B9BA800B171F2F1E20014208070A08130B03BB48040D32301D00D30015420D02010102020E0CCACC42030125D4E6D5D7",
    "DBDADADC0D06CBBA081614E7E6D63D08ECEAEB020D04B8043E60A877EE1EB675EAB2653B0001DE2C032A08D6BB974FA1BE6CEA10388C6543E2C47408",
    "1162E4B680D680081EED11DBA78F9F0003B20C2010B200654A743D0EB6BC08B3C780FF86AD08A8C070409C4D8226623410324181038C09B7F51CC040",
    "00838DA83ED0E350B407810CE74044B8D093080199DCF84D2DC00EC22A0403A73D7040D3E683102597102890CD41CFBDFB0EFC4335C0C2B9075DBFC6",
    "6000858082BF6C2FCE441540DAE1AE03064F010C955D5952046248447C85EA487E01349A6A90524569052CA10AD03C4A86471013B018382DB240A905",
    "303C86D0C2F6344605B4415DA047B0465E2C042C8614F03C54088F2EB8548C9ACDEDA81712292CDD22A13354DFA33C4884F119FA01E9C749719058A2",
    "CB800BA8D52920152281FFFFFE0DD30504051468A081E124A8A015FD01F89F805C9CE0E07F37C8475F1704A420110BA4A887FF547B574C301F413C90",
    "224278FB6D1180471190F2814719704182472790A20073F58000221513682091068C8D42C00C1EE590C5002878440356A01C550F06E359718065040D",
    "570A0338D6539F150B10F9A377A414365A57557CE591084C86E240967261965C13F010E024351A4459CA00339A439A571978A0409A470C70000D8981",
    "754E8BA930F00035440921E7341AB420011305AC20CD9E8F5263C2A4AAD8400FA6733EF0420013D036C004270CA567A1D35020002B0388D0A84F739A",
    "C3010B17089180078B1234575D0064D7CA0241669AD23D1BDC8469056FAE3240066C12748F61377155CB083751836CB60060809E2C0BA010ED473D50",
    "9B12052E34EB87CA00238070D3B6299900A12D13884025B9E6D6A341069CE63280022ADCABAD10C9EABBC264E19CBAAB8F03976B0E06297C2001A0BB",
    "0C80C0081158C0C2AB3DA0C082052D9C10E48224976CF2C928A7ACF2CA2CB7ECF2CB30C72CF3CC34D76CF3CD38E7ACF3CE3CF7ECF3CF40072DF4D044",
    "176DF4D14827ADF4D24C37EDF4D350472DF5D4B604010021F9040906003D002C00000000960096000006FFC09E70482C1A8FC8A472C96C3A9FD0A874",
    "4AAD5AAFD8AC76CBED7ABFE0B0784C2E9BCFE8B47ACD6EBBDFF0B87C4EAFDBEFF8BC7ECFEFFBFF808182838485868788898A8B8C8D8E8F9091929394",
    "95969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BA800B171F2F1E20014208070A08130B03BB48040D3230",
    "1D00D30015420D02010102020E0CCACC42030125D4E6D5D7DBDADADC0D06CBBA081614E7E6D63D08ECEAEB020D04B8043E60A877EE1EB675EAB2653B",
    "0001DE2C032A08D6BB974FA1BE6CEA10388C6543E2C474081162E4B680D680081EED11DBA78F9F0003B20C2010B200654A743D0EB6BC08B3C780FF86",
    "AD08A8C070409C4D8226623410324181038C09B7F51CC04000838DA83ED0E350B407810CE74044B8D093080199DCF84D2DC00EC22A0403A73D7040D3",
    "E683102597102890CD41CFBDFB0EFC4335C0C2B9075DBFC66000858082BF6C2FCE441540DAE1AE03064F010C955D5952046248447C85EA487E01349A",
    "6A90524569052CA10AD03C4A86471013B018382DB240A905303C86D0C2F6344605B4415DA047B0465E2C042C8614F03C54088F2EB8548C9ACDEDA817",
    "12292CDD22A13354DFA33C4884F119FA01E9C749719058A2CB800BA8D52920152281FFFFFE0DD30504051468A081E124A8A015FD01F89F805C1078A0",
    "81B98D321F41F571715F48EB5C40FF8A7A48B5770501EF7117C078A28810DE7EE4ED231B63A37CE05106DA5D949077A228C05C3D208848C502254E47",
    "1D68337894431654E5B70E72A51C550F062856B11B4BFCA0470A033BD69361150338305D42C98552D8685D55414055546A3399290E64291766613201",
    "CF00C55D341B61245C26C4571E28805512031C4043626822B4E6290C3C400D517BDAA4410B123051C00AD290E65364DB3810272936D06329014E02F0",
    "C00B014C40DB00139C3094399FF2B50D8EA90C2002A33E856A0E072C78D843021E284AD05C7BB265E52A0BC008EA4D386D70D3A740C13240066E1274",
    "8F61377155CB08C84E738FB2C862302C2C0BA010ED473D509B12052E6CDA88CA00238070D3B6379900A12D13886099B442985B8F061944AACB000AA8",
    "70AF4A3D707B8E062B1CBA0BAABC6A40B0BE18D01082047F86330002234460010B020881020B16B470028C0B966CF2C928A7ACF2CA2CB7ECF2CB30C7",
    "2CF3CC34D76CF3CD38E7ACF3CE3CF7ECF3CF40072DF4D044176DF4D14827ADF4D24C37EDF4D350472DF5D454DB12040021F9040906003D002C000000",
    "00960096000006FFC09E70482C1A8FC8A472C96C3A9FD0A8744AAD5AAFD8AC76CBED7ABFE0B0784C2E9BCFE8B47ACD6EBBDFF0B87C4EAFDBEFF8BC7E",
    "CFEFFBFF808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7",
    "B8B9BA800B171F2F1E20014208070A08130B03BB48040D32301D00D30015420D02010102020E0CCACC42030125D4E6D5D7DBDADADC0D06CBBA081614",
    "E7E6D63D08ECEAEB020D04B8043E60A877EE1EB675EAB2653B0001DE2C032A08D6BB974FA1BE6CEA10388C6543E2C474081162E4B680D680081EED11",
    "DBA78F9F0003B20C2010B200654A743D0EB6BC08B3C780FF86AD08A8C070409C4D8226623410324181038C09B7F51CC04000838DA83ED0E350B40781",
    "0CE74044B8D093080199DCF84D2DC00EC22A0403A73D7040D3E683102597102890CD41CFBDFB0EFC4335C0C2B9075DBFC66000858082BF6C2FCE4415",
    "40DAE1AE03064F010C955D5952046248447C85EA487E01349A6A90524569052CA10AD03C4A86471013B018382DB240A905303C86D0C2F6344605B441",
    "5DA047B0465E2C042C8614F03C54088F2EB8548C9ACDEDA81712292CDD22A13354DFA33C4884F119FA01E9C749719058A2CB800BA8D52920152281FF",
    "FFFE0DD30504051468A081E124A8A015FD01F89F805C1078A081B98D321F41F571715F48EB5C40FF8A7A48B5770501EF7117C078A28810DE7EE4ED23",
    "1B63A37CE05106DA5D949077A228C05C3D208848C502254E471D68337894431654E5B70E72A51C550F062856B11B4BFCA0470A033BD6936115033830",
    "5D42C98552D8685D55414055546A3399290E64291766613E31407117CD4618099709F195070A6095C4000690A5279A08AD790A030F5043949E3669D0",
    "82044C1080C0426BF1E3409CA4D8400F695E3909C0032F0430016D9949A093360740A6108EA90C20C2A23E796A0E072C78D8C3041704699100A90E1A",
    "8095AB2C002301B27E848F92814D05142C0364E0264106EDEAE236BDD232C24DD45094268776CEB2000ACF1ADB006AC66D53809FAF0C308302083769",
    "DB59480EB05ACB04225806ED35EF2A24000298CE3280022AD8AB524E2D29C4AF82034C9080071A0C3C293F0A14D0EF2E032030420416B02000311744",
    "0CC1C40B862CF2C824976CF2C928A7ACF2CA2CB7ECF2CB30C72CF3CC34D76CF3CD38E7ACF3CE3CF7ECF3CF40072DF4D044176DF4D14827ADF4D24C37",
    "EDF4D350BB12040021F9040906003D002C00000000960096000006FFC09E70482C1A8FC8A472C96C3A9FD0A8744AAD5AAFD8AC76CBED7ABFE0B0784C",
    "2E9BCFE8B47ACD6EBBDFF0B87C4EAFDBEFF8BC7ECFEFFBFF808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3",
    "A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BA800B171F2F1E20014208070A08130B03BB48040D32301D00D30015420D02010102020E0CCA",
    "CC42030125D4E6D5D7DBDADADC0D06CBBA081614E7E6D63D08ECEAEB020D04B8043E60A877EE1EB675EAB2653B0001DE2C032A08D6BB974FA1BE6CEA",
    "10388C6543E2C474081162E4B680D680081EED11DBA78F9F0003B20C2010B200654A743D0EB6BC08B3C780FF86AD08A8C070409C4D82266234103241",
    "81038C09B7F51CC04000838DA83ED0E350B407810CE74044B8D093080199DCF84D2DC00EC22A0403A73D7040D3E683102597102890CD41CFBDFB0EFC",
    "4335C0C2B9075DBFC66000858082BF6C2FCE441540DAE1AE03064F010C955D5952046248447C85EA487E01349A6A90524569052CA10AD03C4A864710",
    "13B018382DB240A905303C86D0C2F6344605B4415DA047B0465E2C042C8614F03C54088F2EB8548C9ACDEDA81712292CDD22A13354DFA33C4884F119",
    "FA01E9C749719058A2CB800BA8D52920152281FFFFFE0DD30504051468A081E124A8A015FD01F89F805C1078A081B98D321F41F571715F48EB5C40FF",
    "8A7A48B5770501EF7117C078A28810DE7EE4ED231B63A37CE05106DA5D949077A228C05C3D208848C502254E471D68337894431654E5B70E72A51C55",
    "0F062856B11B4BFCA0470A033BD69361150338305D42C98552D8685D55414055546A3399290E64291766584131407117CD4618099789538003D52D31",
    "80016409716667A9A9C2C003D410A5E7365685690401082CB4163F0E384A8A0DF490E65364EC1C808004046C9499043A697300640AE198CA002228BA",
    "A989DB1C10680F135C106454A70ACA9695AB2C00E39C36BA1880042BED6451AE5E01050BB084B62480770759245B00C8CE020187D2A9432C3E22E5A7",
    "90A5AC0C1069B6B1410B1F950214107F272C101C10EC3E3D3590A63E0E6C7B0BA4E621D49302CDB25300B80F452A6C00FB9A28000200D792D99ED2C5",
    "2B9B02FF2E4844661020E0544F085C003104094BECF1C720872CF2C824976CF2C928A7ACF2CA2CB7ECF2CB30C72CF3CC34D76CF3CD38E7ACF3CE3CF7",
    "ECF3CF40072DF4D044176DF4D14827ADF4D24C37CD47100021F9040906003D002C00000000960096000006FFC09E70482C1A8FC8A472C96C3A9FD0A8",
    "744AAD5AAFD8AC76CBED7ABFE0B0784C2E9BCFE8B47ACD6EBBDFF0B87C4EAFDBEFF8BC7ECFEFFBFF808182838485868788898A8B8C8D8E8F90919293",
    "9495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BA800B171F2F1E20014208070A08130B03BB48040D32",
    "301400D30015420D02010102020E0CCACC42030125D4E6D5D7DBDADADC0D06CBBA0816D2E7D4D63D08ECEAEB020D04B8043E60A877EE1EB675EAB265",
    "3B0001DE2C032A08D6BB974FA1BE6CEA10388C6543E2C474081162E4B680D680081ECD51DCA78F9F0003B20C2010B200654A743D0EB6BC08B3C780FF",
    "86AD08A8C070409C4D8226623410324181038C09B7F51CC04000838DA83E48E350B407810CE74044B8D093080199DCF84D2DC00EC22A0403A73D7040",
    "D3E683102597102890CD41CFBDFB0EFC4335C0C2B9075DBFC66000858082BF6C2FCE4415809E39C4E2064F010C955D5952046248C46C85EA487E0134",
    "9A6A60B99E8A2B0314B0842A40F328191E414CC062E0B4C802A516C0F018420BDBD31815D80675A1B5B91A79B110B0185240F450213CBAE052316A36",
    "B7A35E48A4B0748B84CE50818FF22011C667E907A82727C54162892E032EA056A780548804000608E0305D4050C081082218CE820C5A314182094AE0",
    "85041022B8DB280784B44E7F5CE4A7FFA1361790229B450A1D80D51504C4E75D00E58992CF872F7121C13EB43136CA040A9118808D5ABCA8A300E089",
    "D25B75DB08702215D375C68E75A40CE04091D5A907DB8B2C69A35C29557DB8CD75540CA9E436528EB2007209715805014FB634D272A10CA05375EF49",
    "615A95DA4C66CA90DE4D75A41373D2581B61547A26C45E643D31800185FA94A53E769EB2409ADCAC5524036C1A4100020B4186900395920281429AF2",
    "7300021210B0D1000448F0660007ACA55090A90C80A9A43A6E7340A2135CA0E245AC6A1AA62A040C46C0A2B4E923213EFB45D5EAA006741A6B64BED1",
    "08DE41B5AAB32C2D10D0895E00C7065A6C42CEAE222B75BC6E33AD7C550A507DC09EAE409021B908F5D4009DFA3870EC2D9792F92A315A82196E4C98",
    "26DB9302FA22F0AF497B3DB5CFC0342A50C0C1B8A00A01024EF5C480020E430071831C77ECF1C720872CF2C824976CF2C928A7ACF2CA2CB7ECF2CB30",
    "C72CF3CC34D76CF3CD38E7ACF3CE3CF7ECF3CF40072DF4D044176DF4D14827ADF4D2AB04010021F9040906003D002C00000000960096000006FFC09E",
    "70482C1A8FC8A472C96C3A9FD0A8744AAD5AAFD8AC76CBED7ABFE0B0784C2E9BCFE8B47ACD6EBBDFF0B87C4EAFDBEFF8BC7ECFEFFBFF808182838485",
    "868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BA800B171F2F1E20",
    "014208070A08130B03BB48040D32301400D30015420D02010102020E0CCACC42030125D4E6D5D7DBDADADC0D06CBBA0816D2E7D4D63D08ECEAEB020D",
    "04B8043E60A877EE1EB675EAB2653B0001DE2C032A08D6BB974FA1BE6CEA10388C6543E2C474081162E4B680D680081ECD51DCA78F9F0003B20894EC",
    "4100654A743D0EB6BC08B3C780FF86AD06207829A4A64713311A0899A0C001C684DB7A0E602080C1465413B41DE84940C63910112EF42442C0C0D0A7",
    "447D16600761D582030AD31A05C021C44C25040A6473C0752DC603FF50096DB9B56886180CA01850D097DF3604A92458545798E65D2903FC864C5B6A",
    "800296EC3853C9BC6F64008DA6163C2D7DFA0A810B3BF90526C500B46C2CAA1D8F2CD0D901D484BCB3E8DDAC4DC1EC500656237470DC0A016EB6055C",
    "069515BA4501C1B554BCB8ADEDA87CC4456331201261F65017AEAF63CEE5395A750A481D009D2D3E17CFDCB5392035A180FFFFFE8DB505040002E85D",
    "38082648457F05FA2781171234E8DF04F285B48E7D5B0C009B85015C40FFCA67EA0970C055AEC10555364A7DC761545C48C01A3B898D32415C50C5A8",
    "1D770A1D889C72719148857B169244CA00BE4127D279550C165B00C69542D58AD28D37D991A999761D863FFAD6D248CD8532804E9B0938C55453AE03",
    "D929C9E128958F4E90B9A5005D8AA2243F7D89F5C40006D8E9D393FA9C89CA025A7223955F55C5590401430550595ECB193A0A040A35C6CF01084840",
    "C04603102001988A0E9A232B42A5459A7ADB1CA0E7041798C8DDA26B21990A018111C0E77BEA3C888F63AB726580A382ADF56269DE1D442A6562C202",
    "4174E5D90ADE4E56F2AA4AA8F4017BCD646562C7A62B10CC57E63A3D35609B3E0ED87A0BA25626E4DDB24116E0686C2C66D11A404F0A942B0002EBCE",
    "9269014EED036F690AA8AB201199428040533D31A040BF10D4FBEFC20C37ECF0C310472CF1C414576CF1C51867ACF1C61C77ECF1C720872CF2C82497",
    "6CF2C928A7ACF2CA2CB7ECF2CB30C72CF3CC34D76CF3CD38E7ACB31E41000021F9040906003D002C00000000960096000006FFC09E70482C1A8FC8A4",
    "72C96C3A9FD0A8744AAD5AAFD8AC76CBED7ABFE0B0784C2E9BCFE8B47ACD6EBBDFF0B87C4EAFDBEFF8BC7ECFEFFBFF808182838485868788898A8B8C",
    "8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BA8003061308170E124208070A0813",
    "0B03BB48030B0C0E020101D2C33D0DD2D4020E0CCACC42BD0AD9D4D302D60DE4D3DA0D06CBBA0BD8E5E9D5C4F2E3D40D04B80310E3F7EA0684284847",
    "4E9AB40310DCCD2280AEE03C72D610A8BB67901A0285B1203C54C73140C01EE23A7634B880D60006FE26168420249E4A8A1F611128D9E3644591D33E",
    "36FC57F0233FFF8CA9062010E0B3C0486D0E147C84A0C081C36C44C1196500F4D48469073E122870D3010203FA8A103030549E03AD46050860A96AC1",
    "0183517B104049AD4058255B0DA2E578E0AE29A1F2026495AAC02F13034A856C7D8A2095849B07B5567DB2F85FDC5203065ABE4C6540DAC0D22E9A5A",
    "40515E632B042E809E68381403821C05B496429A20D402989D42AEABE573CA0B933B19E039CDC1EC290476973BCEE9AADAA7B8B748B41C80AD288947",
    "396331F0525D7451172A8E33CE257969010A481D802D2D3D97CC0EC9392035A180FDFBF6636E81801FBFF56F000638457DFDD9670D17121468DF04EA",
    "E114807B5B0CA01A4E1790A2D95307044705016F3D15FF4003A4602792765748B011350CD0079743294A67CF4AA40C979D001A4661DE8802D024CA00",
    "BA59F69D158005A64E61A5D085538EDBDD14DB8FA2D4E6217A5710E0D46AD430D7C9002E8DA4DF1436C136CD69A6C8F8944F352ED1E53CB2A112E444",
    "685DB0A512BDB8098E91E48079CA0253AA5594360C58A9585983C965943AE4A9D20F357B4D740002121080D100044890A5604519F49F9A43ED295E39",
    "07C8D9C3041774F862A08B31990A0161CD05954A10D5236445A482158B6754CEC3563C9BCA13E82C1A51A75244B1B16A909F4195755E39B7EE465101",
    "65AE02C17A4A72A49397661D680B01653DC9968823DAC50C5929E524D0AA062140EC2C901610574D3A1F5D488D02DE0A3804A41020D0D4470C28002F",
    "04E7CAEBEFBF00072CF0C004176CF0C10827ACF0C20C37ECF0C310472CF1C414576CF1C51867ACF1C61C77ECF1C720872CF2C824976CF2C928A7ACF2",
    "CA2CB7AC4710003B",
    0
};



const char *VGX_BUILTIN_IMAGE_logo_b_w_png[] = {
    "89504E470D0A1A0A0000000D4948445200000500000002080802000000BE72D443000000017352474200AECE1CE90000000467414D410000B18F0BFC",
    "610500000009704859730000761C0000761C01A7C278EA00002D6E49444154785EEDD7E19223368EA5D17DFF979E9DA9F92AD65E9B6A65654A24C473",
    "FE38A20D491700996EFE9FFF020000800B780003000070050F60000000AEE0010C0000C0153C80010000B882073000000057F000060000E00A1EC000",
    "00005CC103180000802B780003000070050F60000000AEE0010C0000C0153C80010000B882073000000057F000060000E00A1EC00000005CC1031800",
    "00802B780003000070050F60000000AEE0010C0000C0153C80010000B882073000000057F000060000E00A1EC00000005CC103180000802B78000300",
    "0070050F60000000AEE0010C0000C0153C80010000B882073000000057F000060000E00A1EC00000005CC103180000802B780003000070050F600000",
    "00AEE0010C0000C0153C80010000B882073000000057F000060000E00A1EC00000005CC103180000802B780003000070050F60000000AEE0010C0000",
    "C0153C80010000B882073000000057F000060000E00A1EC00000005CC103180000802B780003000070050F60000000AEE0010C0000C0153C80010000",
    "B882073000000057F000060000E00A1EC00000005CC103180000802B780003000070050F60000000AEE0010C0000C0153C80010000B8820730000000",
    "57F000060000E00A1EC00000005CC103180000802B780003000070050F60000000AEE0010C0000C0153C80010000B882073000000057F000060000E0",
    "0A1EC00000005CC103180000802B780003000070050F60000000AEE0010C0000C0153C80010000B882073000000057F000060000E00A1EC00000005C",
    "C103180000802B780003000070050F60000000AEE0010C0000C0153C80010000B882073000000057F000060000E00A1EC00000005CC103180000802B",
    "780003000070050F60000000AEE0010C0000C0153C80010000B882073000000057F000060000E00A1EC00000005CC103180000802B78000300007005",
    "0F60000000AEE0010C0000C0153C80010000B882073000000057F000060000E00A1EC00000005CC103180000802B780003000070050F60000000AEE0",
    "010C0000C0153C80010000B882073000000057F000060000E00A1EC00000005CC103180000802B780003000070050F60000000AEE0010C0000C0153C",
    "80010000B882073000000057F000060000E00A1EC00000005CC103180000802B780003000070050F60000000AEE0010C0000C0153C80010000B88207",
    "3000000057F000060000E00A1EC00000005CC103180000802B780003000070050F60000000AEE0010C0000C0153C80010000B882073000000057F000",
    "060000E00A1EC00000005CC103180000802B780003000070050F60000000AEE0010C0000C0153C80010000B882073000000057F000060000E00A1EC0",
    "0000005CC103180000802B780003000070050F60000000AEE0010C0000C0153C80010000B882073000000057F000060000E00A1EC00000005CC10318",
    "0000802B780003000070050F60000000AEE0010C0000C0153C80010000B882073000000057F000060000E00A1EC00000005CC103180000802B780003",
    "000070050F60000000AEE0010C0000C0153C80010000B882073000000057F000060000E00A1EC00000005CC103180000802B780003000070050F6000",
    "0000AEE0010C0000C0153C80010000B882073000000057F000060000E00A1EC00000005CC103180000802B780003000070050F60000000AEE0010C00",
    "00C0153C80010000B882073000000057F000060000E00A1EC00000005CC103180000802B780003000070050F60000000AEE0010C0000C0153C800100",
    "00B882073000000057F000060000E00A1EC00000005CC103180000802B780003000070050F60000000AEE0010C0000C0153C80010000B88207300000",
    "0057F000060000E00A1EC00000005CC103180000802B7800C3D5FECFC18AC8C769C1472AE2703503C7EBC8BE46BF314AD1F92C6D7794A27F28370DAE",
    "D6DFB95395920FD26A4F55CA518A0E0375885FA69F19A5E87C8AF63A4AD13F976B06B7EBAFDD918AC80769B5472AE2042586E13AD0AFD42F8D5274E6",
    "6BA3A314FDA3B96370BBFEE09DAA947C84967AAA521EACA0F0293AD92FD68F8D5274266B97A314FDD3B960C0D17FA38BC84768A9472AE2918A081FA7",
    "23FE7AFDDE284567A6B6384AD12FE07601A7FF992E25C3B5CE5395F23085830FD5417F8B7E7294A2334DFB1BA5E87770B580FFD1DFBF231591E15AE7",
    "918A789292C147EBB8BF4BBF3A4AD119A2B54D53FA6BB857C0FFE84FE0A94AC9582DF254A53C46B1E0D375E2DFA81F1EA5E81CAF854D53FA9BB85440",
    "FA4378A42232568B3C5211CF5026B843E7FEBDFAED518ACEC15AD534A5BF8C1B05A4BF85A72A2503B5C25395F20005826B74F4DFAE9F1FA5E81CA925",
    "4D53FAFBB84EC0FFD35FC4231591815AE1918A788002C14D3AFD3B946094A27398D6334AD16FE52E017FD39FC6231591515ADEA94AB95B69E0325D80",
    "4D0A314AD139468B19A5E817330236EB2E9EA77CF7A9FF231591515ADE918AB85B69E03EDD817DCA314AD139402B19A5E8773305F6E8164E50E29BD4",
    "F9918AC810ADED54A5DCAA2870A5AEC1564519A5E86CD5324629FAF50C820DBA857394FB1AB57DA42232446B3B5211B72A0ADCAA9BB05B6946293A9B",
    "B486518ACE7FAFAF7FC2BB740BA729FD356AFB4845E4782DEC54A5DCAA2870AB6EC2010A344AD179BB16304AD1F9C53878AB6EE14CF570877A3E5211",
    "395E0B3B5211B72A0A5CACCB7086328D5274DEA5B94F537A7E3311DEAA8B38533D5CA3B68F54440ED6AA4E55CAAD8A0217EB321CA358A3149DD76BE2",
    "D3949EBF3014DEA78B38599DDCA19E8F54440ED6AA8E54C4AD8A0277EB3E9CA464A3149D576AD6D3949EBF3317DEA7BB38599D5CA3B68F54448ED492",
    "4E55CAAD8A0277EB3E1CA670A3149DD768CAD3949E7F301ADEA7EB38599D5CA3B68F54448ED4928E54C4AD8A02D7EB4A9CA77CA3149D9FD67CA7293D",
    "FFC674789F6EE4647572933A3F5211394CEB395529B72A0A5CAF2B71A4228E52747E4E939DA6F42C1810EFD3A59CAC4E6E52E7472A2287693D472AE2",
    "5645018EFF335ECA518ACE4F68A6D3949E3533E27DBA9793D5C9656AFE4845E4182DE64845DCAD34C084BFE1051DA5E87C4FD39CA6F43C644CBC4F57",
    "73B23AB94CCD1FA9881CA3C51CA988BB950618F237BCACA3149D3FD51C47293A4F302CDEA70B3A599DDCA7FE8F54440ED04A8E54C4DD4A03FCD2C538",
    "5E7147293A5FD70447293ACF312FDEA73B3A599DDCA7FE8F54440ED04A8E54C4DD4A03FCD2C598A0C4A3149DA735B8694ACFD38C8CF7E99A4E562757",
    "6A04472A225BB58C2315F10005027EE9620C51E8518ACE131AD934A5E72B4C8DF7E9A64E5627576A04472A225BB58C2315F10005027EE962CC51EE51",
    "8ACE430D6B9AD2F34506C7FB745927AB935B35852315914D5AC3918A78863201BF74314629FA284567A1314D537ABECEEC789FEEEB647572ABA670A4",
    "22B2496B3852110F5020E0B7EEC634A51FA5E8FC43039AA6F4FC11E3E37DBAB293D5C9C51AC4918AC8DBB5802315F10C65027EEB6E0C5403A3149DBF",
    "6834D3949E3F6582BC4FB776B23AB9588338521179BB1670A4229EA14CC06FDD8D99EA6194A2F34B4399A6F47C8321F23E5DDCC9EAE46ECDE24845E4",
    "8D1AFD918A788C6201BF7537C6AA8D518A7EBDC6314DE9F91E73E47DBABB93D5C9DD9AC5918AC81B35FA2315F118C5027EEB6E4C5627A314FD620D62",
    "9AD2F36D46C9FB747D27AB93EB358E231591B768E8472AE2494A06FCD6DD18AE664629FA951AC134A5E7279826EFD30D9EAC4E38789BE5E32D1AFA91",
    "8A78929201BF7537E6AB9F518A7E933A1FA806F82106CAFB748927AB13CEDE661179B1C67DA4221EA670C06FDD8D8F504BA314FD0EF53C500DF073CC",
    "94F7E91E4F5627FCD250CE533E5EAC711FA9888729DC494A06FC84EED52845FF74753B4DE9F96926CBFB749B27AB137E6928472A222FD3A08F54C4F3",
    "94EF0C65027E54176C94A27FAEFA9CA6F4BC80E1F23E5DE8C9EA84DF9ACB79CAC7CB34E82315F13CE53B40818017E89A8D52F44F5487D3949ED7305F",
    "DEA73B3D599DF05B733952117981467CA4221EA988072810F01ADDB4518AFE59EA6D9AD2F33246CCFB74AD27AB13FEA2D19CA77CBC40233E52118F54",
    "C4DD4A03BC52F76D94A27F8ABA9AA6F4BC9229F33EDDECC9EA84BF6834472A223FAAE11EA988A72AE56EA5015EAC2B374AD1E7AB9F694ACF8B1934EF",
    "D3E59EAC4EF8BBA6739EF2F1A31AEE918A78AA52EE561AE0F5BA75A3147DB23A99A6F4BC9E59F33EDDEFC9EA84BF6B3A472A223FA4B11EA988072BE8",
    "6EA501DEA28B374AD167AA87694ACF5B1837EFD3159FAC4EF88706749EF2F1431AEB918A78B082EE561AE05DBA7BA3147D94A20F5403BC8B89F33EDD",
    "F2C9EA847F6840472A22DFD6408F54C4B39575B7D2006FD4F51BA5E843147AA01AE08D0C9DF7E9A24F5627FC9B66749EF2F16D0DF43CE53B5E71772B",
    "0DF05EDDC0518A7EBCE20E5403BC97B9F33EDDF5C9EA847FD38C8E5444BEA1511EA988C72BEE6EA501DEAE4B384AD10F56D0816A80B7337ADEA7EB3E",
    "599DB0D098CE533EBEA1519EA77C139478B7D2003B740F4729FA918A38500DB083E9F33EDDF8C9EA8485C674A422F2471AE2918A384189772B0DB049",
    "577194A21FA67003D5009B5800EFD3A59FAC4E586B52E7291F7FA4219EA77C43147AB7D200FB741B4729FA318A354DE9D9CA1A789FAEFE6475C25A93",
    "3A5211F9A2C677A4220E51E8DD4A036CD5851CA5E80728D034A567379BE07DBAFD93D5090F35ACF3948F2F6A7CE729DF1CE5DEAD34C06EDDC9518ABE",
    "5551A6293D07B00CDEA73F0093D5090F35AC231591A735B82315718E72EF561AE0005DCB518ABE4921A6293D67B00FDEA7BF0193D509FF49F33A4FF9",
    "785A833B4FF94629FA6EA501CED0CD1CA5E8EFD56F0F54031CC34A78ABFE12CC540F3CA1911DA9883CA1911DA988A3147DB7D200C7E8728E52F477E9",
    "5707AA014E622BBC557F0C66AA079ED3D4CE533E9ED0C8CE53BE694ABF5B698093743F4729FAEBF57B03D50087B118DEAD3F09D3949EA735B8231591",
    "871AD6918A384DE9772B0D7098AEE828457FA57E69A01AE03C76C306FD6198A3DC7C51E33B4FF978A8619DA77C03D5C06EA501CED32D1DA5E8AFD16F",
    "0C54031CC97AD8A33F0F1394983FD210CF533E161AD3918A38500DEC561AE0485DD4518AFED3FAF6816A8053D9109BF5A7E23CE5E37B9AE679CAC742",
    "633A4FF966AA87DD4A039CAABB3A4AD17F4EDF3B500D70304B62AAFECC3CAD8FF1762DE03CE5E31F1AD0918A38533DEC561AE0605DD7518AFE13FAC6",
    "816A80B3D91353F597E6697D8CB76B01E7291FFFD080CE53BEB16A63B7D20067EBC68E52F4EFE9BB06AA018E67554CD51F9BA7F531766807E7291F7F",
    "D1688E54C4B16A63B7D200C7EBD28E52F43FD5B70C54034C605B4CD5DF9BA7F531766807E7291F7FD168CE53BEC9EA64B7D20013746F4729FA17F5E1",
    "816A8039EC8CA9FAABF3B43EC626ADE13CE5E3978672A4224E5627BB950618A2AB3B4AD19FD6C706AA0146B136A6EA0FCFD3FA189BB486F3948F5F1A",
    "CA79CA375CCDEC561A608E6EEF28457F421F18A80698C6E698AABF3D4FEB63ECD326CE53BEEB358E231571B89AD9AD34C0285DE0518AFE50A503D500",
    "03591E53F5E7E7697D8C7DDAC479CA77BDC6719EF2CD573FBB950698A63B3C4AD1172A1AA80698C9FE98AABF404FEB636CD532CE53BE8B3588231571",
    "BEFAD9AD34C0405DE3518AFE0FFDEB816A80B1AC90A9FA23F4B43EC6562DE33CE5BB5883384FF93E422DED561A60A66EF22845FF8BFEC54035C064B6",
    "C854FD1D7A5A1F63B7F6719EF25DA9119CA77C9FA2AE762B0D3056977994A2FFD2FF34500D309C4532557F8A9ED6C7D8AD7D9CA77C576A04E729DFA7",
    "A8ABDD4A034CD67D1E656EF2FFF5BFF9F90076C954FD357A5A1FE300ADE43CE5BB4CCD9FA77C1FA4C6762BCDDD9A05BBB50FFE4843E42D1A3A1FC13A",
    "99AA3F484FEB631CA0959CA77C97A9F9F394EF83D4D86EA5B95BB360B7F6C19F6A8EBC58E3E653D82853F537E9697D8C33B495F394EF1AB57D9EF27D",
    "967ADBAD34776B16ECD63EF88646C9CB34683E88A532557F969ED6C738435B394FF9AE51DBE729DF67A9B7DD4A73B766C16EED83EF699ABC4023E6B3",
    "8CDC6B47F23CE5FB217DE979CAF743FAD2F3948F9769D0E729DF056AF83CE5FB38B5B75B69EED62CD8AD7DF06D0D941FD570F9389356DB619CA0C47F",
    "A4AF98A0C47FA4AF98A0C4FCB4E67B9EF25DA086CF53BE8F537BBB95E66ECD82DDDA073FA199F2139A291F6ACC823B8F7394FB8BFAF01CE5FEA23E3C",
    "47B9F969CDF73CE5FB68B57A9EF27DA23ADCAD34776B16ECD63EF8218D95EF699A7CAE193BEE3C4E53FAA7F5B1694AFFB43E364DE9F9510DF73CE5FB",
    "68B57A9EF27DA23ADCAD34776B16ECD63EF8394D963FD51CF96803D6DC799CA91E9ED00766AA8727F48199EA811FD570CF53BE0F5593E729DF87AAC9",
    "DD4A73B766C16EED831FD570F9BA26C8A71BB0E98EE44CF5F0843E30533D3CA10FCC540FFCA8867B9EF27DA89A3C4FF93E544DEE569ABB350B766B1F",
    "FCB4E6CB57343B2E70FAB23B9293D5C943954E56270F553A599DF0A31AEE79CAF7716AEF3CE5FB5CF5B95B69EED62CD8AD7DF0028D98E73435EE70FA",
    "BE3B9593D5C943954E56270F553A599DF0D39AEF610AF7716AEF3CE5FB5CF5B95B69EED62CD8AD7DF01A4D99FFA479718DD357DEC19CAC4E1EAA74B2",
    "3A79A8D2C9EA849FD67CCF53BE0F5263E729DF47ABD5DD4A73B766C16EED839769D0AC35296E72FAD63B9B6BD5ED538EB5EA1EAA74ADBA7DCAB156DD",
    "4395AE55B74F39D6AAE3051AF1610AF7416AEC3CE5FB68B5BA5B69EED62CD8AD7DF04ACD9A7FD38CB8CCE98BEF78AE55B74F39D6AA7BA8D2B5EAF629",
    "C75A750F55BA56DD3EE558AB8E1768C4E729DF47A8A5F394EFD3D5ED6EA5B95BB360B7F6C18B356EFEAEE9709FD377DF095DAB6E9F72AC55F750A56B",
    "D5ED538EB5EA1EAA74ADBA7DCAB1561DAFD1940F53B88F504BE729DFA7ABDBDD4A73B766C16EED83D76BE2FCD65CB8D2E9EBEF90AE55B74F39D6AA7B",
    "A8D2B5EAF629C75A750F55BA56DD3EE558AB8ED768CAE729DF7035739EF25DA086772BCDDD9A05BBB50FDEA2A1E3E05DEFF413D0395DAB6E9F72AC55",
    "F750A56BD5ED538EB5EA1EAA74ADBA7DCAB1561D2FD3A00F53B8E16AE63CE5BB400DEF569ABB350B766B1FBC4B73BF5BB3E062A71F828EEA5A75FB94",
    "63ADBA872A5DAB6E9F72AC55F750A56BD5ED538EB5EA7899067D9EF28D551BE729DF1DEA79B7D2DCAD59B05BFBE08D1AFDAD9A02773BFD1C745AD7AA",
    "DBA71C6BD53D54E95A75FB9463ADBA872A5DAB6E9F72AC55C72B35EBC3146EACDA384FF9EE50CFBB95E66ECD82DDDA07EFD5F42F53F3F0DF57A07F9E",
    "AA33BB56DD3EE558ABEEA14AD7AADBA71C6BD53D54E95A75FB9463AD3A5EA9599FA77C03D5C079CA778DDADEAD34776B16ECD63E78BB16708DDA865F",
    "4E3F101DDBB5EAF629C75A750F55BA56DD3EE558ABEEA14AD7AADBA71C6BD5F1628DFB30851BA806CE53BE6BD4F66EA5B95BB360B7F6C10EEDE00235",
    "0CBF9D7E263AB96BD5ED538EB5EA1EAA74ADBA7DCAB156DD4395AE55B74F39D6AAE3C51AF779CA374AD1CF53BE9BD4F96EA5B95BB360B7F6C126ADE1",
    "A3D52AFCC5E9C7A2C3BB56DD3EE558ABEEA14AD7AADBA71C6BD53D54E95A75FB9463AD3A5EAF891FA670A314FD3085BB4CCDEF569ABB350B766B1FEC",
    "D3263E544DC2DF9D7E323ABF6BD5ED538EB5EA1EAA74ADBA7DCAB156DD4395AE55B74F39D6AAE3F59AF879CA3744A1CF53BECBD4FC6EA5B95BB360B7",
    "F6C1562DE3E3D41EFCC3E987A323BC56DD3EE558ABEEA14AD7AADBA71C6BD53D54E95A75FB9463AD3ADEA2A11FA6704314FA3085BB4FFDEF569ABB35",
    "0B766B1FECD63E3E488DC1BF39FD7C748AD7AADBA71C6BD53D54E95A75FB9463ADBA872A5DAB6E9F72AC55C75B34F4F394EF78C53D4FF9EE53FFBB95",
    "E66ECD82DDDA070768251FA19660E1F423D2415EAB6E9F72AC55F750A56BD5ED538EB5EA1EAA74ADBA7DCAB1561DEFD2DC0F53B8E315F73085BB5223",
    "D8AD34776B16ECD63E38435B19AE6660EDF453D2595EAB6E9F72AC55F750A56BD5ED538EB5EA1EAA74ADBA7DCAB1561DEFD2DCCF53BE8315F43CE5BB",
    "5223D8AD34776B16ECD63E38468B19AB36E0A1D30F4AC779ADBA7DCAB156DD4395AE55B74F39D6AA7BA8D2B5EAF629C75A75BC51A33F4CE10E56D0C3",
    "14EE564D61B7D2DCAD59B05BFBE024ED66A01A80FFE4F4B3D2895EAB6E9F72AC55F750A56BD5ED538EB5EA1EAA74ADBA7DCAB1561D6FD4E8CF53BE23",
    "15F13CE5BB5553D8AD34776B16ECD63E384CEB19A5E8F084D38F4B877AADBA7DCAB156DD4395AE55B74F39D6AA7BA8D2B5EAF629C75A75BC57D33F4C",
    "E18E54C4C314EE620D62B7D2DCAD59B05BFBE0182D66A67A80FFE4F4B3D2895EAB6E9F72AC55F750A56BD5ED538EB5EA1EAA74ADBA7DCAB1561DEFD5",
    "F4CF53BEC314EE3CE5BB5883D8AD34776B16ECD63E38435B19AE6660EDF453D2595EAB6E9F72AC55F750A56BD5ED538EB5EA1EAA74ADBA7DCAB1561D",
    "6FD7020E53B8C314EE3085BB5BB3D8AD34776B16ECD63E38402BF908B5040BA71F910EF25A75FB9463ADBA872A5DAB6E9F72AC55F750A56BD5ED538E",
    "B5EA78BB16709EF21DA358E729DFDD9AC56EA5B95BB360B7F6C16EEDE383D418FC9BD3CF47A778ADBA7DCAB156DD4395AE55B74F39D6AA7BA8D2B5EA",
    "F629C75A75ECD00E0E53B86314EB3085BB5EE3D8AD34776B16ECD63ED8AA657C9CDA837F38FD707484D7AADBA71C6BD53D54E95A75FB9463ADBA872A",
    "5DAB6E9F72AC55C726ADE130853B4081CE53BEEB358EDD4A73B766C16EED837DDAC487AA49F8BBD34F46E777ADBA7DCAB156DD4395AE55B74F39D6AA",
    "7BA8D2B5EAF629C75A756CD21A0E53B80314E83085E3980595E66ECD82DDDA079BB4868F56ABF017A71F8B0EEF5A75FB9463ADBA872A5DAB6E9F72AC",
    "55F750A56BD5ED538EB5EAD8A74D1CA6705B15E53CE5E3981D9586BB751A762B0D3BB4830BD430FC76FA99E8E4AE55B74F39D6AA7BA8D2B5EAF629C7",
    "5A750F55BA56DD3EE558AB8E7DDAC4610AB755510E53387E6928BB9586BB751A762B0D6FD7026E52E7F0DFE7BF7F9EAA33BB56DD3EE558ABEEA14AD7",
    "AADBA71C6BD53D54E95A75FB9463AD3AB66A198729DC2685384FF9F8A5A1EC561AEED669D8AD34BC57D3BF4FFD73BDD38F420776ADBA7DCAB156DD43",
    "95AE55B74F39D6AA7BA8D2B5EAF629C75A756CD5320E53B84D0A7198C2F15B73D9AD34DCADD3B05B6978A3467FABA6C0DD4E3F079DD6B5EAF629C75A",
    "750F55BA56DD3EE558ABEEA14AD7AADBA71C6BD5B15BFB384CE1DEAE9F3F4FF9F8ADB9EC561AEED669D8AD34BC4B73BF5BB3E062A71F828EEA5A75FB",
    "9463ADBA872A5DAB6E9F72AC55F750A56BD5ED538EB5EAD8AD7D1CA6706FD7CF1FA670FC45A3D9AD34DCADD3B05B69788B868E8377BDD34F40E774AD",
    "BA7DCAB156DD4395AE55B74F39D6AA7BA8D2B5EAF629C75A751CA0951CA6706FD40F9FA77CFC45A3D9AD34DCADD3B05B6978B1C6CD5F341AAE74FAFA",
    "3BA46BD5ED538EB5EA1EAA74ADBA7DCAB156DD4395AE55B74F39D6AAE300ADE430857BA37EF83085E3EF9ACE6EA5E16E9D86DD4AC32B356BFE4D33E2",
    "32A72FBEE339599D3C54E96475F250A593D50967682B8729DC5BF493E7291F7FD774762B0D77EB34EC561A5EA641B3D6A4B8C9E95BEF6C4E56270F55",
    "3A599D3C54E96475C219DACA610AF716FDE4610AC73F34A0DD4AC3DD3A0DBB9586D768CAFC27CD8B6B9CBEF20EE67035B356DD6475F250A593D509C7",
    "68318729DC8BF56387291CFFA619ED561AEED669D8AD34BC4023E6394D8D3B0CD8770773B89A59AB6EA67A78421F98A91E3849BB394CE15EAC1F3B4C",
    "E1F837CD68B7D270B74EC36EA5E1A7355FBEA2D9718101CBEE54CE573F0B15CD540F4FE80333D50387693D8729DCCBF43387291C0B8D69B7D270B74E",
    "C36EA5E147355CBEAE09F2E9666CBA53395FFD2C54344DE99FD6C7A6293DE769438729DCCBF43387291C0B8D69B7D270B74EC36EA5E1E73459FE5473",
    "E4A38D5973A772BEFA59A8688E727F511F9EA3DC9CAA3D1DA6702FD00F1CA670AC35A9DD4AC3DD3A0DBB95861FD258F9B606CA879AB4E08EE47CF5B3",
    "50D10425FE237DC50425E660ADEA30857B817EE0308563AD49ED561AEED669D8AD34FC8466CA0F69AC7CA291DBED600E57336BD59DA77C3FA42F3D4F",
    "F918A2B51DA6703FAAAF3E4CE178A861ED561AEED669D8AD347C5B03E547355C3E8ED5FE89AEC5B7F5753FAAAF7E5A1F1BA8069ED6C7F850ADF93085",
    "FB517DF5610AC7430D6BB7D270B74EC36EA5E17B9A262FD088F92CF6FA87BA16DFD6D7FD9CBEF7697D6CA01A785A1FE373B5E9C314EE87F4A587291C",
    "FF49F3DAAD34DCADD3B05B69F88646C9CB34683E88A5FEB9AEC5B7F5753FA42F7D5A1F1BA8069ED6C7F85C6DFA3085FB217DE9610AC77FD2BC762B0D",
    "77EB34EC561AFE4843E4F59A389FC246BFA56BF16D7DDD4FE81B9FD6C706AA81A7F5313E5ACB3E4CE1BEADAF3B4CE1784223DBAD34DCADD3B05B69F8",
    "BA26C81B357AE6B3CBEFEA4E7C5B5FF76D7DDDD3FAD84035F0B43EC6476BD98729DCB7F57587291C4F6864BB9586BB751A762B0D5FD4F878BB16C070",
    "16F903BA13DFD6D77D4FDFF5B43E36500D3CAD8FF1E9DAF7610AF70D7DD1610AC7739ADA6EA5E16E9D86DD4AC357343B36690D4C668B3FA33BF16D7D",
    "DD37F4454FEB6303D5C0D3FA181768E52729D937F44587291CCF696ABB9586BB751A762B0D4F6B70337D400BFFEB7F1B612E2BFC31DD899FD037FE91",
    "BEE2697D6CA01A785A1FE302ADFC3085FB237DC5610AC7D31ADC6EA5E16E9D86DD4AC3739ADA4035F017FD8BB16A8399ECEF87752DBEADAFFBBA3EFF",
    "B43E36500D3CAD8F7187B67E9292FD91BEE23085E3690D6EB7D270B74EC36EA5E1098D6CA01AF887FEF558B5C14096F7F3BA16DFD6D77D511F7E5A1F",
    "1BA8069ED6C7B8435B3F4CE1BEA80F1FA6707C45B3DBAD34DCADD3B05B69F84F9AD74035B050D158B5C13436F7125D8B6FEBEBBEA24F3EAD8F0D5403",
    "4FEB635CA3C59FA4645FD4870F5338BEA2D9ED561AEED669D8AD343CD4B006AA81872A9DAC4E98C3CE5EA53BF16D7DDDD3FAD8D3FAD84035F0B43EC6",
    "355AFC610AF7B43E7698C2F1458D6FB7D270B74EC36EA561AD490D54034FE80393D5094358D80B7527BEADAF7B4E9F795A1F1BA8069ED6C7B849BB3F",
    "49C99ED6C70E5338BEA8F1ED561AEED669D8AD342C34A6816AE02BFAE458B5C104B6F55ADD896FEBEB9ED0079ED6C706AA81A7F5316ED2EE0F53B827",
    "F481C3148EAF6B82BB9586BB751A762B0DFFA6190D54035FD7E7C7AA0D8E67552FD79DF8B6BEEE3FA9FA697D6CA01A785A1FE332ADFF24257B421F38",
    "4CE1F8BA26B85B69B85BA761B7D2F00F0D68A01AF8537DCB58B5C1D9ECE91DBA133FA16F5CABEE697D6CA01A785A1FE332ADFF30857BA8D2C3148E3F",
    "D210772B0D77EB34EC561AFEA2D1CC540FDFD3778D551B1CCC92DEA76BF16D7DDD42454FEB6303D5C0D3FA18F7E9049CA4640F557A98C2F1471AE26E",
    "A5E16E9D86DD4AC36FCD65A01AF8397DEF58B5C191ACE7ADBA13C3D5CC0FE94BCF533EE66BA38729DC424587291C7FAA39EE561AEED669D8AD34FCD2",
    "5006AA819FD6B78F551B9CC76EDEAD3BF1116AE98FF415139498C9DAE5494AB650D1494AC63734CADD4AC3DD3A0DBB958651FFBFE8FF5303AFD16F8C",
    "551B1CC66236E84E7C845AFAA23E3C47B919AB451EA670FFD0BF3E4CE1F88646B95B69B85BA761B7D25CAF710C5403AFD42F8D551B9CC456F6E84E7C",
    "845A7A5A1F9BA6F48CD5224F52B27FE85F9FA4647C4FD3DCAD34DCADD3B05B69EED62C06AA81D7EBF7C6AA0D8E6125DB74273E422D3DA10FCC540FCC",
    "D4160F53B8BFE85F1CA6707C4FD3DCAD34DCADD3B05B692ED62006AA8137EA8767AA07CE601F3B7527E6AB9F27F48199EA81B15AE4494AF617FD8B93",
    "948C6F6BA0BB9586BB751A762BCDAD9AC24035F076FDFC4CF5C0012C63B3EEC47CF5F350A593D50933B5C5C314EE97FEA7C3148E6F6BA0BB9586BB75",
    "1A762BCD951AC14035B04921C6AA0DB6B28623742726AB93872A9DAC4E18AB459EA464BFF43F9DA464FC8466BA5B69B85BA761B7D2DCA7FE07AA81AD",
    "8A32566DB08F1D1CA10B31599D3C54E96475C2582DF230E767E34734D3DD4AC3DD3A0DBB95E632353F4DE98F51AC99EA814D2CE008DD86B5EAF629C7",
    "5A750F55BA56DD3EE558AB8EC9DAE5490E0FC64F69ACBB9586BB751A762BCD4DEA7C9AD21FA67033D5033B98FE11BA0A6BD5ED538EB5EA1EAA74ADBA",
    "7DCAB1561D93B54B9ED0C8F8218D75B7D270B74EC36EA5B9466D4F53FA231571A67AE0ED8CFE08DD83B5EAF629C75A750F55BA56DD3EE558AB8EE15A",
    "270F352C7E4E93DDAD34DCADD3B05B692E50C303D5C0C10A3A533DF05EE67E842EC15A75FB9463ADBA872A5DAB6E9F72AC55C770AD93871A163FA7C9",
    "EE561AEED669D8AD349FAE6E07AA81E31577ACDAE05D4CFC081DFFB5EAF629C75A750F55BA56DD3EE558AB8EF9DA280B8D891FD570772B0D77EB34EC",
    "569A8F56AB03D5C01CE59EA91E780BE33E42677FADBA7DCAB156DD4395AE55B74F39D6AAE323B454FE4D33E24735DC0314888B7514762BCDE7AACF81",
    "6A609AD2CF540FBC9E591FA183BF56DD3EE558ABEEA14AD7AADBA71C6BD5F1115A2AFFD080F869CDF70005E2621D85DD4AF3A16A72A01A98A91E66AA",
    "075ECCA08FD0A95FAB6E9F72AC55F750A56BD5ED538EB5EAF814ED95BF6B3AFCB4E67B863271ABCEC16EA5F9447538500D4C562733D503AF64CA47E8",
    "C8AF55B74F39D6AA7BA8D2B5EAF629C75A757C8AF6CA5F341A5EA0119FA464DCA713B05B693E4EED4D53FA4F515703D5002F63C447E8BCAF55B74F39",
    "D6AA7BA8D2B5EAF629C75A757C9056CB6FCD851768C4C06FDD8DCF526FD394FEB3D4DB4035C06B98EF113AEC6BD5ED538E17EBC7F629C75A757C9056",
    "CB2F0D85D768CAC06FDD8D0F5263D394FE13D5E14CF5C04F33D92374CCD7AADBA71C2FD68FED538EB5EAF82C6D1727FCC59A32F05B77E353D4D534A5",
    "FF5CF539533DF0A38CF5089DF1B5EAF629C78BF563FB9463AD3A3E4BDBBD5EE3E0651A34F05B77E323D4D234A5FF74753B533DF073CCF4081DF0B5EA",
    "F629C78BF563FB9463AD3A3E4E0BBE5BB3E0651A34F05B7763BEFA99A6F4D7A8ED816A801F62A047E874AF55B74F395EAC1FDBA71C6BD5F1715AF0C5",
    "1A04AFD4AC81DFBA1BC3D5CC34A5BF4CCD0F5403FC04D33C42477BADBA7DCAF162FDD83EE558AB8E4FD48E6FD51478A5660DFCD6DD18AB3606AA812B",
    "3582816A806F33CA2374AED7AADBA71C2FD68FED538EB5EAF844EDF84A8D80176BDCC06FDD8D99EA61A01AB8588398A91EF806433C42277AADBA7DCA",
    "F162FDD83EE558AB8E0FD59A2F53F3BC45430786FFF1A987694ACF2F0D65A01AE04F99E0113ACE6BD5ED538E17EBC7F629C75A757CA8D67C999AE72D",
    "1A3A30F98F4F0D4C537AFEA2D10C5403FC11E33B426779ADBA7DCAF162FDD83EE558AB8ECFD5A6AF51DBBC4B7307C6FEFD29FD34A5E71F1AD04035C0",
    "D799DD113AC86BD5ED538E17EBC7F629C75A757CAE367D8DDAE65D9A3B30F3EF4FD1A7293D0B8D69A01AE08B0CEE089DE2B5EAF629C78BF563FB9463",
    "AD3A3E5ACBBE400DF3468D1E18F827A8DCD3949E871AD64035C05798DA113AC26BD5ED538E17EBC7F629C75A757CB4967D811AE6BD9A3EDCADFB3047",
    "B9A7293DCF696AD3949EA719D9113ABF6BD5ED538E17EBC7F629C75A757CBAF6FDD16A95B76B0170B7EEC310859EA6F47C45B31BA8067882611DA193",
    "BB56DD3EE578B17E6C9F72AC55C7A76BDF1FAD5679BB160077EB3E4C50E2694ACFD735C1816A80FFC4A48ED0B15DAB6E9F72BC583FB64F39D6AAE302",
    "ADFC43D5249BB406B855376182124F537AFE54731CA80678C8988ED0995DAB6E9F72AC55F750A56BD5ED538EB5EAB8402BFF5035C926AD016ED54D38",
    "5E7147293A3FA1994E537AD6CCE8081DD8B5EAF629C75A750F55BA56DD3EE558AB8E3BB4F58F537B6CD532E03EDD81E3157794A2F3739AEC34A567C1",
    "808ED0695DAB6E9F72AC55F750A56BD5ED538EB5EAB8435BFF38B5C7562D03EED31D385841A7293D3FADF94E537AFE8DE91CA1A3BA56DD3EE558ABEE",
    "A14AD7AADBA71C6BD5718D16FF416A8C03B412B849A7FF60059DA6F4BC46531EA806F83B7339428774ADBA7DCAB156DD4395AE55B74F39D6AAE326ED",
    "FE53D41507682570934EFFA94A394DE979A5663D500DF0178672844EE85A75FB9463ADBA872A5DAB6E9F72AC55C74DDAFD47A8258ED162E00E9DFB53",
    "95729AD2F3160D7D9AD2F39B891CA1E3B956DD3EE558ABEEA14AD7AADBA71C6BD57199D63F5FFD708C160377E8DC1FA988D3949E376AF4D3949E5F8C",
    "E3089DCDC9EAE4A14A27AB132ED3FA87AB190ED37AE0D375E28F54C4694ACFDBB580694ACF7F6FB07FB2550773B23A79A8D2C9EA84FB7402C6AA0D8E",
    "D492E07375D68F54C4694ACF26AD619AD25FCF208ED0A99CAC4E1EAA74B23AE14A1D8299EA8153B527F8449DF223157194A2738056324AD1EF660AA7",
    "E854CE540F4FE80333D503B7EA1C0C54039CAD6DC167E97C1FA988A3149D63B498694A7F2B17E9149DC799EAE1097D60A67AE0621D85518ACE04ED0C",
    "3E4527FB48451CA5E81CA6F54C53FA2BB94B07E93C4E53FAA7F5B1694ACFF53A1043149A39DA1CCCD7993E521147293A476A49D394FE3EAED3593A8F",
    "7394FB8BFAF01CE5865F3A16C72B2E03B54298A9737CAA528E52740ED6AAA629FD65DCA8E3741E2728F11FE92B262831FC5DE7E354A564AC1609D374",
    "824F55CA518ACE04ED6C94A2DFC4A53A57A7F23CE5FB217DE979CA076B9D95C3148E8FD05261824EEDA94A394DE999A3CD8D52F46BB85700DFD27F3D",
    "0E50203E4E0B865375520F56D0694ACF34ED6F9AD25FC0D502F801FDD7639342F0E9DA379CA17379BCE24E537A666A8BD394FED3B95D003FA9FF86BC",
    "453FC97D3A01B043A77088428F5274E66BA3A314FDA3B963002FD17F495EA01F805F3A16F04A9DB6694A3F4AD1F914ED7594A27F2ED70CE04DFA0FCB",
    "17F561785A4707FE542769B89A19A5E87C96B63B4AD13F949B060000C0153C80010000B882073000000057F000060000E00A1EC00000005CC1031800",
    "00802B780003000070050F60000000AEE0010C0000C0153C80010000B882073000000057F000060000E00A1EC00000005CC103180000802B78000300",
    "0070050F60000000AEE0010C0000C0153C80010000B882073000000057F000060000E00A1EC00000005CC103180000802B780003000070050F600000",
    "00AEE0010C0000C0153C80010000B882073000000057F000060000E00A1EC00000005CC103180000802B780003000070050F60000000AEE0010C0000",
    "C0153C80010000B882073000000057F000060000E00A1EC00000005CC103180000802B780003000070050F60000000AEE0010C0000C0153C80010000",
    "B882073000000057F000060000E00A1EC00000005CC103180000802B780003000070050F60000000AEE0010C0000C0153C80010000B8820730000000",
    "57F000060000E00A1EC00000005CC103180000802B780003000070050F60000000AEE0010C0000C0153C80010000B882073000000057F000060000E0",
    "0A1EC00000005CC103180000802B780003000070050F60000000AEE0010C0000C0153C80010000B882073000000057F000060000E00A1EC00000005C",
    "C103180000802B780003000070050F60000000AEE0010C0000C0153C80010000B882073000000057F000060000E00A1EC00000005CC103180000802B",
    "780003000070050F60000000AEE0010C0000C0153C80010000B882073000000057F000060000E00A1EC00000005CC103180000802B78000300007005",
    "0F60000000AEE0010C0000C0153C80010000B882073000000057F000060000E00A1EC00000005CC103180000802B780003000070050F60000000AEE0",
    "010C0000C0153C80010000B882073000000057F000060000E00A1EC00000005CC103180000802B780003000070050F60000000AEE0010C0000C0153C",
    "80010000B882073000000057F000060000E00A1EC00000005CC103180000802B780003000070050F60000000AEE0010C0000C0153C80010000B88207",
    "3000000057F000060000E002FFF55FFF1723E515D941554E0C0000000049454E44AE426082",
    0
};



const char *VGX_BUILTIN_IMAGE_logo_b_x_png[] = {
    "89504E470D0A1A0A0000000D4948445200000501000002090806000000158EFB8F000000017352474200AECE1CE90000000467414D410000B18F0BFC",
    "610500000009704859730000761C0000761C01A7C278EA000032BD49444154785EEDD6E16E24BB91B6DBEFFE6F7ACE6918C6D8CF706749AD92C42097",
    "81E51F818E2CBEC1C8D4FE7FFFF33FFF03000000001C6C590400000000CEB12C0200000000E758160100000080732C8B00000000C039964500000000",
    "E01CCB2200000000708E65110000000038C7B208000000009C63590400000000CEB12C0200000000E758160100000080732C8B00000000C039964500",
    "000000E01CCB2200000000708E65110000000038C7B208000000009C63590400000000CEB12C0200000000E758160100000080732C8B00000000C039",
    "964500000000E01CCB2200000000708E65110000000038C7B208000000009C63590400000000CEB12C0200000000E758160100000080732C8B000000",
    "00C039964500000000E01CCB2200000000708E65110000000038C7B208000000009C63590400000000CEB12C0200000000E758160100000080732C8B",
    "00000000C039964500000000E01CCB2200000000708E65110000000038C7B208000000009C63590400000000CEB12C0200000000E758160100000080",
    "732C8B00000000C039964500000000E01CCB2200000000708E65110000000038C7B208000000009C63590400000000CEB12C0200000000E758160100",
    "000080732C8B00000000C039964500000000E01CCB2200000000708E65110000000038C7B208000000009C63590400000000CEB12C0200000000E758",
    "160100000080732C8B00000000C039964500000000E01CCB2200000000708E65110000000038C7B208000000009C63590400000000CEB12C02000000",
    "00E758160100000080732C8B00000000C039964500000000E01CCB2200000000708E65110000000038C7B208000000009C63590400000000CEB12C02",
    "00000000E758160100000080732C8B00000000C039964500000000E01CCB2200000000708E65110000000038C7B208000000009C63590400000000CE",
    "B12C0200000000E758160100000080732C8B00000000C039964500000000E01CCB2200000000708E65110000000038C7B208000000009C6359040000",
    "0000CEB12C0200000000E758160100000080732C8B00000000C039964500000000E01CCB2200000000708E65110000000038C7B208000000009C6359",
    "0400000000CEB12C0200000000E758160100000080732C8B00000000C039964500000000E01CCB2200000000708E65110000000038C7B20800000000",
    "9C63590400000000CEB12C0200000000E758160100000080732C8B00000000C039964500000000E01CCB2200000000708E65110000000038C7B20800",
    "0000009C63590400000000CEB12C0200000000E758160100000080732C8B00000000C039964500000000E01CCB2200000000708E65110000000038C7",
    "B208000000009C63590400000000CEB12C0200000000E758160100000080732C8B00000000C039964500000000E01CCB2200000000708E6511000000",
    "0038C7B208000000009C63590400000000CEB12C0200000000E758160100000080732C8B00000000C039964500000000E01CCB2200000000708E6511",
    "0000000038C7B208000000009C63590400000000CEB12C0200000000E758160100000080732C8B00000000C039964500000000E01CCB220000000070",
    "8E65110000000038C7B208000000009C63590400000000CEB12C0200000000E758160100000080732C8B00000000C039964500000000E01CCB220000",
    "0000708E65110000000038C7B208000000009C63590400000000CEB12C0200000000E758160100000080732C8B00000000C039964500000000E01CCB",
    "2200000000708E65110000000038C7B208000000009C63590400000000CEB12C0200000000E758160100000080732C8B00000000C039964500000000",
    "E01CCB2200000000708E65110000000038C7B208000000009C63590400000000CEB12C0200000000E758160100000080732C8B00000000C039964500",
    "000000E01CCB2200000000708E65110000000038C7B208000000009C63590400000000CEB12C0200000000E758160100000080732C8B00000000C039",
    "964500000000E01CCB2200000000708E65110000000038C7B208000000009C63590400000000CEB12C0200000000E758160100000080732C8B000000",
    "00C039964500000000E01CCB2200000000708E65110000000038C7B208000000009C63590400000000CEB12C0200000000E758160100000080732C8B",
    "00000000C039964500000000E01CCB2200000000708E65110000000038C7B208000000009C635904E0EFFDFFFFFBF37FC7683EF809DDC3E99AEF569D",
    "0BF07BFA7EFEA49EE574CD0FDFAD3B78BAE6E79F2D8B00FCBDFE513A4133C277EAFE9DA0194FD7FCC07EFADEFEB49EE774CD0FDFA5BB77BAE6E7D9B2",
    "08C0D7F48FD374CD07DFA9FB375DF39DA89981FDF53DFE0D3DD3E99A1FDEAD3B77BAE6E7B5651180AFE91FA81334237C87EEDD099AF114CD09CCD277",
    "FAB7F45CA76B7E7897EEDAE99A9F8F591601F8BAFEA19AAEF9E03B74EFA66BBEE99A0F98ABEFF76FEAD94ED7FCF055DDB1D3353F1FB72C02F075FD63",
    "7582668477EABE9DA019A76A2E60BEBEE7BFADE73B5DF3C3DFEA6E9DAEF9F99C651180F7E81FADE99A0FDEA9FB365DF34DD44CC039FABEEFA0673C5D",
    "F3C367749F6ED019F079CB2200EFD13F5C2768467887EED9099A719AE601CED2777E173DE7E99A1F3EA27B7483CE80BFB32C02F03EFD03365DF3C13B",
    "74CFA66BBE499A053853DFFD9DF4ACA76B7E78D2FDB94167C0DF5B1601789FFE113B4133C25774BF4ED08C53340770AEBEFFBBE9794FD7FCB0D2BDB9",
    "4167C0D72C8B00BC57FF984DD77CF015DDAFE99A6F8AE600CED66FC08E7AE6D3353FFCA7EECBE99A9FF758160178BFFE619BAEF9E06F74AF4ED08C13",
    "340370BE7E0776D5739FAEF9E18FEEC9E99A9FF7591681AFE9476CB266E3EF75B6D3351FFC8DEED574CD3741330077E8B760673DFBE99A9FBB753F4E",
    "D7FCBCD7B2087C5E3F5E276A663EAF339DAEF9E033BA4F2768C6DDF5FCC03DFA3DD85DCF7FBAE6E74EDD8BD3353FEFB72C029FD38FD7C99A9DCFE93C",
    "A76B3EF88CEED374CDB7BB9E1FB84BBF091334C3E99A9FBB741F4ED7FC7C8F6511F8B87EBC6ED019F0399DE774CD071FD13D3A4133EEAEE707EED26F",
    "C214CD71BAE6E70EDD83D3353FDF6759043EA61FAF9B74167C5C67395DF3C147748FA66BBEDDF5FCC07DFA5D98A4594ED7FC9CAB777F83CE80EFB52C",
    "021FD30FD84D3A0B3EA7F39CAEF9E049F7E704CDB8BB9E1FB84FBF0BD334CFE99A9FF3F4CE6FD019F0FD9645E0B57EC06ED499F0719DE574CD074FBA",
    "3FD335DFEE7A7EE04EFD364CD44CA76B7ECED1BBBE4167C0CF581681D7FA11BB5167C2E7749ED3351FAC746F4ED08CBBEBF9813BF5DB3055739DAEF9",
    "99AF777C83CE809FB32C02AFF54376A3CE84CFE93CA76B3E58E9DE4CD77CBBEBF9817BF5FB3059B39DAEF999AB777B83CE809FB52C02AFF56376A3CE",
    "84CFEB4CA76B3EF84FDD971334E3EE7A7EE05EFD3E4CD77CA76B7EE6E99DDEA033E0E72D8BC06BFDA0DDA833E1F33AD3E99A0FFE53F765BAE6DB5DCF",
    "0FDCADDF881334E3E99A9F397A9737E80CF81DCB22F05A3F6A37EA4CF83B9DEB74CD077F744FA66BBE099A01B85BBF11A768CED3353FFBEB1DDEA033",
    "E0F72C8BC06BFDB0DDA833E1EF74AED3351FFCD13D99AEF9266806E06EFD469CA4594FD7FCECAB7777BAE6E7F72D8BC06BFDC0DDA833E1EF75B6D335",
    "1F77EB7E4CD77C13340340BF13A769DED3353FFBE99D9DAEF9D9C3B208BCD68FDC8D3A13FE5E673B5DF371B7EEC774CD37413300F43B71A2663E5DF3",
    "B387DED30D3A03F6B12C02AFF54377A3CE84AFE97CA76B3EEED4BD98AEF9A6680E807E274ED5DCA76B7E7E57EFE7069D017B591681D7FAB1BB5167C2",
    "D774BED3351F77EA5E4CD77C53340740BF13276BF6D3353FBFA3F77283CE80FD2C8BC06BFDE0DDA833E1EB3AE3E99A8FBB741FA66BBE499A05A0DF89",
    "D335FFE99A9F9FD5FBB84167C09E9645E0B57EF46ED499F0759DF174CDC75DBA0FD335DF14CD01F047BF1537E80C4ED7FCFC8CDEC30D3A03F6B52C02",
    "AFF5C377A3CE84F7E89CA76B3EEED03D98AEF9266916803FFAADB845E770BAE6E77B75FE37E80CD8DBB208BCD68FDF8D3A13DEA3739EAEF9B843F760",
    "BAE69BA45900FEE8B7E2269DC5E99A9FEFD1B9DFA033607FCB22F05A3F8037EA4C789FCE7ABAE6E36CBDFFE99A6F9AE601F8A3DF8ADB741EA76B7EDE",
    "ABF3BE4167C00CCB22F05A3F8237EA4C789FCE7ABAE6E36CBDFFE99A6F9AE601F8A3DF8A1B7526A76B7EDEA373BE4167C01CCB22F05A3F8437EA4C78",
    "AFCE7BBAE6E34CBDF7E99A6FA26602F8A3DF8A5B752EA76B7EBEA6F3BD4167C02CCB22F05A3F8637EA4C78BFCE7CB266E34CBDF7E99A6FA26602F8A3",
    "DF8A9B7536A76B7E3EAF33BD45E7C03CCB22F05A3F8837EA4C78BFCE7CBAE6E32CBDEFE99A6FAAE602F8A3DF8ADB753EA76B7E3EAEB3BC45E7C04CCB",
    "22F05A3F8A37EA4CF81E9DFB64CDC6597ADFD335DF54CD355133017C877E7B4ED7FCBCD619DEA03360B6651178AD1FC71B75267C8FCE7DBAE6E30CBD",
    "E7E99A6FB2669BA45900BE5BBF43A76B7EFE59677783CE80F99645E0B57E206FD499F07D3AFBC99A8D33F49EA76BBEC99A6D8AE600F829FD1E9DAEF9",
    "F9BF3AB31B74069C6159045EEB47F2469D09DFA7B39FAEF998ADF73B5DF34DD77C533407C04FEA37E974CDCFFFEAAC6ED019708E651178AD1FCA1B75",
    "267CAFCE7FB26663B6DEEF74CD375DF34DD00C00BFA1DFA6D3353F7FC6B29ED5C93A03CEB22C02AFF56379A3CE84EFD5F94FD77CCCD47B9DAEF94ED0",
    "8C133403C06FE9F7E974CD7FB3CEE6069D01E7591681D7FAC1BC5167C2F7EB1D4CD66CCCD47B9DAEF94ED08C133403C06FEA37EA74CD7FA3CEE4069D",
    "01675A1681D7FAD1BC5167C2F7EB1D4CD77CCCD2FB9CAEF94ED19C133403C06FEB77EA74CD7F93CEE2069D01E75A1681D7FAE1BC5167C2CFE83D4CD6",
    "6CCCD2FB9CAEF94ED19C133403C00EFAAD3A5DF39FAEF96FD13970B6651178AD1FCF1B7526FC8CDEC374CDC70CBDC7E99AEF24CD3A413300ECA2DFAB",
    "D335FFA99AFB169D03E75B1681D7FA01BD5167C2CFE95D4CD66CCCD07B9CACD94ED3BC133403C04EFACD3A5DF39FA6796FD1397087651178AD1FD11B",
    "7526FC9CDEC574CDC7DE7A7FD335DF699A77826600D84DBF5BA76BFE5334E72D3A07EEB12C02AFF5437AA3CE849FD5FB98ACD9D85BEF6FB2663B5133",
    "4FD00C003BEAB7EB74CD3F5DF3DDA273E02ECB22F05A3FA637EA4CF859BD8FE99A8F3DF5DEA66BBE1335F304CD00B0AB7EBF4ED7FC5335D72D3A07EE",
    "B32C02AFF5837AA3CE849FD73B99ACD9D853EF6DB2663B55734FD00C003BEB37EC74CD3F4DF3DCA033E05ECB22F05A3FAC37EA4CF879BD93E99A8FBD",
    "F4BEA66BBE5335F704CD00B0BB7EC74ED7FC5334C70D3A03EEB62C02AFF5E37AA3CE84DFD17B99ACD9D84BEF6BB2663B59B34FD00C0013F45B76BAE6",
    "DF5DCF7F83CE009645E0B57E606FD499F03B7A2FD3351F7BE83D4DD77C276BF6099A01608A7ECF4ED7FCBBEAB96FD019C01FCB22F05A3FB237EA4CF8",
    "3DBD9BC99A8D3DF49E266BB6D335FF04CD003049BF69A76BFE9DF4ACB7E81CE0DF9645E063FAB1BD4967C1EFEAFD4CD77CFCAEDECF74CD77BAE69FA0",
    "1900A6E977ED74CDBF839EF1169D03FCA76511F8987E706FD259F0FB7A4793351BBFABF73359B3DDA03398A0190026EAB7ED74CDFF9B7AB65B740E50",
    "CB22F071FDF0DEA033600FBDA7E99A8FDFD17B99AEF96ED0194CD00C0053F5FB76BAE6FF0D3DD32D3A0758591681CFE907F864CDCE5E7A5F93351BBF",
    "A3F73259B3DDA27398A0190026EB37EE74CDFF937A965B740EF04F9645E0F3FA213E5133B3A7DEDB64CDC6CFEA7D4CD77CB7E81C26680680E9FA9D3B",
    "5DF3FF849EE1169D033C591681AFE98779B266637FBDC3C99A8D9FD5FB98ACD96ED2594CD00C0027E8B7EE74CDFF9DFADBB7E81CE0956511D8473FF4",
    "9FD5E77187EEC164CDC6CFE83D4CD77C37E92C2668068053F47B77BAE6FF0EFDCD5B740EF011CB22B08F7EEC3FABCFE30EDD83C99A8D9FD17B98ACD9",
    "6ED3794CD00C0027E937EF74CDFF4EFDAD5B740EF051CB22B08F7EF03FABCFE31EDD85C99A8DEFD5F94FD77CB7E93C26680680D3F4BB77BAE67F87FE",
    "C62D3A07F88C6511D8473FFA9FD5E7718FEEC264CDC6F7EAFC276BB61B7526133403C089FAED3B5DF3FFAD3EF7169D03FC8D6511D8473FFE9FD5E771",
    "97EEC364CDC6F7E8DCA76BBE1B7526133403C0A9FAFD3B5DF37F569F778BCE01FED6B208ECA37F003EABCFE32EDD87C99A8DEFD1B94FD66CB7EA5C26",
    "68068093F51B78BAE6FFA83EE7169D037CC5B208ECA37F043EABCFE33EDD89C99A8DF7EABCA76BBE5B752E133403C0E9FA1D3C5DF3BFD2FE5B740EF0",
    "55CB22B08FFE21F8AC3E8FFB7427266B36DEABF39EACD96ED6D94CD00C0037E8B7F074CDFF4FDA778BCE01DE615904F6D13F069FD5E771A7EEC564CD",
    "C67B74CED335DFCD3A9B099A01E016FD1E9EAEF9ABFFFE169D03BCCBB208ECA37F103EABCFE34EDD8BC99A8DF7E89C276BB6DB753E133403C04DFA4D",
    "3C5DF3FF5BFFDD2D3A0778A76511D847FF287C569FC7BDBA1B93351B5FD3F94ED66CFC19CB7A563B6B0680DBF4BB78BADBF3FF5BE700EFB62C02FBE8",
    "1F86CFEAF3B8577763B266E36B3ADFC99A8D3F6359CF6A67CD0070A37E1B4F776BEE7FFB777EF84ECB22B08FFE71F8AC3E8FBB753F266B36FE4EE73A",
    "59B3F12F9DD304CDC0FB74D6DCABBBC19E7A6F9CA9F70EDF655904F6D13F109FD5E771B7EEC764CDC6DFE95C276B36FEA5739AA019789FCE9A7B7537",
    "D857EF8EB3F4BEE13B2D8BC03EFA47E2B3FA3CE88E4CD66C7C4EE73959B3F1BF3AAB099A81F7E9ACB9577783BDF5FE3843EF19BEDBB208ECA37F283E",
    "ABCF83EEC864CDC6E7749E93351BFFABB39AA019789FCE9A7B7537D85FEF90D97ABFF01396C593F5C59BACD9BE4B7F77B266FB2EFDDDC99A8D33F49E",
    "276B363EA6739CACD9F86F9DD704CDC0FB74D6DCABBBC10CBD4766EABDC24F59164FD317EE44CDFC557DFE899AF9ABFAFC13353373F56E276B363EA6",
    "739CACD9F86F9DD704CDC0FB74D6DCABBBC11CBD4BE6E85DC24F5B164FD297EE64CDFEB7FADC9335FBDFEA734FD6ECCCD5BB9DACD978D6F94DD66CFC",
    "5F9DD904CDC0FB74D6DCABBBC12CBD4FF6D73B84DFB02C9EA22FDD0D3A83CFEAF36ED0197C569F7783CE80997AAF93351BCF3ABFC99A8DFFAB339BA0",
    "19789FCE9A7B753798A777CABE7A77F05B96C513F4A5BB4967F1517DCE4D3A8B8FEA736ED2593053EF75B26663AD739BACD958EBDC266806DEA7B3E6",
    "5EDD0D66EABDB29FDE19FCA665F1047DF16ED2597C549F7393CEE2A3FA9C9B7416CCD47B9DACD958EBDC266B36D63AB7099A81F7E9ACB9577783B97A",
    "B7ECA37705BF6D599CAE2FDE8D3A9357DA7FA3CEE495F6DFA83361A6DEEB64CDC67FEBBC266B36FE5967374133F03E9D35F7EA6E305BEF97DFD73B82",
    "1D2C8BD3F5E5BB5167F24AFB6FD499BCD2FE1B7526CCD5BB9DAAB9F86F9DD764CDC63FEBEC266806DEA7B3E65EDD0DE6EB1DF37B7A37B08B6571BABE",
    "8037EA4C5E69FF8D3A9357DA7FA3CE84B97AB793351BFFD2394DD66C3CEBFC266806DEA7B3E65EDD0DCED07BE6E7F54E6027CBE2747D099FB477673D",
    "FB93F6BED2FE27EDDD59CFFEA4BDAFB4FF497B77D6B33F692FB3F57EA76A2EFEA5739AACD978D6F94DD00CBC4F67CDBDBA1B9CA377CDCFE95DC06E96",
    "C5E9FA223E69EFCE7AF627ED7DA5FD4FDABBB39EFD497B5F69FF93F6EEAC677FD25E66EBFD4ED66CB7EB7C266B365EEB0C276806DEA7B3E65EDD0DCE",
    "D2FBE6FBF50E6047CBE2747D199FB477673DFB93F6BED2FE27EDDD59CFFEA4BDAFB4FF497B77D6B33F692FF3F58EA76AAEDB753E93351BAF75861334",
    "03EFD35973AFEE06E7E99DF37D3A7BD8D5B2385D5FC827EDDD59CFFEA4BDAFB4FF497B77D6B33F69EF2BED7FD2DE9DF5EC4FDACB7CBDE3C99AED569D",
    "CB64CDC6C7748E133403EFD35973AFEE0667EABDF37E9D39EC6C599CAE2FE593F6EEAC677FD2DE57DAFFA4BD3BEBD99FB4F795F63F69EFCE7AF627ED",
    "E50CBDE7A99AEB569DCB64CDC6C7748E133403EFD35973AFEE06E7EADDF33E9D35EC6E599CAE2FE693F6EEAC677FD2DE57DAFFA4BD3BEBD99FB4F795",
    "F63F69EFCE7AF627EDE50CBDE7C99AED369DC764CDC6C77596133403EFD35973AFEE0667EBFDF3759D314CB02C4ED797F3497B77D6B33F69EF2BED7F",
    "D2DE9DF5EC4FDAFB4AFB9FB477673DFB93F6728EDEF554CD759BCE63B266E3E33ACB099A81F7E9ACB9577783F37507F83B9D2B4CB22C4ED797F4497B",
    "77D6B33F69EF2BED7FD2DE9DF5EC4FDAFB4AFB9FB477673DFB93F6728EDEF564CD768BCE61B266E3733ACF099A81F7E9ACB95777833B740FF89CCE13",
    "A65916A7EB8BFAA4BD3BEBD99FB4F795F63F69EFCE7AF627ED7DA5FD4FDABBB39EFD497B394BEF7BAAE6BA45E73059B3F1399DE704CDC0FB74D6DCAB",
    "BBC13DBA0B7C4CE708132D8BD3F5657DD2DE9DF5EC4FDAFB4AFB9FB477673DFB93F6BED2FE27EDDD59CFFEA4BD9CA5F73D59B39DAEF9276B363EAF33",
    "9DA019789FCE9A7B7537B84BF781679D1F4CB52C4ED717F6497B77D6B33F69EF2BED7FD2DE9DF5EC4FDAFB4AFB9FB477673DFB93F6729EDEF954CD75",
    "BAE69FAAB9F83B9DEB04CDC0FB74D6DCABBBC17DBA13AC756E30D9B2385D5FDA27EDDD59CFFEA4BDAFB4FF497B77D6B33F69EF2BED7FD2DE9DF5EC4F",
    "DACB797AE79335DBA99A7BB266E3EF74AE133403EFD35973AFEE0677EA5EF0DF3A2F986E599CAE2FEE93F6EEAC677FD2DE57DAFFA4BD3BEBD99FB4F7",
    "95F63F69EFCE7AF627EDE54CBDF7A99AEB54CD3D5573F1F73ADB099A81F7E9ACB95777837B7537F897CE094EB02C4ED797F7497B77D6B33F69EF2BED",
    "7FD2DE9DF5EC4FDAFB4AFB9FB477673DFB93F672A6DEFB64CD769AE69DACD9F87B9DED04CDC0FB74D6DCABBBC1DDBA1FB7EB7CE014CBE2747D819FB4",
    "77673DFB93F6BED2FE27EDDD59CFFEA4BDAFB4FF497B77D6B33F692FE7EADD4FD55CA769DEA99A8BAFE97C276806DEA7B3E65EDD0DE88EDCAA738193",
    "2C8BD3F5257ED2DE9DF5EC4FDAFB4AFB9FB477673DFB93F6BED2FE27EDDD59CFFEA4BD9CAB773F59B39DA239276B36BEA6F39DA019789FCE9A7B7537",
    "E08FEEC96D3A0F38CDB2385D5FE427EDDD59CFFEA4BDAFB4FF497B77D6B33F69EF2BED7FD2DE9DF5EC4FDACBD97AFF5335D7299A73AAE6E2EB3AE309",
    "9A81F7E9ACB9577703FEADBB728BCE014EB42C4ED797F9497B77D6B33F69EF2BED7FD2DE9DF5EC4FDAFB4AFB9FB477673DFB93F672B6DEFF64CD365D",
    "F34DD66C7C5D673C4133F03E9D35F7EA6EC07FEABE9CAEF9E154CBE2747DA19FB477673DFB93F6BED2FE27EDDD59CFFEA4BDAFB4FF497B77D6B33F69",
    "2FE7EB0E4CD55CD335DF54CDC57B74CE133403EFD35973AFEE06FCD13DB9496701275A16A7EBCBFCA4BD3BEBD99FB4F795F63F69EFCE7AF627ED7DA5",
    "FD4FDABBB39EFD497B395F7760B2669BAAB9266B36DEA3739EA019789FCE9A7B7537A03B72ABCE054EB22C4ED797F8497B77D6B33F69EF2BED7FD2DE",
    "9DF5EC4FDAFB4AFB9FB477673DFB93F67287EEC154CD3555734DD55CBC4F673D4133F03E9D35F7EA6E70B7EEC7ED3A1F38C5B2385D5FE027EDDD59CF",
    "FEA4BDAFB4FF497B77D6B33F69EF2BED7FD2DE9DF5EC4FDACB1DBA079335DB34CD3359B3F13E9DF504CDC0FB74D6DCABBBC1BDBA1BFC4BE704275816",
    "A7EBCBFBA4BD3BEBD99FB4F795F63F69EFCE7AF627ED7DA5FD4FDABBB39EFD497BB9477761AAE69AA679A66A2EDEABF39EA019789FCE9A7B7537B853",
    "F782FFD679C174CBE2747D719FB477673DFB93F6BED2FE27EDDD59CFFEA4BDAFB4FF497B77D6B33F692F77E93E4CD55C5334C764CDC67B75DE133403",
    "EFD35973AFEE06F7E94EB0D6B9C164CBE2747D699FB477673DFB93F6BED2FE27EDDD59CFFEA4BDAFB4FF497B77D6B33F692F77E93E4CD55C5334C754",
    "CDC5FB75E6133403EFD35973AFEE0677E93EF0ACF383A996C5E9FAC23E69EFCE7AF627ED7DA5FD4FDABBB39EFD497B5F69FF93F6EEAC677FD25EEED3",
    "9D98AAB976D7F34FD66CBC5F673E4133C0EEBAC3133403F7E82EF0319D234CB42C4ED797F5497B77D6B33F69EF2BED7FD2DE9DF5EC4FDAFB4AFB9FB4",
    "77673DFB93F6729FEEC454CDB5BB9E7FAAE6E27B74EE133403ECAE3B3C41337087EE019FD799C224CBE2747D499FB477673DFB93F6BED2FE27EDDD59",
    "CFFEA4BDAFB4FF497B77D6B33F692F77EA5E4CD55CBBEAB9276B36BE47E73E4133C0EEBAC3133403E7EB0EF0F73A5B9862599CAE2FE893F6EEAC677F",
    "D2DE57DAFFA4BD3BEBD99FB4F795F63F69EFCE7AF627EDE54EDD8BA99A6B573DF754CDC5F7E9EC276806D85D77788266E06CBD7FBEAE33860996C5E9",
    "FA723E69EFCE7AF627ED7DA5FD4FDABBB39EFD497B5F69FF93F6EEAC677FD25EEED5DD98AAB976D3F34ED66C7C9FCE7E826680DD7587276806CED5BB",
    "E77D3A6BD8DDB2385D5FCC27EDDD59CFFEA4BDAFB4FF497B77D6B33F69EF2BED7FD2DE9DF5EC4FDACBBDBA1B5335D76E7ADEA99A8BEFD5F94FD00CB0",
    "BBEEF004CDC0997AEFBC5F670E3B5B16A7EB4BF9A4BD3BEBD99FB4F795F63F69EFCE7AF627ED7DA5FD4FDABBB39EFD497BB95BF763AAE6DA45CF3959",
    "B3F1BD3AFF099A0176D71D9EA019384BEF9BEFD5F9C3AE96C5E9FA423E69EFCE7AF627ED7DA5FD4FDABBB39EFD497B5F69FF93F6EEAC677FD25EEED6",
    "FD98AAB976D1734ED55C7CBFDEC104CD00BBEB0E4FD00C9CA377CDCFE95DC06E96C5E9FA22DEA83379A5FD37EA4C5E69FF8D3A13E88E4CD55CBFADE7",
    "9BACD9F87EBD83099A0176D71D9EA0193843EF999FD73B819D2C8BD3F525BC5167F24AFB6FD499BCD2FE1B7526D01D99AAB97E5BCF375573F1337A0F",
    "133403ECAE3B3C4133305FEF98DFD3BB815D2C8BD3F505BC55E7F2A4BD37EA4C5E69FF8D3A13F8A37B325573FD969E6BAAE6E2E7F42E266806D85D77",
    "78826660B6DE2FBFAF77043B58164FD017F0569DCB93F6DEA4B3F8A83EE7269D05FC5B7765AAE6FA2D3DD754CDC5CFE95D4CD00CB0BBEEF004CDC05C",
    "BD5BF6D1BB82DFB62C9EA02FDFCD3A9B7FD2BE9B74161FD5E7DCA4B380FFD47D99AAB97E5ACF335573F1B37A1F133403ECAE3B3C41333053EF95FDF4",
    "CEE0372D8BA7E8CB77B3CEE69FB4EF069DC167F57937E80CA0BA335335D74FEB79A66A2E7E56EF63826680DD7587276806E6E99DB2AFDE1DFC9665F1",
    "247DF96ED6D9FC93F69DACD9FF569F7BB266877FD2DD99AAB97E4ACF315573F1F37A27133403ECAE3B3C4133304BEF93197A8FF0D396C5D3F4C5BB59",
    "67F34FDA77A266FEAA3EFF44CD0C4FBA3F5335D74FE939A66A2E7E5EEF64826680DD7587276806E6E85D324BEF137ED2B278B2BE80B7EA5C9EB477B2",
    "66FB2EFDDDC99A0D3EA3FB3455737DB7FEFE54CDC5EFE8BD4CD00CB0BBEEF004CDC00CBD4766EABDC24F5916D9433F14EFD6DFFB6EFDFDCFEAF36ED1",
    "397C569F073FA9FB3855737DB7FEFE54CDC5EFE8BD4CD00CB0BBEEF004CDC0FE7A87CCD6FB859FB02CB28F7E28DEADBFF79DFADB9FD5E7DDA273F8AC",
    "3E0F7E5A7772AAE6FA2EFDDDA99A8BDFD3BB99A0196077DDE1099A81BDF5FE3843EF19BEDBB2C85EFAA178B7FEDE77E9EF7E569F778BCEE1B3FA3CF8",
    "69DDC9A99AEBBBF477A76A2E7E4FEF66826680DD7587276806F6D47BE33CBD73F84ECB22FBE987E2DDFA7BDFA1BFF9597DDE2D3A87CFEAF3E037742F",
    "A76AAE77EBEF4DD55CFCAEDECF04CD00BBEB0E4FD00CECA777C6D97AFFF01D9645F6D48FC4BBF5F7DEADBFF7597DDE2D3A87CFEAF3E037742FA76AAE",
    "77EBEF4DD55CFCAEDECF04CD00BBEB0E4FD00CECA5F7C51DBA07F06ECB22FBEA47E2DDFA7BEFD4DFFAAC3EEF169DC367F579F05BBA9B5335D7BBF477",
    "A66A2E7E5FEF68826680DD7587276806F6D1BBE22EDD0778A76591BDF523F16EFDBD77E9EF7C569F778BCEE1B3FA3CF84DDDCF899AE95DFA3B533517",
    "BFAF77344133C0EEBAC31334037BE83DDDC40CFED7BF6701EFB62CB2BF7E24BE437FF3ABFAFCCFEAF36ED1397C569F07BFA9FB3955737D559F3F5573",
    "B187DED304CD00BBEB0E4FD00CFCBEDED12D3A877FEBBFBB4DE701EFB02C32473F14EFD6DFFB8A3EFBB3FABC5B740E9FD5E7C16FEB8E4ED44C5FD5E7",
    "4FD55CECA1F7344133C0EEBAC3133403BFABF7738BCEA1FAEF6FD379C0572D8BCCD20FC5BBF5F7FE569FFB597DDE2D3A87CFEAF3E0B77547A76AAEBF",
    "D5E74ED55CECA377354133C0EEBAC3133403BFA777738BCEE19FB4EF369D077CC5B2C83CFD50BC5B7FEF6FF4999FD5E7DDA273F8AC3E0F76D03D9DA8",
    "99FE569F3B5573B18FDED504CD00BBEB0E4FD00CFC8EDECB2D3A8757DA7FA3CE04FEC6B2C84CFD48BC5B7FEFB3FABCCFEAF36ED1397C569F073BE89E",
    "4ED55C9FD5E74DD55CECA5F7354133C0EEBAC31334033FAF77728BCEE1A3FA9C1B7526F059CB2273F523F16EFDBDCFE8B33EABCFBB45E7F0597D1EEC",
    "A2BB3A51337D569F375573B197DED704CD00BBEB0E4FD00CFCACDEC72D3A87BFD167DEA6F380CF581699AD1F8977EBEF7D549FF3597DDE2D3A87CFEA",
    "F36017DDD5A99AEBA3FA9CA99A8BFDF4CE266806D85D77788266E0E7F42E6ED1397C459F7D9BCE033E6A5964BE7E24DEADBFF7117DC667F579B7E81C",
    "3EABCF839D745F276AA68FEA73A66A2EF6D33B9BA0196077DDE1099A819FD17BB845E7F00EFD8DDB741EF011CB2267E847E23BF4379FB4F7B3FABC5B",
    "740E9FD5E7C14EBAAF5335D72BED9FAAB9D853EF6D826680DD7587276806BE57E77F93CEE29DFA5BB7E93CE0956591B3F443F16EFDBD7FD2BECFEAF3",
    "6ED1397C569F07BBE9CE4ED44CAFB47FAAE6624FBDB7099A0176D71D9EA019F83E9DFD2D3A87EFD4DFBE4DE701FF6459E43CFD48DCAA73F92EFDDDC9",
    "9A0DDEAD3B375573FD93F64DD55CECAB77374133C0EEBAC3133403DFA373BF45E7F0137A86DB741EB0B22C72A67E246ED7F97C559F7FA2668677E9AE",
    "4DD44CFFA47D1335137BEBFD4DD00CB0BBEEF004CDC0FB75E6B7E81C7E52CF729BCE036A59E45CFD48DCAEF3F95B7DEEC99A1DDEA17B36557355FFFD",
    "54CDC5DE7A7F133403ECAE3B3C4133F05E9DF72D3A87DFD033DDA6F380FFB42C72B67E246ED7F97C569F7783CE00DEA17B36513355FFFD44CDC4FE7A",
    "87133403ECAE3B3C4133F03E9DF52D3A87DFD4B3DDA6F3807F5B16395F3F12B7EB7C3EAACFB94967015FD51D9BAAB9FEADFF6EAAE6627FBDC3099A01",
    "76D71D9EA019788FCEF9169DC32E7ACE9B7416F0C7B2C81DFA91B85967F3517DCE4D3A0B7887EED944CDF46FFD7713351333F41E276806D85D777882",
    "66E0EB3AE35B740EBBE9796FD259C0B2C83DFA91B85967F34AFB6FD499C05775C7A6BA251733F41E276806D85D77788266E06B3ADF5B740EBBEAB96F",
    "D37970AF6591FBF42371A3CEE495F6DFA8338177E89E4D744326E6E85D4ED00CB0BBEEF004CDC0DFEB6C6FD139ECAEE7BF4DE7C19D9645EED30FC48D",
    "3A9357DA7FA3CE04DEA17B36D5A97998A777394133C0EEBAC31334037FA773BD4167304DF3DCA4B3E03ECB22F7E9C7E1497B77D6B33F69EF2BED7FD2",
    "DE9DF5EC4FDA0BEFD25D9BE8C42CCCD4FB9CA0196077DDE1099A81CFEB4C6FD0194CD55C37E92CB8CBB2C87DFA6178D2DE9DF5EC4FDAFB4AFB9FB477",
    "673DFB93F6C2BB74D7F85DBD1F66E97D4ED00CB0BBEEF004CDC0E7749E37E80CA66BBE9B7416DC6359E43EFD283C69EFCE7AF627ED7DA5FD4FDABBB3",
    "9EFD497BE19DBA6FFC8EDE0BF3F44E276806D85D77788266E0633AC75B740EA768CE9B7416DC6159E43EFD203C69EFCE7AF627ED7DA5FD4FDABBB39E",
    "FD497BE19DBA6FFC8EDE0BF3F44E276806D85D77788266E0B5CEF0169DC3699AF7369D07675B16B94F3F044FDABBB39EFD497B5F69FF93F6EEAC677F",
    "D25E78B7EE1C3FABF7C14CBDD7099A0176D71D9EA01978D6F9DDA2733859B3DFA4B3E05CCB22F7E947E0497B77D6B33F69EF2BED7FD2DE9DF5EC4FDA",
    "0BDFA17BC7CFE95D3053EF758AE6809D757F276806FE5967778BCEE1069DC14D3A0BCEB42C729F7E009EB477673DFB93F6BED2FE27EDDD59CFFEA4BD",
    "F01DBA77FC8CDE0373F56EA7680ED859F777826660AD73BB45E77093CEE2269D05E75916B94F5FFE27EDDD59CFFEA4BDAFB4FF497B77D6B33F692F7C",
    "97EE1EDFAF77C05CBDDB499A0576D5DD9DA019F8BF3AB35B740E37EA4C6ED25970966591FBF4C57FD2DE9DF5EC4FDAFB4AFB9FB477673DFB93F6C277",
    "E9EEF1BD3A7F66EBFD4ED44CB09BEEEC04CDC07FEBBC6ED019F0672CEB599DAE73E01CCB22F7E94BFFA4BD3BEBD99FB4F795F63F69EFCE7AF627ED85",
    "EFD4FDE3FB74F6CCD6FB05F8A3DF0AFE57677583CE80FFD559DDA273E00CCB22F7E90BFFA4BD3BEBD97F4BCFB5B39EFD497BE13B75FFF81E9D3BF3F5",
    "8E01FEE8B7827FE99C6ED019F07F756637E92C986D59E43E7DD19FB477673DFB6FE9B976D6B33F692F7CB7EE20EFD799335FEF18E08F7E2BF83396F5",
    "AC4ED619F0CF3ABB9B7416CCB52C729FBEE44FDABBB39EFDB7F45C3BEBD99FB417BE5B7790F7EABC3943EF19E08F7E2B6ED7F9DCA033E0B5CEF0269D",
    "05332D8BDCA72FF893F6EEAC67FF2D3DD7CE7AF627ED859FD03DE47D3A6BCED07B06F8A3DF8A9B753637E80CF89CCEF3169D03F32C8BDCA72FF793F6",
    "EEAC67FF2D3DD7CE7AF627ED859FD03DE43D3A67CED1BB06F8A3DF8A5B752E37E80CF83B9DEB2D3A07665916B94F5FEC27EDDD59CFFE5B7AAE9DF5EC",
    "4FDA0B3FA5BBC8D775C69CA3770DF047BF15B7E93C6ED139F0359DEF2D3A07E65816B94F5FEA27EDDD59CFFE5B7AAE9DF5EC4FDA0B3FA5BBC8D774BE",
    "9CA5F70DF047BF1537E92C6ED139F01E9DF34D3A0BF6B72C729FBECC4FDABBB39EFDB7F45C3BEBD99FB4177E52F791BFD3B972A6DE3B70B77E236ED2",
    "59DCA033E07B74EEB7E81CD8DBB2C87DFA223F69EFCE7AF6DFD273EDAC677FD25EF849DD47FE4EE7CA997AEFC0DDFA8DB845E77083CE80EFD5F9DFA2",
    "73605FCB22F7E94BFCA4BD3BEBD97F4BCFB5B39EFD497BE1A77527F99CCE9373F5EE81BBF51B7183CEE0069D013FA3F7708BCE813D2D8BDCA72FF093",
    "F6EEAC67FF2D3DD7CE7AF627ED859FD69DE4733A4FCED5BB07EED66FC4E99AFF069D013FABF7718BCE81FD2C8BDCA72FEF93F6EEAC67FF2D3DD7CE7A",
    "F627ED85DFD0BDE4633A47CED6FB07EED66FC4C99AFD069D01BFA3F7728BCE81BD2C8BDCA72FEE93F6EEAC67FF2D3DD7CE7AF627ED85DFD0BDE4633A",
    "47CED71D00EED46FC3C99AFD069D01BFAF777483CE807D2C8BDCA72FED93F6EEAC67FF2D3DD7CE7AF627ED85DFD2DDE459E7C71DBA07C09DFA6D3855",
    "73DFA033601FBDAB5B740EFCBE6591FBF4657DD2DE9DF5ECBFA5E7DA59CFFEA4BDF05BBA9B3CEBFCB843F700B853BF0D276AE61B7406ECA777768BCE",
    "81DFB52C729FBEA84FDABBB39EFDB7F45C3BEBD99FB4177E53F793B5CE8DBB741F80BBF49B70A266BE4167C0BE7A77B7E81CF83DCB22F7E94BFAA4BD",
    "3BEBD99FB4F795F63F69EFCE7AF627ED85DFD4FD64AD73E32EDD07E02EFD269CA6794FD7FCCCD1BBBC4167C0EF5816B94F5FD027EDDD59CFFEA4BDAF",
    "B4FF497B77D6B33F692FFCB6EE28FFADF3E24EDD0BE00EFD169CA6794FD7FCCCD33BBD4167C0CF5B16B94F5FCE27EDDD59CFFEA4BDAFB4FF497B77D6",
    "B33F692FFCB6EE28FFADF3E24EDD0BE00EFD169CA2396FD0193057EFF6069D013F6B59E43E7D319FB477673DFB93F6BED2FE27EDDD59CFFEA4BDB083",
    "EE29FFD23971B7EE0770B67E034ED19C37E80C98AF777C8BCE819FB12C729FBE904FDABBB39EFD497B5F69FF93F6EEAC677FD25ED84577953F6359CF",
    "8A3B753F80B3F51B708266BC4167C0397AD7B7E81CF87ECB22F7E9CBF8A4BD3BEBD99FB4F795F63F69EFCE7AF627ED855D74576FD7F9C01FDD13E04C",
    "7DF74FD08C37E80C3853EFFD069D01DF6B59E43E7D119FB477673DFB93F6BED2FE27EDDD59CFFEA4BDB093EEEBCD3A1BF8A37B029CA9EFFE74CD7783",
    "CE80B3F5FE6FD019F07D9645EED397F0469DC92BEDBF5167023BE9BEDEAA7381FFD47D01CED2777EBAE6BB4167C01DBA0737E80CF81ECB22F7E90B78",
    "A3CEE495F6DFA83381DD74676FD379C04AF7063843DFF5E99AEF069D0177E93EDCA033E0FD9645EED397EF469DC92BEDBF5167023BEADEDEA4B3807F",
    "D2DD0166EB3B3E5DF39DAEF9B95BF7E374CDCF7B2D8BDCA92FDF4D3A8B8FEA736ED259C0AEBABBB7E81CE095EE103053DFEDE99AEF74CD0F7F744F6E",
    "D019F01ECB2277EA4B7793CEE2A3FA9C9B7416B0B3EEEFE99A1F3EAABB04CCD2777ABAE63B5DF3C37FEABEDCA033E0EB9645EED597EE069DC167F579",
    "37E80C6082EEF1A99A1B3EAB3B05CCD07779BAE63B5DF3C34AF7E6069D015FB32C72B7BE74276BF6BFD5E79EACD96192EEF3699A17BEA2FB05ECA9EF",
    "EE099AF174CD0F4FBA3F37E80CF87BCB22F4A53B51337F559F7FA26686A9BADB2768467887EE19B097BEB32768C6D3353F7C5477E974CDCFDF5916E1",
    "3FF5E59BACD9BE4B7F77B266835374D7A76A2EF80EDD3BE077F51D3D4133DEA03380CFEA4E9DAEF9F9BC6511006ED1FFB898A239E027740F819FD577",
    "F214CD7983CE00FE5677EB069D011FB72C02C06DFA1F17BBEAB9E1B7743781EFD177EF34CD7B83CE00BEAA3B7683CE808F591601E066FD8F8CDFD6F3",
    "C16EBAB3C0D7F41D3B55739FAEF9E1DDBA73A76B7E5E5B1601807FE97F6CFC949E0326E93E03CFFA0EDDA033385DF3C377E9EE9DAEF979B62C0200CF",
    "FA1F207FABCF859375FFE1367D276ED5B99CAEF9E1BB75074FD7FCFCB365110000000038C7B208000000009C63590400000000CEB12C0200000000E7",
    "58160100000080732C8B00000000C039964500000000E01CCB2200000000708E65110000000038C7B208000000009C63590400000000CEB12C020000",
    "0000E758160100000080732C8B00000000C039964500000000E01CCB2200000000708E65110000000038C7B208000000009C63590400000000CEB12C",
    "0200000000E758160100000080732C8B00000000C039964500000000E01CCB2200000000708E65110000000038C7B208000000009C63590400000000",
    "CEB12C0200000000E758160100000080732C8B00000000C039964500000000E01CCB2200000000708E65110000000038C7B208000000009C63590400",
    "000000CEB12C0200000000E758160100000080732C8B00000000C039964500000000E01CCB2200000000708E65110000000038C7B208000000009C63",
    "590400000000CEB12C0200000000E758160100000080732C8B00000000C039964500000000E01CCB2200000000708E65110000000038C7B208000000",
    "009C63590400000000CEB12C0200000000E758160100000080732C8B00000000C039964500000000E01CCB2200000000708E65110000000038C7B208",
    "000000009C63590400000000CEB12C0200000000E758160100000080732C8B00000000C039964500000000E01CCB2200000000708E65110000000038",
    "C7B208000000009C63590400000000CEB12C0200000000E758160100000080732C8B00000000C039964500000000E01CCB2200000000708E65110000",
    "000038C7B208000000009C63590400000000CEB12C0200000000E758160100000080732C8B00000000C039964500000000E01CCB2200000000708E65",
    "110000000038C7B208000000009C63590400000000CEB12C0200000000E758160100000080732C8B00000000C039964500000000E01CCB2200000000",
    "708E65110000000038C7B208000000009C63590400000000CEB12C0200000000E758160100000080732C8B00000000C039964500000000E01CCB2200",
    "000000708E65110000000038C7B208000000009C63590400000000CEB12C0200000000E758160100000080732C8B00000000C039964500000000E01C",
    "CB2200000000708E65110000000038C7B208000000009C63590400000000CEB12C0200000000E758160100000080732C8B00000000C0399645000000",
    "00E01CCB2200000000708E65110000000038C7B208000000009C63590400000000CEB12C0200000000E75816010000008053FCCFFFFBFF00D7348573",
    "D832B55E0000000049454E44AE426082",
    0
};



const char *VGX_BUILTIN_IMAGE_logo_w_b_png[] = {
    "89504E470D0A1A0A0000000D4948445200000500000002080802000000BE72D443000000017352474200AECE1CE90000000467414D410000B18F0BFC",
    "610500000009704859730000761C0000761C01A7C278EA00002E6049444154785EEDD73192243910A6575E80C24A7BFF1B52A24481B3366BC3E11739",
    "5DDD55990120FC993D1188FCDD015499FF1FFFE7FFF89F000000F078066000000046300003000030820118000080110CC00000008C60000600006004",
    "033000000023188001000018C1000C0000C008066000000046300003000030820118000080110CC00000008C60000600006004033000000023188001",
    "000018C1000C0000C008066000000046300003000030820118000080110CC00000008C60000600006004033000000023188001000018C1000C0000C0",
    "08066000000046300003000030820118000080110CC00000008C60000600006004033000000023188001000018C1000C0000C0080660000000463000",
    "03000030820118000080110CC00000008C60000600006004033000000023188001000018C1000C0000C0080660000000463000030000308201180000",
    "80110CC00000008C60000600006004033000000023188001000018C1000C0000C008066000000046300003000030820118000080110CC00000008C60",
    "000600006004033000000023188001000018C1000C0000C008066000000046300003000030820118000080110CC00000008C60000600006004033000",
    "000023188001000018C1000C0000C008066000000046300003000030820118000080110CC00000008C60000600006004033000000023188001000018",
    "C1000C0000C008066000000046300003000030820118000080110CC00000008C60000600006004033000000023188001000018C1000C0000C0080660",
    "00000046300003000030820118000080110CC00000008C60000600006004033000000023188001000018C1000C0000C0080660000000463000030000",
    "30820118000080110CC00000008C60000600006004033000000023188001000018C1000C0000C008066000000046300003000030820118000080110C",
    "C00000008C60000600006004033000000023188001000018C1000C0000C008066000000046300003000030820118000080110CC00000008C60000600",
    "006004033000000023188001000018C1000C0000C008066000000046300003000030820118000080110CC00000008C60000600006004033000000023",
    "188001000018C1000C0000C008066000000046300003000030820118000080110CC00000008C60000600006004033000000023188001000018C1000C",
    "0000C008066000000046300003000030820118000080110CC00000008C60000600006004033000000023188001000018C1000C0000C0080660000000",
    "46300003000030820118000080110CC00000008C60000600006004033000000023188001000018C1000C0000C0080660000000463000030000308201",
    "18000080110CC00000008C60000600006004033000000023188001000018C1000C0000C008066000000046300003000030820118000080110CC00000",
    "008C60000600006004033000000023188001000018C1000C0000C008066000000046300003000030820118000080110CC00000008C60000600006004",
    "033000000023188001000018C1000C0000C008066000000046300003000030820118000080110CC00000008C60000600006004033000000023188001",
    "000018C1000C0000C008066000000046300003000030820118000080110CC00000008C60000600006004033000000023188001000018C1000C0000C0",
    "08066000000046300003000030820118000080110CC00000008C60000600006004033000000023188001000018C1000C0000C0080660000000463000",
    "03000030820118000080110CC00000008C60000600006004033000000023188001000018C1000C0000C008066018EDFFFABFFF9F6D252A8F9183DE4A",
    "A21E2A45C1B67275DF2BBF758494C033E4948F90121EC6000CA3E5EFDD6E929607C811EF26698F9012E020B9CC6F979F3B424AE07439DF23A484E731",
    "00C374F9ABB79544E50172C45B49D49D25391C2A17FB13F28B4748099C2B277B8494F0480660982E7FF87693B41C2D87BB9BA4DD5002C3E972C33F24",
    "3F7A8494C08972A64748094F650006B6FE1B9DA81C2D87BB9544DD4AA2C263E4AA7F4E7EF7082981B3E4348F90121ECC000CECFE673A6939548E7537",
    "49BB89848487C985FFA8FCF4115202A7C8391E21253C9B0118F85FF277702B89CAA172AC5B49D41D24213C52AEFDA7E5D78F9012D85C8EEF14A9E2F1",
    "0CC0C0FF923F85BB495A8E9303DD4DD22E9778F054B9F937488023A404B695833B45AA98C0000CFC6FF983B89544E53839D0AD24EA5AC906CF96FB7F",
    "8F6438424A604339B253A48A210CC0C0FF96BF89BB495A0E92A3DC4DD22E9460F0787902B7498C23A404B692C33A45AA98C3000CFC7FF297712B89CA",
    "4172945B49D485120C26C82BB853921C2125B0891CD31152C2340660E0FF277F22B792A81C2187B89BA45D25A960883C849B25CC115202CBE5808E90",
    "12063200B358DEE43E92738EF4612B89CA1172885B49D455920AE6C85BB85FF21C2125B0508EE60829612603306BE435EE2CC9274807B692A86C2EC7",
    "B79BA45D229160943C872512E90829812572284748096319805920AF717FC9FF78297F2B89CAE6727C5B49D4251209A6C98B5825A98E9012B8598EE3",
    "08296132033077CB6B3C45AA78BC94BF9544655B39B8DD24ED128904D3E4452C9460474809DC2607718494309C01985BE5359E25B53C5B6ADF4AA2B2",
    "AD1CDC56127589448281F228D64AB623A4043E2DFD3F45AAC000CCADF220CF925A1E2FE56F2551D9508E6C3749BB4422C1407914CB25DE1152029F93",
    "CE9F2255F0170330F7C9833C512A7AB6D4BE9544654339B2AD24EA12890433E55DEC20098F9012F884F4FC14A982BF1980B94FDEE48952D1E3A5FCAD",
    "242A5BC961ED26699748249829EF621309798494C07BA5DBA74815FCC300CC7DF22C4F948A1E2FE56F2551D94A0E6B2B89BA4422C158791AFB48CE23",
    "A404DE257D3E45AAE0DF0CC0DC272FF344A9688274602B89CA26724CBB49DA251209C6CAD3D84AA21E2125F073E9F02952056100E63E799C274A4513",
    "A4035B4954369163DA4AA22E914830595EC76E92F60829819F486F4F912AB83200739FBCCF13A5A221D284AD242ACBE580B692A8AB24154C96D7B1A1",
    "043E424AE07BD2D553A40A5E3200739F3CD113A5A221D284AD242ACBE580B692A8AB24154C96D7B1A7643E424AE04FA59F474809FC820198FBE4A19E",
    "2815CD913E6C2551592847B395445D25A960B83C906D25F6115202BF2F9D3C424AE0D70CC0DC276FF544A9688EF4612B89CA42399AAD24EA2A4905C3",
    "E581EC2CC98F9012F8521A788A54C1970CC0DC27CFF544A96894B4622B89CA123994AD24EA420906C3E5816C2EE18F9012F885B4EE14A982DF6100E6",
    "3E79B1274A45A3A4155B495496C8A16C2551174A30182E0F647FC97F8494C04B69DA295205BFC900CC7DF2684F948AA64937B692A8DC2CC7B195445D",
    "2BD960B83C9023A48423A40422ED3A45AAE0F71980B94FDEED8952D134E9C65612959BE538B692A80B25189037728A54718494C03FD2A853A40AFE88",
    "0198FBE4E99E28150D94866C2551B94D0E622B89BA56B2017923074921474809FC252D3A45AAE04F1980B94F5EEF8952D14069C8561295DBE420B692",
    "A86B251B90377296D4728494305C9A738A54C1371880B94F1EF08952D14CE9C95612951BE408B692A8CB251E9037729C947384943056DA728A54C1F7",
    "1880B94FDEF08952D14CE9C95612951BE408B692A8CB251E903772A25474849430501A728A54C1B71980B94F9EF18952D15869CB5612958F4AF3B792",
    "A83B4842206FE45029EA08296194B4E214A9829F3000739FBCE413A5A2C9D2997D24271F95E66F255177908440DEC8B952D71152C204E9C04152083F",
    "6400E63E79CC274A4593A5335B49543E246DDF4AA26E222181BC91A3A5B423A484674BED074921FC9C0198FBE43D9F28150D97E6EC2339F990B47D2B",
    "89BA8984DC4112023F91F7758494F054A9FA14A982773100739FBCEA13A5A2E1D29CAD242A6F97866F2551F7919C6B251BF0167968474809CF937A4F",
    "912A78230330F7C9C33E512A22FDD94772F27669F85612751FC9B95082016F94E7768494F024A9F414A982F73200739FBCED13A522D29FAD242A6F94",
    "566F2551B792A80B2518F05E7971474809CF901A4F912A783B0330F7C9F33E512AE22F69D13E9293374AABB792A85B49D455920AF884BCBB23A484D3",
    "A5BA53A40A3EC100CC7DF2C24F948AF84B5AB49544E52DD2E4AD24EA6E927695A4023E244FEF0829E15CA9EB14A9820F3100739F3CF213A522FE962E",
    "ED2339798B34792B89BA9BA45D25A980CFC9EB3B424A38512A3A45AAE0730CC0DC27EFFC44A988BFA54B5B49547E28EDDD4AA26E288157492AE0A3F2",
    "008F9012CE925A4E912AF8280330F7C9533F512AE21F69D43E92931F4A7BB792A81B4AE055920AF8B4BCC123A48423A48483A4103ECD00CC7DF2DA4F",
    "948AF8471AB59544E5DBD2D8AD24EA9E927995A4026E9067788494B0B9843F480AE1060660EE93077FA254C4BFA557FB484EBE2D8DDD47726E2BB157",
    "492AE01E7989474809DB4AEC83A410EE6100E63E79F3274A45FC5B7AB59544E51BD2D2AD24EAB6127B95A4026E93C7788494B0A1043E480AE1360660",
    "EE93677FA25444A45DFB484EBE212DDD4772EE2CC957492AE04E798F4748095B49D483A410EE6400E63E79F9274A4544DAB59544E58FA4995B49D49D",
    "25F92A4905DC2C4FF20829611309799014C2CD0CC0DC278FFF44A988AB746C1FC9C91F4933F7919C9B4BF855920AB85F5EE51152C27289778A54C112",
    "0660EE933F01274A455CA5635B49547E53DAB89544DD5CC2AF9254C01279984748090B25D8295205AB1880B94FFE0A9C2815F1529AB68FE4E437A58D",
    "FB48CEFD25FF2A4905AC92B7798494B044229D2255B0900198FBE40FC18952112FA5695B4954BE94066E2551F797FCAB2415B0509EE71152C2CD12E6",
    "14A982B50CC0DC277F0B4E948AF82FE9DB3E92932FA581FB48CE23A48455920A582B2FF40829E11EC9709014C27206606E95BF0867492DFC425AB795",
    "44E517D2BAAD24EA1152C22A49052C97477A8494F069F9F583A410766000E656F9A37096D4C2AFA57BFB484E7E21ADDB47729E2255AC9254C00EF24E",
    "8F90123E27BF7B9014C2260CC0DC2D7F1A4E912AF8521AB89544E5A5346D2B897A8A54B14A52019BC8533D424AF884FCE2415208FB3000B340FE40EC",
    "2FF9F94D69E33E929397D2B47D24E74152C82A4905EC23AFF50829E1BDF25B0749216CC500CC1AF933B1B324E78FA499FB484E22EDDA4AA21E2485AC",
    "9254C056F2608F9012DE25BF729014C26E0CC02C963F19FB484EBE275DDD47721269D73E92F32CA96595A4027693377B8494F073F9FE4152081B3200",
    "73AAFCB9F952B6739B1CC43E92937FA4515B49D4B3A49655920AD8509EED1152C24FE4CB074921ECC900CCA9F217E74BD9CE6D7210FB484EFE9146ED",
    "23398F937256492A604F79B9474809DF936F1E2485B02D0330A7CA1F9D2F653B77CA59EC2339F94B5AB495443D4ECA5925A9806DE5F11E2125FCA97C",
    "ED2029849D19803955FEEE7C29DBB953CE621FC9C95FD2A27D24E78952D12A4905EC2CEFF70829E137E523074921ECCF00CCA9F2D7E74BD9CECD721C",
    "FB48CEE1D29CAD24EA8952D12A49056C2E4FF80829E14BD97E9014C2110CC09C2A7F80BE94EDDC2CC7B18FE41C2ECDD947721E2A45AD9254C0FEF28A",
    "8F90127E211B0F92423885019853E56FD097B29DFBE544F6919C63A52D5B49D443A5A855920A38421EF21152C24BD9729014C2410CC09C2A7F86BE94",
    "EDDC2F27B28FE41C2B6DD947729E2B75AD9254C029F2968F9012228B0F9242388B019853E52FD197B29D257228FB48CE81D290AD24EAB952D72A4905",
    "1C24CFF90829E11F59769014C2710CC09C2A7F8CBE94ED2C9143D947720E9486EC23398F96D256492AE02C79D14748097FC98283A4104E6400E654F9",
    "7BF4A56C67959CCB3E927394B4621FC979BA54B74A5201C7C9A33EC2E9F9FFF6EF2A3897019853E54FD297B29D55722EFB48CE51D28A7D24E7E952DD",
    "2A49059C28EFFA08E726FFDB3FCDE77406604E95BF4A5FCA7616CAD1EC2339874813F6919C0F90025749AA99D21356C9B9F047D24C3E2ACDE7680660",
    "4E953F4C5FCA7616CAD1EC2339874813F6919C0F90025749AA99D21356C9B9F0A7D24F3E246DE77406604E95BF4D5FCA76D6CAE9EC23391F2FE5EF23",
    "399F2135AE925433A527AC9273E11BD252DE2E0DE7010CC09C2A7F9EBE94EDAC95D3D947723E5ECADF47723E436A5C25A9664A4F5825E7C2F7A4ABBC",
    "515ACD331C3900E76AEE23397F281FDF4772FE503EBE8FE4E4EDD2F07D24E783A5F07D24E763A4CC55926AA6F48455722E7C5B1ACB5BA4C93CC64903",
    "702EE5CE92FC8FE4533B4BF23F924FED2CC97997F4791FC9F960297C1FC9F918297395A49A293D61959C0B3F91DEF213E92D0F73CC009C7BB9BFE4FF",
    "4DF9C8FE92FF37E523FB4B7EDE257DDE47723E524ADE47723E492A5D25A9664A4F5825E7C20FA5BD7C4FBACAF39C3100E75E9E22557C29DB4F912ABE",
    "94EDA74815BC459ABC8FE47CA494BC8FE47C9254BA4A52CD949EB04ACE859F4B87F953E9278F74C0009C7B7996D4F20BD97896D4F20BD97896D4C25B",
    "A4C9FB48CE8749B1FB48CE8749B1AB24D54CE909ABE45C788B3499DF974EF25406E0CF4A2DBF908D67492DBF908D67492DBC459ABC8FE47C9814BB8F",
    "E47C9814BB4A52CD949EB04ACE8577499FF91DE9210FB6FB009CAB79A254F452B69C2815BD942D274A45BC459ABC8FE47C8C94B98FE47C9ED4BB4A52",
    "CD949EB04ACE85374AABF9B5748F6733007F5C2A7A295B4E948A5ECA9613A522DE257DDE44423E46CADC47723E4FEA5D25A9664A4F5825E7C27BA5DB",
    "FC97F48DC733007F5C2A7A295B4E948A5ECA9613A522DE257DDE47723E400ADC47723E524A5E25A9664A4F5825E7C2DBA5E15CA5634C70FC009CF5F7",
    "4B9EABAC7F295BAEB2FE7EC97395F52F65CB55D6DF2F79AEB29E374AAB3791900F9002F7919C8F94925749AA99D21356C9B9F009E939FF965E318401",
    "F8A792E72AEB5FCA96ABACBF5FF25C65FD4BD97295F5F74B9EABACE78DD2EA7D24E7D152DA3E92F3A952F52A4935537AC22A39173E246DE76FE91273",
    "18807F2A79AEB2FEA56CB9CAFAFB25CF55D6BF942D57597FBFE4B9CA7ADE2BDDDE44421E2DA5ED23399F2A55AF925433A527AC9273E173D279D21F46",
    "3100FF54F25C65FD4BD97295F5F74B9EABAC7F295BAEB2FE7EC97395F5BC57BABD8FE43C548ADA47723E580A5F25A9664A4F5825E7C247A5F993A533",
    "4C6300FEA9E4B9CAFA97B2E52AEBEF973C5759FF52B65C65FDFD92E72AEB79BB347C130979A814B58FE47CB014BE4A52CD949EB04ACE854F4BFF674A",
    "4F18C800FC53C97395F52F65CB55D6DF2F79AEB2FEA56CB9CAFAFB25CF55D6F37669F83E92F33829671FC9F96CA97D95A49A293D61959C0B37C8114C",
    "936E309301F8A792E72AEB5FCA96ABACBF5FF25C65FD4BD97295F5F74B9EABACE713D2F34D24E47152CE3E92F3D952FB2A4935537AC22A3917EE9153",
    "18224D603203F04F25CF55D6BF942D57597FBFE4B9CAFA97B2E52AEBEF973C5759CF27A4E7FB48CE83A4907D24E7E3A5FC55926AA6F48455722EDC26",
    "07F178299FE10CC03F953C5759FF52B65C65FDFD92E72AEB5FCA96ABACBF5FF25C653D1F92B66F22210F9242F6919C8F97F25749AA99D21356C9B970",
    "A79CC583A5703000FF54F25C65FD4BD97295F5F74B9EABAC7F295BAEB2FE7EC97395F57C48DABE8FE43C424AD847724E900EAC925433A527AC9273E1",
    "66398E474AC9F01703F04F25CF55D6BF942D57597FBFE4B9CAFA97B2E52AEBEF973C5759CFE7A4F39B48C823A4844D24E41069C22A4935537AC22A39",
    "17EE97137998140B7F3300FF54F25C65FD4BD97295F5F74B9EABAC7F295BAEB2FE7EC97395F57C4E3ABF8FE4DC5CC2EF23398748135649AA99D21356",
    "C9B9B0440EE5315226FCC300FC53C97395F52F65CB55D6DF2F79AEB2FEA56CB9CAFAFB25CF55D6F35169FE2612727309BF89849C237D5825A9664A4F",
    "5825E7C22A3997074881F06F06E09F4A9EABAC7F295BAEB2FE7EC97395F52F65CB55D6DF2F79AEB29E8F4AF3F7919CDB4AEC7D24E71CE9C32A493553",
    "7AC22A391716CAD11C2DA54118807F2A79AEB2FEA56CB9CAFAFB25CF55D6BF942D57597FBFE4B9CA7A3E2DFDDF44426E2BB1379190A3A415AB24D54C",
    "E909ABE45C582BA773A814055706E09F4A9EABAC7F295BAEB2FE7EC97395F52F65CB55D6DF2F79AEB29E4F4BFFF7919C1B4AE07D24E72869C52A4935",
    "537AC22A391796CB011D27E5C04B06E09F4A9EABAC7F295BAEB2FE7EC97395F52F65CB55D6DF2F79AEB29E1BE4083691901B4AE04D24E434E9C62A49",
    "35537AC22A39177690333A480A81FF6200FEA9E4B9CAFA97B2E52AEBEF973C5759FF52B65C65FDFD92E72AEBB9418E601FC9B99544DD47724E936EAC",
    "925433A527AC9273611339A623A404F80503F04F25CF55D6BF942D57597FBFE4B9CAFA97B2E52AEBEF973C5759CF3D720A9B48C8AD24EA261272A034",
    "6495A49A293D61959C0BCBE580CE925AE0BF18807F2A79AEB2FEA56CB9CAFAFB25CF55D6BF942D57597FBFE4B9CA7AEE9153D847726E2221F7919C03",
    "A521AB24D54CE909ABE45C582BA773A814055706E09F4A9EABAC7F295BAEB2FE7EC97395F52F65CB55D6DF2F79AEB29EDBE4203691909B48C84D24E4",
    "4CE9C92A4935537AC22A391716CAD11C2DA54118807F2A79AEB2FEA56CB9CAFAFB25CF55D6BF942D57597FBFE4B9CA7A6E9383D847722E9778FB48CE",
    "99D29355926AA6F48455722EAC927379801408FF6600FEA9E4B9CAFA97B2E52AEBEF973C5759FF52B65C65FDFD92E72AEBB953CE621309B95CE26D22",
    "21C74A5B5649AA99D21356C9B9B0440EE5315226FCC300FC53C97395F52F65CB55D6DF2F79AEB2FEA56CB9CAFAFB25CF55D673B31CC7261272A104DB",
    "47728E95B6AC925433A527AC9273E17E39918749B1F03703F04F25CF55D6BF942D57597FBFE4B9CAFA97B2E52AEBEF973C5759CFCD721C9B48C88512",
    "6C130939593AB34A52CD949EB04ACE859BE5381E2925C35F0CC03F953C5759FF52B65C65FDFD92E72AEB5FCA96ABACBF5FF25C653DF7CB896C222197",
    "48A47D24E764E9CC2A49C54CB915AB241577CA593C580A0703F04F25CF55D6BF942D57597FBFE4B9CAFA97B2E52AEBEF973C5759CFFD72229B48C825",
    "12691309395C9AB34A5231536EC52A49C56D721013A4034C6600FEA9E4B9CAFA97B2E52AEBEF973C5759FF52B65C65FDFD92E72AEB592287B28984BC",
    "59C2EC2339874B7356492A66CAAD5825A9B8474E618EF481B10CC03F953C5759FF52B65C65FDFD92E72AEB5FCA96ABACBF5FF25C653D4BE450369190",
    "374B984D2424E9CF2A49C54CB915AB241537C8114C936E309301F8A792E72AEB5FCA96ABACBF5FF25C65FD4BD97295F5F74B9EABAC67959CCB2612F2",
    "3689B18FE424FD5925A99829B76295A4E2D3D2FF99D213063200FF54F25C65FD4BD97295F5F74B9EABAC7F295BAEB2FE7EC97395F5AC9273D94442DE",
    "2631369190FC252D5A25A99829B76295A4E2A3D2FCC9D219A63100FF54F25C65FD4BD97295F5F74B9EABAC7F295BAEB2FE7EC97395F52C94A3D94442",
    "DE2001F6919CFC252D5A25A99829B76295A4E243D276FE9216318A01F8A792E72AEB5FCA96ABACBF5FF25C65FD4BD97295F5F74B9EABAC67A11CCD26",
    "12F20609B08984E46FE9D22A49C54CB915AB24159F909EF36FE915431C3F00EF2F15BD942D274A452F65CB8952116BE5743691901F959FDE4772F2B7",
    "746995A462A6DC8A55928AB74BC3B94AC798C000FC71A9E8A56C39512A7A295B4E948A582BA7B38984FCA8FCF42612927FA451AB241533E556AC9254",
    "BC57BACD7F49DF783C03F01D52D455D69F2815BD942D274A452C9703DA44427E487E741309C9BFA557AB241533E556AC9254BC515ACDAFA57B3CDBEE",
    "03F05F72410F95A2AEB2FE2CA9E517B2F12CA9851DE48C3691901F921FDD4442F26FE9D52A49C54CB915AB2415EF923EF33BD2431ECC007C9FD41559",
    "7C96D4F20BD97896D4C226724C9B48C8B7CBCF6D222189B46B95A462A6DC8A55928AB74893F97DE9244F75C000FC97DCCE73A5AEC8E253A48A2F65FB",
    "295205FBC8496D2221DF2E3FB7898424D2AE55928A99722B56492A7E2E1DE64FA59F3CD21903F05F723BCF95BA228BF797FCBF291FD95FF2B39B9CD7",
    "2612F28DF2439B4848AED2B155928A99722B56492A7E28EDE5DBD2581EE69801F82FB99AE74A5D91C53B4BF23F924FED2CC9D9508E6C1309F946F9A1",
    "4D242457E9D82A49C54CB915AB24153F91DEF243692F4F72D200FC8F5CD043A5A8ABACDF4772FE503EBE8FE4647339BE4D24E45BE427369190BC94A6",
    "AD9254CC945BB14A52F16D692C6F9126F318470EC0CBE5797C5B3EFB16F9892F65FB4152C897B29D87C9716F2221DF223FB18984E4A5346D95A462A6",
    "DC8A55928AEF495779A3B49A6730007F539EC7B7E5B33F97EF7F29DB0F9242BE94ED3C4F4E7C1309F943F9F8261292FF92BEAD9254CC945BB14A52F1",
    "0D69296F9786F30006E0EFCBF3F8B67CF687F2F12F65FB4152C897B29DE7C9896F22217F281FDF4442F25FD2B755928A99722B56492AFE489AC9E7A4",
    "F39CCE00FC23791EDF96CFFE44BEFCA56C3F480AF952B6F34839F44D24E4B7E5B39B48487E21AD5B25A99829B76295A4E2F7A593DC2047C0B90CC03F",
    "95B7F16DF9ECB7E5B35FCAF683A4902F653B8F9443DF44427E5B3EBB8984E417D2BA55928A99722B56492A7E53DAC86D72101CCA00FC06791BDF96CF",
    "7E4FBEF9A56C3F480AF952B6F35439F74D24E437E4839B48487E2DDD5B25A99829B76295A4E277A487DC2CC7C1890CC0EF91B7F16DF9EC37E4835FCA",
    "F683A4902F653B0F96A3DF41127E433EB88984E4D7D2BD55928A99722B56492ABE94069EE50125FCED9FE3E05006E0B7C9DBF8897CF98FE4535FCAF6",
    "83A4902F653B0F96A3DF4442FE917C6A1309C997D2C055928A99722B56492A7E2DDD3B480AF94B161C27E5701603F09BE5797C5B3EFBFBF29D2F65FB",
    "4152C897B29D67CBE9EF2009FF483EB58984E44B69E02A49C54CB915AB2415BF90D61D2485FC23CB8E9372388801F8FDF23CBE2D9FFD4DF9C897B2FD",
    "2029E44BD9CEB3E5F4379190BF291FD94442F23BD2C355928A99722B56492AFE4BFA76901412597C9C94C3290CC01F91E7F16DF9ECEFC817BE94ED07",
    "49215FCA761E2F17600749F89BF2914D2424BF233D5C25A99829B76295A4E2A534ED2029E4A56C39512A627F06E04FC9DBF8B67CF64BD9FEA56C3F48",
    "0AF952B6F378B9009B48C82F65FB261292DF9436AE9254CC945BB14A5271958E1D2485FC42369E2815B13903F007E56D7C5B3EFB6BD9FBA56C3F480A",
    "F952B63341EEC00E92F04BD9BE8984E437A58DAB241533E556AC925444DA759014F23BF285E3A41C766600FEACBC8D6FCB677F211BBF94ED0749215F",
    "CA7626C81DD84442FE42366E2221F97DE9E42A49C54CB915AB2415FF965E1D2485FCBE7CE73829876D19803F2E6FE3DBF2D9FF925D5FCAF683A4902F",
    "653B43E41AEC20097F211B379190FCBE747295A462A6DC8A55928A7FA4510749217F2A5F3B4ECA614F06E03BE46DFC44BE7C95F55FCAF683A4902F65",
    "3B43E41A6C22215FCA964D24247F24CD5C25A99829B76295A4E22F69D15952CBF7E49BC749396CC8007C9F3C8F6FCB67238BBF94ED0749215FCA76E6",
    "C84DD84112BE942D9B4848FE489AB94A5231536EC52A4945FA739014F273F9FE71520E5B3100DF2A6FE35029EA87F2F17D2427E7CAC96E2221238B37",
    "9190FCA9F47395A462A6DC8A55926AB834E72029E45DF22BC74939ECC3007CB7BC8DA3A5B43F924FED2CC93951CE7407491859BC8324E41BD2D25592",
    "8A99722B5649AAC9D29983A490F7CA6F1D27E5B00903F002791B474B69BF291FD95FF2739C1CE82612F21F59B68984E41BD2D255928A99722B5649AA",
    "B1D29683A4904FC82F1E27E5B00303F01A791B474B695FCAF653A40A8E9303DD4112FE23CB7690847C4FBABA4A5231536EC52A4935537A729014F239",
    "F9DDE3A41C9633002F93B771B494F60BD97896D4C259729A9B48C8BF64C1261292EF495757492A66CAAD5825A9064A430E92426E900067492DAC6500",
    "5E296FE35CA9EB17B2F12CA985E3E4407790847FC9821D2421DF96C6AE9254CC945BB14A524D936E1C2485DC2631CE925A58C800BC58DEC6B952D74B",
    "D972A254C459729A9B382B213F91C6AE9254CC945BB14A528D92561C2485DC2C618E937258C200BC85BC8D13A5A297B2E544A988E3E4407770503C7E",
    "28BD5D25A99829B76295A49A237D38480A5922918E9372B89F01780B7918274A452F65CB895211C7C9816E62FF6CBC457ABB4A5231536EC52A493544",
    "9A708A54B15CE29D25B5703303F016F22AAEB2FE7EC97395F52F65CB55D6DF2F79AEB29E13E54C77B07930DE25ED5D25A99829B76295A49A201D3845",
    "AAD844429E25B5702703F016F224AEB2FE7EC97395F52F65CB55D6DF2F79AEB29E13E54CF985B48E1F4A7B57492A66CAAD5825A91E2FE59F22556C25",
    "51CF925AB88D01780B790F57597FBFE4B9CAFA97B2E52AEBEF973C5759CFA172ACBC94A6F173E9F02A49C54CB915AB24D583A5F083A4900D25F05952",
    "0BF730006F218FE12AEBEF973C5759FF52B65C65FDFD92E72AEB39548E9597D2347E2E1D5E25A99829B76295A47AAA547D9014B2ADC43E4ECAE1D30C",
    "C05BC833B8CAFAFB25CF55D6BF942D57597FBFE4B9CA7ACE959325D22EDE224D5E25A99829B76295A47AA4947C9014B2BFE43F4B6AE1A30CC05BC81B",
    "B8CAFAFB25CF55D6BF942D57597FBFE4B9CA7A8E96C3E5DFD22BDE224D5E28C11828576295A47A9ED47B9014728A547196D4C2E71880B790077095F5",
    "F74B9EABAC7F295BAEB2FE7EC97395F51C2D87CB3FD228DE257D5E28C11828576295A47A98147B90147296D47296D4C2871880B790DB7F95F5F74B9E",
    "ABAC7F295BAEB2FE7EC97395F59C2EE7CBDFD225DE257D5E2BD99826F76195A47A92547A901472A2547496D4C2271880B790AB7F95F5F74B9EABAC7F",
    "295BAEB2FE7EC97395F59C2EE7CB5FD222DE28ADDE411232476EC22A49F51829F314A9E274A9EE202984B733006F21F7FE2AEBEF973C5759FF52B65C",
    "65FDFD92E72AEB79801C31E90F6F9456037923CF901A4F912A9E21351E2485F05E06E02DE4D25F65FDFD92E743F2A3F74B9EABACE70172C4C3A539BC",
    "57BA0DE48D3C400A3C45AA7892547A96D4C2BB1880B790EB7E95F5F74B9E0FC98FDE2F79AEB29E67C8294F96CEF05EE936903772BA54778A54F13CA9",
    "F72CA985B730006F2177FD2AEBEF973C1F921FBD5FF25C653DCF90531E2B6DE1EDD270206FE46829ED14A9E2A952F559520B3F6700DE422EFA55D6DF",
    "2F793E243F7ABFE4B9CA7A1E23073D537AC2DBA5E140DEC8B952D72952C5E3A5FC83A4107EC800BC85DCF2ABACBF5FF27C487EF47EC97395F53C460E",
    "7AA034844F48CF81BC9143A5A853A48A21D28483A4107EC200BC855CF1ABACBF5FF27C487EF47EC97395F53C49CE7A9A74834F48CF81BC91E3A49C83",
    "A49051D28A83A410BECD00BC85DCEFABACBF5FF27C487EF47EC97395F53C49CE7A94B4820F49DB81BC91B3A49683A49081D290B3A416BEC100BC85DC",
    "ECABACBF5FF27C487EF47EC97395F53C4C8E7B8834818F4AF361B2BC8EB3A49653A48AE1D29C83A410FE9401780BB9D657597FBFE4F990FCE8FD92E7",
    "2AEB79981CF71069021F95E6C364791D074921A74815FC252D3A480AE18F1880B7903B7D95F5F74B9E0FC98FDE2F79AEB29EE7C9893F5ECAE7D3D27F",
    "982CAFE314A9E214A9827FA451074921FC3E03F01672A1AFB2FE7EC9F321F9D1FB25CF55D6F33C39F1C74BF97C5AFA0F93E5751C21259C22551069D7",
    "415208BFC900BC85DCE6ABACBF5FF27C487EF47EC97395F53C520EFDC1523837C811C064791DFB4BFE53A40A5E4AD30E9242F81D06E02DE42A5F65FD",
    "FD92E743F2A3F74B9EABACE79172E80F96C2B9474E0166CABBD85FF29F2255F06BE9DE2952055F32006F21F7F82AEBEF973C1F921FBD5FF25C653D4F",
    "95737FA494CC6D72103053DEC5E612FE14A982DF911E1E2485F00B06E02DE4065F65FDFD92E743F2A3F74B9EABACE7A972EE8F9492B94D0E0266CABB",
    "D859929F2255F0FBD2C983A410FE8B01780BB9BE57597FBFE4F990FCE8FD92E72AEB79B01CFDC3A4586E96E38069F2227696E4A74815FCA9F4F32029",
    "84970CC05BC8DDBDCAFAFB25CF55D6BF942D57597FBFE4B9CA7A1E2C47FF3029969BE538609ABC886D25F61152023F91DE9E2255706500DE422EEE55",
    "D6DF2F79AEB2FEA56CB9CAFAFB25CF55D6F36C39FDC748992C91438139F216B695D8474809FC5C3A7C8A54411880B7905B7B95F5F74B9EABAC7F295B",
    "AEB2FE7EC97395F53C5B4EFF3152264BE450608EBC850D25F0295205EF923E9F2255F06F06E02DE4CA5E65FDFD92E72AEB5FCA96ABACBF5FF25C653D",
    "8F970BF000299085723430415EC18612F814A982F74AB70F9242F89B01780BB9AC57597FBFE4B9CAFA97B2E52AEBEF973C5759CF04B903A74B752C94",
    "A38109F20A7693B4A748157C427A7E9014C25F0CC05BC84DBDCAFAFB25CF55D6BF942D57597FBFE4B9CA7A26C81D385A4A63B91C103C5BEEFF6E92F6",
    "14A9828F4AF34F912A30006F21D7F42AEBEF973C5759FF52B65C65FDFD92E72AEB1922D7E05CA98BE57240F06CB9FF5B49D453A40A6E90233845AA18",
    "CE00BC85DCD113A5A297B2E544A98821720D0E95A2D8448E099E2A377F2B897A8A54C16D7210A74815931980B7900B7AA254F452B69C281531476EC2",
    "71520E5BC961C1F3E4CE6F25514F912AB8598EE314A9622C03F016723B4F948A5ECA9613A52246C965384B6A6137392F7892DCF6AD24EA1152020BE5",
    "688E9012663200EF22B7F32CA9E517B2F12CA98569721F0E9242D8534E0D9E21F77C2B897A8494C07239A053A48A690CC0BBC8BD3C4B6AF9856C3C4B",
    "6A61A05C8923A4047696B383D3E5866F25518F9012D8448EE914A9621403F046722F4F912ABE94EDA748158C958BB1B984677F39413857EEF65612F5",
    "082981ADE4B04E912AE63000EF25F7727FC9FF9BF291FD253FC3E57A6C2BB139488E12CE92FBBC9BA43D424A604339B253A48A210CC0DBC9BDDC5992",
    "FF917C6A67490E7FCB3DD94DD2729C1C289C22377937497B8494C0CE7276474809131880F795DBB98FE4FCA17C7C1FC90957B9339B48488E96C3859D",
    "E5F6EE26694F912AD85F4EF00829E1F10CC0003F92FF220B25188F918386DDE4C66E28814F912A3845CEF114A9E2C10CC0006F90FF22374B189E2AE7",
    "0E6BE57E6E2BB14F912A384B4EF314A9E2A90CC000EF94FF251F959F668EDC04B8536EE3E612FE08298173E5648F90121EC9000CF011F98FF246F921",
    "86CBF5804FC8AD3B45AA38424AE07439DF23A484E7310003DC24FF607E533E025FCA15823F951B75A814758494C033E4948F90121EC6000C0000C008",
    "066000000046300003000030820118000080110CC00000008C60000600006004033000000023188001000018C1000C0000C008066000000046300003",
    "000030820118000080110CC00000008C60000600006004033000000023188001000018C1000C0000C008066000000046300003000030820118000080",
    "110CC00000008C60000600006004033000000023188001000018C1000C0000C008066000000046300003000030820118000080110CC00000008C6000",
    "0600006004033000000023188001000018C1000C0000C008066000000046300003000030820118000080110CC00000008C6000060000600403300000",
    "0023188001000018C1000C0000C008066000000046300003000030820118000080110CC00000008C60000600006004033000000023188001000018C1",
    "000C0000C008066000000046300003000030820118000080110CC00000008C60000600006004033000000023188001000018C1000C0000C008066000",
    "000046300003000030820118000080110CC00000008C60000600006004033000000023188001000018C1000C0000C008066000000046300003000030",
    "820118000080110CC00000008C60000600006004033000000023188001000018C1000C0000C008066000000046300003000030820118000080110CC0",
    "0000008C60000600006004033000000023188001000018C1000C0000C008066000000046300003000030820118000080110CC00000008C6000060000",
    "6004033000000023188001000018C1000C0000C008066000000046300003000030820118000080110CC00000008C6000060000600403300000002318",
    "8001000018C1000C0000C008066000000046300003000030820118000080110CC00000008C60000600006004033000000023188001000018C1000C00",
    "00C008066000000046300003000030820118000080110CC00000008C60000600006004033000000023188001000018C1000C0000C008066000000046",
    "30000300003082011800008001FEC7FFFC7F0132CC94508DAA484E0000000049454E44AE426082",
    0
};



const char *VGX_BUILTIN_IMAGE_logo_w_x_png[] = {
    "89504E470D0A1A0A0000000D4948445200000501000002090806000000158EFB8F000000017352474200AECE1CE90000000467414D410000B18F0BFC",
    "610500000009704859730000761C0000761C01A7C278EA0000333149444154785EEDD63B8EA4BBD2A6D99A400B25FDF39F614B2D15508D83838D7D2E",
    "0F3DC233DCC349E312966248D2692FED63E4FFFA7FFEF7FF00000000008365110000000098238B00000000C01C590400000000E6C822000000003047",
    "16010000008039B20800000000CC914500000000608E2C02000000007364110000000098238B00000000C01C590400000000E6C82200000000304716",
    "010000008039B20800000000CC914500000000608E2C02000000007364110000000098238B00000000C01C590400000000E6C8220000000030471601",
    "0000008039B20800000000CC914500000000608E2C02000000007364110000000098238B00000000C01C590400000000E6C822000000003047160100",
    "00008039B20800000000CC914500000000608E2C02000000007364110000000098238B00000000C01C590400000000E6C82200000000304716010000",
    "008039B20800000000CC914500000000608E2C02000000007364110000000098238B00000000C01C590400000000E6C8220000000030471601000000",
    "8039B20800000000CC914500000000608E2C02000000007364110000000098238B00000000C01C590400000000E6C822000000003047160100000080",
    "39B20800000000CC914500000000608E2C02000000007364110000000098238B00000000C01C590400000000E6C82200000000304716010000008039",
    "B20800000000CC914500000000608E2C02000000007364110000000098238B00000000C01C590400000000E6C82200000000304716010000008039B2",
    "0800000000CC914500000000608E2C02000000007364110000000098238B00000000C01C590400000000E6C82200000000304716010000008039B208",
    "00000000CC914500000000608E2C02000000007364110000000098238B00000000C01C590400000000E6C82200000000304716010000008039B20800",
    "000000CC914500000000608E2C02000000007364110000000098238B00000000C01C590400000000E6C82200000000304716010000008039B2080000",
    "0000CC914500000000608E2C02000000007364110000000098238B00000000C01C590400000000E6C82200000000304716010000008039B208000000",
    "00CC914500000000608E2C02000000007364110000000098238B00000000C01C590400000000E6C82200000000304716010000008039B20800000000",
    "CC914500000000608E2C02000000007364110000000098238B00000000C01C590400000000E6C82200000000304716010000008039B20800000000CC",
    "914500000000608E2C02000000007364110000000098238B00000000C01C590400000000E6C82200000000304716010000008039B20800000000CC91",
    "4500000000608E2C02000000007364110000000098238B00000000C01C590400000000E6C82200000000304716010000008039B20800000000CC9145",
    "00000000608E2C02000000007364110000000098238B00000000C01C590400000000E6C82200000000304716010000008039B20800000000CC914500",
    "000000608E2C02000000007364110000000098238B00000000C01C590400000000E6C82200000000304716010000008039B20800000000CC91450000",
    "0000608E2C02000000007364110000000098238B00000000C01C590400000000E6C82200000000304716010000008039B20800000000CC9145000000",
    "00608E2C02000000007364110000000098238B00000000C01C590400000000E6C82200000000304716010000008039B20800000000CC914500000000",
    "608E2C02000000007364110000000098238B00000000C01C590400000000E6C82200000000304716010000008039B20800000000CC91450000000060",
    "8E2C02000000007364110000000098238B00000000C01C590400000000E6C82200000000304716010000008039B20800000000CC914500000000608E",
    "2C02000000007364110000000098238B00000000C01C590400000000E6C82200000000304716010000008039B20800000000CC914500000000608E2C",
    "02000000007364110000000098238B00000000C01C590400000000E6C82200000000304716010000008039B20800000000CC914500000000608E2C02",
    "00000000736411803FF7FFFE7FFFE7FF4E523DC2BBD52C9EAC7ABC5165037C467DA3BFA5CE33596500EF547338596540CB22007FAEFE309DAEFA8477",
    "A9193C5DF539596500ECA5BEDDDF54679AAC328077A8F99BAC32602D8B00FC4CFD813A59F508EF523378B2EA719AEA1BD85B7DCBBFADCE35596500AF",
    "5473375965C0635904E067EA8FD4E9AA4F78B59ABDD3559F1354AFC039EABBFE843ADB649501BC42CDDB6495015FCB22003F577FAC4E563DC2ABD5EC",
    "9DAC7A3C59F5089CA9BEF14FA9F34D5619C04FD49C4D5619F03D5904E0E7EA0FD6E9AA4F78959AB9D3559F27AADE80B3D5B7FE4975C6C92A03F81335",
    "5F9355067C5F1601788DFAC375B2EA115EA566EE64D5E369AA2F6086FAE63FADCE39596500DF5533355DE5C073B208C06BD41FAFD3559FF053356BA7",
    "AB3E4F523D0173D477BF833AEB6495017CA56669BACA81E7651180D7A93F6227AB1EE1A76AD64E563D9EA2FA01E6A9EF7F1775DEC92A0358A9199AAE",
    "72E0CF641180D7A93F64A7AB3EE14FD58C9DAEFA3C41F502CC546FC04EEACC935506F09F6A76A6AB1CF8735904E0B5EA0FDAC9AA47F853356327AB1E",
    "4F50BD0073D53BB09B3AF7649501FCA56666B2CA809FCB2200AF577FDC4E563DC2B36AB64E577DEEAEFA0066ABB7604775F6C92A03A85999AC32E035",
    "B208FC4C3D64A7AAFEF83395EFC9AA477856CDD6C9AAC7DD551FC07CF51EECAACE3F5965C0BD6A4626AB0C789D2C02CFAB076C9AEA9BE754AE27AB1E",
    "E1BB6AA64E577DEEAC7A00EE506FC2CEAA87C92A03EE53B3315965C06B6511784E3D605355FF7C5F657AB2EA11BEAB66EA64D5E3CEAA07E01EF52EEC",
    "AEFA98AC32E01E3513935506BC5E1681EFAB076CBACA81EFAB4C4F563DC2576A964E577DEEAC7A00EE51EFC209AA97C92A03E6AB5998AC32E03DB208",
    "7C4F3D60B7A83CF89ECAF364D5237CA566E964D5E3CEAA07E02EF5369CA2FA99AC3260A6BAFFE92A07DE278BC0F7D423768BCA83EFAB4C4F563DC24A",
    "CDD0E9AACF9D550FC05DEA6D3849F5345965C02C75EFD3550EBC571681AFD523769BCA85EFA93C4F563DC24ACDD0C9AAC79D550FC07DEA7D384DF535",
    "5965C00C75DFD3550EBC5F1681AFD543769BCA85EFAB4C4F563DC27FAAD9395DF5B9B3EA01B84FBD0F27AADE26AB0C385BDDF3749503BF238BC0D7EA",
    "31BB4DE5C2F755A627AB1EE13FD5EC9CAC7ADC59F500DCA9DE8853557F9355069CA9EE77BACA81DF9345E06BF5A0DDA672E13995EBC9AA47F84BCDCC",
    "E9AACF9D550FC09DEA8D3859F5385965C059EA5EA7AB1CF85D5904BE568FDA6D2A179E53B99EAC7A84BFD4CC9CAC7ADC59F500DCABDE89D3559F9355",
    "069CA1EE73BACA81DF9745E06BF5B0DDA672E17995EDC9AA47A8593959F5B8BBEA03B857BD131354AF935506ECADEE71BACA81CFC822F0B57ADC6E53",
    "B9F0BCCAF664D523D4AC9CAC7ADC5DF501DCABDE8929AADFC92A03F654F7375965C0676511F85A3D72B7A95CF83395EFC9AA47EE553372B2EA7177D5",
    "0770B77A2B26A99E27AB0CD84BDDDB6495019F9745E06BF5D0DDA672E1CF54BE27AB1EB957CDC8C9AAC7DD551FC0DDEAAD98A6FA9EAC32E0F3EAAEA6",
    "AB1CD8431681AFD563779BCA853F57199FAC7AE43E351B27AB1E4F50BD0077ABB762A2EA7DB2CA80CFA93B9AAE72601F5904BE560FDE6D2A17FE5C65",
    "7CB2EA91FBD46C9CAC7A3C41F502DCADDE8AA9AAFFC92A037E5FDDCD7495037BC922F0B57AF46E53B9F03395F3C9AA47EE513371B2EAF114D50F70B7",
    "7A2B26AB0C26AB0CF83D7527D3550EEC278BC0D7EAE1BB4DE5C2CF54CE27AB1EB947CDC4C9AAC713542F00F55E4C57394C5619F07E7517D3550EEC29",
    "8BC0D7EAF1BB4DE5C2CF55D627AB1E99AF66E164D5E329AA1F807A2F6E50594C5619F03E7507D3550EEC2B8BC0D7EA01BC4DE5C2CF55D627AB1E99AF",
    "66E164D5E329AA1F807A2F6E51794C5619F07A95FD7495037BCB22F0B57A046F53B9F01A95F7C9AA47E6AA193859F57892EA09A0DE8B9B5426935506",
    "BC4E653E5DE5C0FEB2087CAD1EC2DB542EBC46E57DB2EA91B96A064E563D9EA47A02A8F7E23695CB6495013F57594F573970862C025FABC7F036950B",
    "AF53999FAC7A649EBAFB93558FA7A9BE00EABDB85165335965C09FAB8CA7AB1C38471681AFD583789BCA85D7AADC4F55FD314FDDFDC9AAC7D3545F00",
    "F55EDCAAF299AC32E03995EB0D2A0BCE9245E06BF528DEA672E1B52AF793558FCC51777EB2EAF144D51B40BD1737AB8C26AB0CF89ECAF3069505E7C9",
    "22F0B57A186F53B9F07A95FDA9AA3FE6A83B3F59F578A2EAED34D517C0ABD5FB335965C06395E3749503E7CA22F0B57A206F53B9F07A95FDC9AA47CE",
    "57777DB2EAF154D5DF29AA1F8077AAB768B2CA8056F94D573970B62C025FAB47F236950BEF51F99FAAFAE37C75D727AB1E4F55FD9DA07A01F80DF526",
    "4D5619F0EF2AB7E92A07CE9745E06BF550DEA672E13D2AFF93558F9CABEEF864D5E3C9AAC713542F00BFA5DEA5C92A03FEA9F29AAE7260862C025FAB",
    "C7F236950BEF537770AAEA8F73D51D9FAC7A3C59F5B8BBEA03E0B7D5FB34596570BBCA69BACA8139B2087CAD1ECCDB542EBC4FDDC1C9AA47CE53777B",
    "B2EAF174D5E7EEAA0F804FA8376AB2CAE05695CF749503B36411F85A3D9AB7A95C78AFBA8753557F9CA7EEF664D5E3E9AACFDD551F009F52EFD46495",
    "C16D2A97E92A07E6C922F0B57A386F53B9F05E750F27AB1E3947DDE9C9AAC709AAD7DD551F009F546FD56495C12D2A8FE92A0766CA22F0B57A3C6F53",
    "B9F07E7517A7AAFE3847DDE9C9AAC709AAD7DD551F009F56EFD56495C16495C10D2A0BE6CA22F0B57A406F53B9F07E751727AB1ED95FDDE5C9AAC729",
    "AADFDD551F003BA8376BB2CA60A2EAFD069505B36511F85A3DA2B7A95CF81D751FA7AAFED85FDDE5A9AABF49AAE7DD551F00BBA8776BB2CA6092EAF9",
    "069505F36511F85A3DA4B7A95CF81D751F27AB1ED957DDE1C9AAC749AAE7DD551F003BA9B76BB2CA6082EAF506950577C822F0B57A4C6F53B9F07BEA",
    "4E4E55FDB1AFBAC353557FD354DFBBAB3E007653EFD76495C1C9AAC71B5416DC238BC0D7EA41BD4DE5C2EFA93B3959F5C87EEAEE4E563D4E537DEFAE",
    "FA00D851BD6193550627AADE6E505970972C025FAB47F536950BBFABEEE554D51FFBA9BB3B55F53751F5BEBBEA036057F58E4D56199CA47A9AAE72E0",
    "4E5904BE568FEB6D2A177E57DDCBC9AA47F6517776B2EA71A2EA7D77D507C0CEEA2D9BAC323841F5325DE5C0BDB2087CAD1ED8DB542EFCBEBA9B5355",
    "7FECA3EEEC54D5DF54D5FFEEAA0F80DDD57B365965B0B3EA61BACA81BB6511F85A3DB2B7A95CF87D753727AB1EF9BCBAAB93558F5355FFBBAB3E004E",
    "506FDA6495C18EEAECD3550E9045E06BF5D0DEA672E133EA7E4E55FDF1797557A7AAFE26AB0C76577D009CA2DEB5C92A835DD4796F5059C03F6411F8",
    "9E7A706F5179F039754727AB1EF99CBAA393558F935506BBAB3E004E526FDB6495C1A7D5396F5059C05FB2087C4F3DBAB7A83CF8ACBAA753557F7C4E",
    "DDD1A9AABFE92A87DD551F00A7A9F76DB2CAE053EA7C37A82CE05F6511F8BE7A7CA7AB1CF8BCBAAB93558FFCBEBA9B93558FD3550EBBAB3E004E546F",
    "DC6495C16FAB73DDA0B280FF9445E039F5084F55FDB38FBAB353557FFCBEBA9B53557F37A82C76577D009CAADEB9C92A83DF52E7B9416501258BC0F3",
    "EA319EA6FA663F7577A7AAFEF83D752727AB1E6F5059ECAEFA003859BD75935506EF56E7B84165012B59047EA61EE753557FECADEEF154D51FBFA7EE",
    "E454D5DF2D2A8FDD551F00A7ABF76EB2CAE05DEAF76F5059C0235904F6518FFD336A4FE6AB593855F5C7FBD55D9CAC7ABC45E5B1BBEA0360827AF326",
    "AB0C5EAD7EF70695057C258BC03EEAC17F46EDC97C350BA7AAFE78BFBA8B53557F37A94C76577D004C51EFDE6495C1ABD4EFDDA0B280EFC822B08F7A",
    "F49F517B72879A8753557FBC4FDDC1C9AAC79B5426BBAB3E0026A9B76FB2CAE0A7EA776E5059C0776511D8473DFCCFA83DB943CDC3A9AA3FDEA7EEE0",
    "54D5DF6D2A97DD551F00D3D4FB375965F0276AEF1B5416F0AC2C02FBA83F00CFA83DB947CDC4A9AA3F5EAFB23F59F5789BCA6577D507C044F5064E56",
    "193CA3F6BC4165017F228BC03EEA8FC0336A4FEE513371AAEA8FD7ABEC4F55FDDDA8B2D95DF5013055BD83935506DF517BDDA0B2803F9545601FF587",
    "E019B52777A9B93855F5C7EB54E627AB1E6F54D9ECAEFA0098ACDEC2C92A83476A8F1B5416F0135904F6517F0C9E517B72979A8B53557FBC4E657EAA",
    "EAEF5695CFEEAA0F80E9EA3D9CAC3228B5F6069505FC5416817DD41F8467D49EDCA766E354D51F3F57599FAC7ABC55E5B3BBEA03E006F5264E5619FC",
    "AB5A7383CA025E218BC03EEA8FC2336A4FEE53B371AAEA8F9FABAC4F55FDDDAC32DA5DF501708B7A1727AB0CFEA1FEED0D2A0B78952C02FBA83F0CCF",
    "A83DB953CDC7A9AA3FFE5C657CAAEAEF7695D3EEAA0F809BD4DB38D9EDFDFFE53F738057CB22B08FFAE3F08CDA933BD57C9CAAFAE3CF55C6A7AAFE6E",
    "5739EDAEFA00B84DBD8F93DDDAF75FFEF5EEE15DB208ECA3FE403CA3F6E45E3523A7AAFE785E657BAAEA8F33EFB8FAE0352A6FEE54F3C17EEAEE98A7",
    "EE1EDE218BC03EEA8FC4336A4FEE553372AAEA8FE755B6A7AAFE38F38EAB0F5EA3F2E64E351FECA9EE8F39EACEE15DB208ECA3FE503CA3F6E46E3527",
    "A7AAFEF8BECAF454D51FFF5479EDAEFAE0352A6FEE54F3C1BEEA0E395FDD35BC5316817DD41F8B67D49EDCADE6E454D51FDF57999EAAFAE39F2AAFDD",
    "551FBC46E5CD9D6A3ED85BDD23E7AA3B8677CBE264F5F19DAAFA7B87FAED53557FEF50BF7DAAEA8FF3D55D9FAAFAE36B95E5A9AA3FFE5699EDAEFAE0",
    "352A6FEE54F3C1FEEA2E394FDD2DFC862C4E531FDD34D5F74FD46F4C537DFF44FDC634D53767AAFB3D55F5C7D72ACB53557FFCAD32DB5DF5C16B54DE",
    "DCA9E68333D47D7286BA4FF84D599CA43EBCA9AAFF3F517B4F55FDFF89DA7BAAEA9F33D5FD9EAAFA63AD323C55F5C7BFABDC76577DF01A953777AAF9",
    "E01C75A7ECADEE117E5B16A7A80F6FBACAE119B5E77495C3336ACFE92A07CE53777BAAEA8FB5CAF054D51FFFAE72DB5DF5C16B54DEDCA9E683B3D4BD",
    "B2A7BA3FF8842C4E501FDE2D2A8FEFA8BD6E51797C47ED758BCA83F3D4DD9EAAFAE3BF5576A7AAFEF86F95DDEEAA0F5EA3F2E64E351F9CA7EE96BDD4",
    "BDC1A7647182FAF86E51797C47ED758BCAE33B6AAF5B541E9CA7EEF654D51FFFADB23B55F5C77FABEC76577DF01A953777AAF9E04C75BFECA1EE0B3E",
    "298BA7AB8FEF3695CB23B5C76D2A97476A8FDB542E9CA7EEF654D51F7FABCC4E55FDD12ABFDD551FBC46E5CD9D6A3E3857DD319F55F7049F96C5D3D5",
    "07789BCAE591DAE33695CB23B5C76D2A17CE54F77BA2EA8DBF5566A7AAFE6895DFEEAA0F5EA3F2E64E351F9CADEE99CFA8FB811D64F174F511DEA672",
    "79A4F6B84DE5F248ED719BCA8533D5FD9EAAFAC31DDFAC32DC5DF5C16B54DEDCA9E683F3D55DF3BBEA5E6017593C5D7D882BB57E5775FE955AFF48ED",
    "B152EB7755E75FA9F58FD41E2BB57E5775FE955ACFB9EA8E4F54BD31E77EFFA1FA63AD32DC5DF5C16B54DEDCA9E68319EABEF91D751FB0932C9EAE3E",
    "C6955ABFAB3AFF4AAD7FA4F658A9F5BBAAF3AFD4FA476A8F955ABFAB3AFF4AADE75C75C7A7AAFE6E56199DAAFAE3B1CA7177D507AF517973A79A0FE6",
    "A83BE7BDEA1E6037593C5D7D902BB57E5775FE955AFF48EDB152EB7755E75FA9F58FD41E2BB57E5775FE955ACFD9EA9E4F54BDDDAC323A55F5C76395",
    "E3EEAA0F5EA3F2E64E351FCC52F7CE7B54FEB0A32C9EAE3ECA955ABFAB3AFF4AAD7FA4F658A9F5BBAAF3AFD4FA476A8F955ABFAB3AFF4AADE76C75CF",
    "A7AAFE6E54D99CAAFAE36B95E5EEAA0F5EA3F2E64E351FCC5377CF6B55EEB0AB2C9EAE3ECC955ABFAB3AFF4AAD7FA4F658A9F5BBAAF3AFD4FA476A8F",
    "955ABFAB3AFF4AADE77C75D727AADE6E54D99CAAFAE36B95E5EEAA0F5EA3F2E64E351FCC54F7CF6B54DEB0B32C9EAE3ECE955ABFAB3AFF4AAD7FA4F6",
    "58A9F5BBAAF3AFD4FA476A8F955ABFAB3AFF4AADE77C75D7A7AAFE6E52999CAAFAE37B2ACFDD551FBC46E5CD9D6A3E98AB66809FA99C6177593C5D7D",
    "A02BB57E5775FE955AFF48EDB152EB7755E75FA9F58FD41E2BB57E5775FE955ACF0C75DF27AADE6E52999CAAFAE37B2ACFDD551FBC46E5CD9D6A3E98",
    "ADE680E755B6708A2C9EAE3ED4955ABFAB3AFF4AAD7FA4F658A9F5BBAAF3AFD4FA476A8F955ABFAB3AFF4AAD6786BAEF53557F37A82C4E55FDF17D95",
    "E9EEAA0F5EA3F2E64E351FCC57B3C0F755A670922C9EAE3ED6955ABFAB3AFF4AAD7FA4F658A9F5BBAAF3AFD4FA476A8F955ABFAB3AFF4AAD678EBAF3",
    "13556F37A82C4E55FDF17D95E9EEAA0F5EA3F2E64E351FDCA1E681AF5596709A2C9EAE3ED8955ABFAB3AFF4AAD7FA4F658A9F5BBAAF3AFD4FA476A8F",
    "955ABFAB3AFF4AAD678EBAF353557F935506A7AAFE784EE5BABBEA83D7A8BCB953CD07F7A89960AD32841365F174F5D1AED4FA5DD5F9576AFD23B5C7",
    "4AADDF559D7FA5D63F527BACD4FA5DD5F9576A3DB3D4BD9FA87A9BAC323851F5C6F32ADBDD551FBC46E5CD9D6A3EB84BCD05FFADB2835365F174F5E1",
    "AED4FA5DD5F9576AFD23B5C74AADDF559D7FA5D63F527BACD4FA5DD5F9576A3DB3D4BD9FAAFA9BA87A3F55F5C7F32ADBDD551FBC46E5CD9D6A3EB84F",
    "CD067FABCCE064593C5D7DBC2BB57E5775FE955AFF48EDB152EB7755E75FA9F58FD41E2BB57E5775FE955ACF3C75F727AADE26AADE4F54BDF1672ADF",
    "DD551FBC46E5CD9D6A3EB853CD07BE1166CAE2E9EA035EA9F5BBAAF3AFD4FA476A8F955ABFAB3AFF4AAD7FA4F658A9F5BBAAF3AFD47AE6A9BB3F55F5",
    "3749F57CAAEA8F3F53F9EEAEFAE0352A6FEE54F3C1BD6A466E5619C104593C5D7DC42BB57E5775FE955AFF48EDB152EB7755E75FA9F58FD41E2BB57E",
    "5775FE955ACF4C75FF27AADE26A99E4F54BDF1E72AE3DD551FBC46E5CD9D6A3EB85BCDC98D2A1B98228BA7AB0F79A5D6EFAACEBF52EB1FA93D566AFD",
    "AEEAFC2BB5FE91DA63A5D6EFAACEBF52EB99A9EEFF54D5DF04D5EBA9AA3FFE5C65BCBBEA83D7A8BCB953CD07D4ACDCA4328149B278BAFA98576AFDAE",
    "EAFC2BB5FE91DA63A5D6EFAACEBF52EB1FA93D566AFDAEEAFC2BB59EB96A064E54BD4D50BD9EA87AE3672AE7DD551FBC46E5CD9D6A3EE01F6A5E6E50",
    "59C034593C5D7DD02BB57E5775FE955AFF48EDB152EB7755E75FA9F58FD41E2BB57E5775FE955ACF5C3503A7AAFE4E563D9EAAFAE3672AE7DD551FBC",
    "46E5CD9D6A3EE02F35339355063051164F571FF54AADDF559D7FA5D63F527BACD4FA5DD5F9576AFD23B5C74AADDF559D7FA5D6335BCDC189AAB79355",
    "8F27AADEF8B9CA7A77D507AF517973A79A0FA859B945E501D364F174F541AFD4FA5DD5F9576AFD23B5C74AADDF559D7FA5D63F527BACD4FA5DD5F957",
    "6A3DB3D51C9CAAFA3B51F576AAEA8F9FABAC77577DF01A953777AAF9E06E352737AA6C608A2C9EAE3EE4955ABFAB3AFF4AAD7FA4F658A9F5BBAAF3AF",
    "D4FA476A8F955ABFAB3AFF4AAD67BE9A8513556F27AADE4E54BDF11A95F7EEAA0F5EA3F2E64E351FDCAB66E46695114C90C5D3D547BC52EB7755E75F",
    "A9F58FD41E2BB57E5775FE955AFF48EDB152EB7755E75FA9F5CC57B370AAEAEF24D5D3A9AA3F5EA3F2DE5DF5C16B54DEDCA9E6833BD57CE01B61A62C",
    "9EAE3EE0955ABFAB3AFF4AAD7FA4F658A9F5BBAAF3AFD4FA476A8F955ABFAB3AFF4AADE70E350F27AADE4E523D9DA87AE3752AF3DD551FBC46E5CD9D",
    "6A3EB84FCD067FABCCE064593C5D7DBC2BB57E5775FE955AFF48EDB152EB7755E75FA9F58FD41E2BB57E5775FE955ACF3D6A264E54BD9DA07A3955F5",
    "C7EB54E6BBAB3E788DCA9B3BD57C70979A0BFE5B6507A7CAE2E9EAC35DA9F5BBAAF3AFD4FA476A8F955ABFAB3AFF4AAD7FA4F658A9F5BBAAF3AFD47A",
    "EE513371A2EAED04D5CB89AA375EAB72DF5DF5C16B54DEDCA9E6837BD44CB05619C289B278BAFA68576AFDAEEAFC2BB5FE91DA63A5D6EFAACEBF52EB",
    "1FA93D566AFDAEEAFC2BB59EBBD45C9CA87ADB59F570AAEA8FD7AADC77577DC0CE6A8E77577D70879A07BE5659C269B278BAFA60576AFDAEEAFC2BB5",
    "FE91DA63A5D6EFAACEBF52EB1FA93D566AFDAEEAFC2BB59EBBD45C9CA87ADB59F570A2EA8DD7ABEC77577DC0CE6A8E77577D305FCD02CFA95CE11459",
    "3C5D7DA82BB57E5775FE955AFF48EDB152EB7755E75FA9F58FD41E2BB57E5775FE955ACF7D6A364E54BDEDA8CE7EAAEA8FD7ABEC77577DC0CE6A8E77",
    "577D305BCD017FA6F2851364F174F591AED4FA5DD5F9576AFD23B5C74AADDF559D7FA5D63F527BACD4FA5DD5F9576A3DF7A9D93851F5B6A33AFB89AA",
    "37DEA3F2DF5DF5013BAB39DE5DF5C15C3503FC4CE50CBBCBE2E9EA035DA9F5BBAAF3AFD4FA476A8F955ABFAB3AFF4AAD7FA4F658A9F5BBAAF3AFD47A",
    "EE54F371A2EA6D2775E653557FBC47E5BFBBEA03765673BCBBEA8399EAFE798DCA1B7696C5D3D5C7B952EB7755E75FA9F58FD41E2BB57E5775FE955A",
    "FF48EDB152EB7755E75FA9F5DCA9E6E344D5DB4EEACC27AADE789FBA83DD551FB0B39AE3DD551FCC5377CF6B55EEB0AB2C9EAE3ECC955ABFAB3AFF4A",
    "AD7FA4F658A9F5BBAAF3AFD4FA476A8F955ABFAB3AFF4AADE75E352327AADE7650673D55F5C7FBD41DECAEFA809DD51CEFAEFA608EBA73DEA7EE0076",
    "94C5D3D547B952EB7755E75FA9F58FD41E2BB57E5775FE955AFF48EDB152EB7755E75FA9F5DCAB66E444D5DB0EEAAC27AADE78AFBA87DD551FB0B39A",
    "E3DD551FCC50F7CDEFA8FB809D64F174F531DEA67279A4F6B84DE5F248ED719BCA85BBD59C9CA87AFBA43AE3A9AA3FDEABEE6177D507ECACE67877D5",
    "07E7ABBBE677D5BDC02EB278BAFA106F53B93C527BDCA67279A4F6B84DE5C2DD6A4E4E54BD7D529DF144D51BEF5777B1BBEA03765673BCBBEA83B3D5",
    "3DF319753FB0832C9EAE3EC21B55362BB5FE3695CB23B5C76D2A17A8593951F5F60975B613556FFC8EBA8FDD551FB0B39AE3DD551F9CABEE98CFAA7B",
    "824FCBE204F511DEA8B259A9F5B7A83CBEA3F6BA45E501FF50F372A2EAED13EA6C27AADEF81D751FBBAB3E606735C7BBAB3E3853DD2F7BA8FB824FCA",
    "E204F501DEAAF229B5F61695C777D45EB7A83CE02F353327AADE7E539DE944D51BBFA7EE6477D507ECACE67877D507E7A9BB652F756FF029599CA23E",
    "C05B553EA5D64E57393CA3F69CAE72807F557373A2EAED37D5994E54BDF17BEA4E76577DC0CE6A8E77577D7096BA57F654F7079F90C549EA03BC55E5",
    "536AED54D5FF9FA8BDA7AAFEA1D4FC9CA87AFB0D759613556FFCAEBA97DD551FB0B39AE3DD551F9CA3EE94FDD55DC26FCAE234F5F1DDAAF229B5769A",
    "EAFB27EA37A6A9BE61A566E844D5DB6FA8B39CA87AE377D5BDECAEFA809DD51CEFAEFAE00C759F9CA3EE147E4B1627AB8FF04695CD4AAD3F55F5F70E",
    "F5DBA7AAFEE0BB6AA64E54BDBD539DE144D51BBFAFEE6677D507ECACE67877D507FBABBBE43C75B7F01BB2C81EEAB178A5FACD77AA333CA3F6BC4165",
    "F18CDA137E4BCDE489AAB777AA339CA87AE3F7D5DDECAEFA809DD51CEFAEFA606F758F9CABEE18DE2D8BECA31E8B57AADF7C97FAFD67D49E37A82C9E",
    "517BC26FAAB93C51F5F60EF5DB27AADEF88CBA9FDD551FB0B39AE3DD551FECABEE90F3D55DC33B6591BDD463F14AF59BEF50BFFD8CDAF30695C5336A",
    "4FF84D359727AADEDEA17EFB44D51B9F51F7B3BBEA03765673BCBBEA83FDD4DD314BDD3BBC4B16D94F3D16AF54BFF96AF5BBCFA83D6F50593CA3F684",
    "DF56B379A2EAED95EA374F54BDF1397547BBAB3E606735C7BBAB3ED84BDD1B73D50CC0AB65913DD543F14AF59BAF54BFF98CDAF30695C5336A4FF86D",
    "359B27AADE5EA97EF344D51B9F5377B4BBEA03765673BCBBEA837DD49D315FCD02BC5216D9573D14AF54BFF92AF57BCFA83D6F50593CA3F6844FA8F9",
    "3C51F5F60AF55B27AADEF8ACBAA7DD551FB0B39AE3DD551FECA1EE8B7BD44CC0AB6491BDD543F14AF59BAF50BFF58CDAF30695C5336A4FF8949AD1D3",
    "545FAF50BF75A2EA8DCFAA7BDA5DF5013BAB39DE5DF5C1E7D55DDD42067FFBD7998057CA22FBAB87E2D5EA777FA27EE319B5E70D2A8B67D49EF02935",
    "A327AADE7EA27EE344D51B9F5777B5BBEA03765673BCBBEA83CFAA7BBA4165F10FF56F6F5299C04F659173D463F14AF59B7FAAF67F46ED7983CAE219",
    "B5277C52CDE969AAAF9FA8DF3851F5C6E7D55DEDAEFA809DD51CEFAEFAE073EA8E6E5059FCAB5A7393CA047E228B9CA51E8B57AADFFC13B5F7336ACF",
    "1B5416CFA83DE1936A4E4F54BDFD89DAFB44D51B7BA8FBDA5DF5013BAB39DE5DF5C167D4FDDCA0B228B5F6269509FCA92C729E7A2C5EA97EF359B5EF",
    "336ACF1B5416CFA83DE1D36A564F537DFD89DAFB44D51B7BA8FBDA5DF5013BAB39DE5DF5C1EFABBBB94165F148ED719BCA059E9545CE540FC52BD56F",
    "3EA3F67C46ED7983CAE219B5277C5ACDEA89AAB767D49E27AADED847DDD9EEAA0FD859CDF1EEAA0F7E57DDCB0D2A8BEFA8BD6E53B9C033B2C8B9EAA1",
    "78A5FACDEFAAFD9E517BDEA0B27846ED093BA8793D4DF5F58CDAF344D51BFBA83BDB5DF5013BAB39DE5DF5C1EFA93BB94165F1ACDAF72695097C5716",
    "395B3D14AF54BFF91DB5D7336ACF1B5416CFA83D610735AF27AADEBEA3F63A51F5C65EEADE76577DC0CE6A8E77577DF03BEA3E6E5059FCA9DAFF2695",
    "097C4716395F3D14AF54BFF995DAE719B5E70D2A8B67D49EB08B9AD9D3545FDF517B9DA87A632F756FBBAB3E606735C7BBAB3E78BFBA8B1B54163F55",
    "BF7393CA04BE924566A887E2D5EA77576AFD336ACF1B5416CFA83D611735B327AADE1EA93D4E54BDB19FBABBDD551FB0B39AE3DD551FBC4FDDC12D2A",
    "8F57A9DFBB4965028F649159EAB178A5FACD526B9F517BDEA0B27846ED093BA9B93D4DF5F548ED71A2EA8DFDD4DDEDAEFA809DD51CEFAEFAE03D2AFF",
    "1B5416EF52BF7F93CA044A1699A71E8A1B5536EF50BF7DAAEA0F5EA9E6EE44D55BA9B527AADED853DDDFEEAA0FD859CDF1EEAA0F5EAFB2BF4165F16E",
    "758E9B5426F09FB2C84CF550DCAC32FA89FA8D69AA6F78859AB7D3545FA5D69EA6FA625F7587BBAB3E606735C7BBAB3E78ADCAFD0695C56FA9F3DCA4",
    "32817F9545E6AA87E26695D19FA8BDA7AAFEE1A76AD64E54BDFDAB5A73A2EA8D7DD51DEEAEFA809DD51CEFAEFAE0752AF31B5416BFADCE7593CA04FE",
    "924566AB87E26695D1336ACFE92A07F8A99AB5D3545FFFAAD69CA6FA626F758FBBAB3E606735C7BBAB3E788DCAFB0695C5A7D4F96E5299C03F6491F9",
    "EAA1B85965F41DB5D72D2A0FF8899AB313556FFF50FFF644D51B7BAB7BDC5DF5013BAB39DE5DF5C1CF55D637A82C765067BD45E50159E40EF550DCAA",
    "F2F98EDAEB169507FC54CDDA69AAAF7FA87F7B9AEA8BFDD55DEEAEFA809DD51CEFAEFAE0672AE71B54163BA933DFA2F2E06E59E41EF550DCAAF279A4",
    "F6B84DE5023F517376A25BFAE20C7597BBAB3E606735C7BBAB3EF87395F10D2A8B1DD5D96F529970A72C729F7A286E53B93C527BDCA672819FAA593B",
    "CD0D3D718EBACFDD551FB0B39AE3DD551FFC99CAF70695C5CEAA879B5426DC278BDCA71E89DB542E8FD41EB7A95CE0A76AD64E34B51FCE53F7B9BBEA",
    "03765673BCBBEA83E755B6D3550E27A99E6E517970972C729F7A20566AFDAEEAFC2BB5FE91DA63A5D6EFAACEBF52EBE1156ADE4E33B117CE5477BABB",
    "EA03765673BCBBEA83E754AED3550E27AADE6E5179708F2C729F7A1C566AFDAEEAFC2BB5FE91DA63A5D6EFAACEBF52EBE1156ADEF89CBA23CE5177BA",
    "BBEA03765673BCBBEA83EFAB4CA7AB1C4E563DDEA2F2E00E59E43EF530ACD4FA5DD5F9576AFD23B5C74AADDF559D7FA5D6C3ABD4CCF1FBEA6E384BDD",
    "EBEEAA0FD859CDF1EEAA0FBE5659DEA0B298A07ABD45E5C17C59E43EF528ACD4FA5DD5F9576AFD23B5C74AADDF559D7FA5D6C3ABD4CCF1FBEA6E384B",
    "DDEBEEAA0FD859CDF1EEAA0F1EAB1C6F50594C523DDFA43261AE2C729F7A0C566AFDAEEAFC2BB5FE91DA63A5D6EFAACEBF52EBE1956AEEF83D75279C",
    "A7EE7677D507ECACE67877D5076B95E10D2A8BA9AAFF5B541ECC9445EE530FC14AADDF559D7FA5D63F527BACD4FA5DD5F9576A3DBC5ACD1EBFA3EE83",
    "F3D4DD9EA07A815DD50CEFAEFAA0557E37A82CA6AB1C6E5179304F16B94F3D022BB57E5775FE955AFF48EDB152EB7755E75FA9F5F06A357BBC5FDD05",
    "67AAFB3D41F502BBAA19DE5DF5C17FABEC6E5059DCA2F2B845E5C12C59E43EF500ACD4FA5DD5F9576AFD23B5C74AADDF559D7FA5D6C33BD4FCF15E75",
    "0F9CA9EEF714D50FECA8E67777D507FFAE72BB4165719BCAE5169507736491FBD4C7BF52EB7755E75FA9F58FD41E2BB57E5775FE955A0FEF50F3C7FB",
    "D41D70AEBAE3D3545FB0939ADBDD551FFCAD329BAE72B85DE57483CA8219B2C87DEAC35FA9F5BBAAF3AFD4FA476A8F955ABFAB3AFF4AAD8777A919E4",
    "3D2A7FCE55770C50EF05FF54794D5739F04F95D70D2A0BCE9745EE531FFD4AADDF559DFF13EA6CBBAAF3AFD47A78979A415EAFB2E76C75CF00F55E70",
    "E79B5939F0EF2AB75B541E9C2B8BDCA73EF6955ABFAB3AFF27D4D97655E75FA9F5F04E3587BC56E5CED9EA9E01EABDB85DE5345DE540ABFC6E517970",
    "A62C729FFAD0576AFDAEEAFC9F5067DB559D7FA5D6C33BD51CF23A9539E7ABBB06A8F7E26695D17495038F558EB7A83C384F16B94F7DE42BB57E5775",
    "FE4FA8B3EDAACEBF52EBE1DD6A16798DCA9BF3D55D03D47B71ABCA67BACA81EFAB4C6F505970962C729FFAC0576AFDAEEAFC9F5067DB559D7FA5D6C3",
    "BBD52CF273953533D47D03D47B71A3CA66BACA81E755B637A82C384716B94F7DDC2BB57E5775FE4FA8B3EDAACEBF52EBE137D43CF233953333D47D03",
    "D47B7193CAE40695057FAE32BE4165C119B2C87DEAC35EA9F5BBAAF37F429D6D5775FE955A0FBFA1E6913F57193347DD3940BD17B7A83C6E5059F073",
    "95F52D2A0FF69645EE531FF44AADDF559DFF13EA6CBBAAF3AFD47AF82D35933CAFB2659EBA7BE05EF54EDCA2F298AE72E0F52AFB1B5416EC2B8BDCA7",
    "3EE6955ABFAB3AFF27D4D97655E75FA9F5F05B6A26795E65CB3C75F7C0BDEA9DB84165315DE5C0FBD41DDCA0B2604F59E43EF521AFD4FA5DD5F93FA1",
    "CEB6AB3AFF4AAD87DF5473C9F755A6CC54F70FDCABDE89E92A87E92A07DEAFEEE2069505FBC922F7A98F78A5D6EFAACEFF0975B65DD5F9576A3DFCA6",
    "9A4BBEAF3265A6BA7FE05EF54E4C56194C5739F07BEA4E6E5059B0972C729FFA80576AFDAEEAFC9F5067DB559D7FA5D6C36FABD9E46B952573D50C00",
    "F7AA7762AAEA7FBACA81DF57777383CA827D6491FBD4C7BB52EB7755E7FF843ADBAEEAFC2BB51E7E5BCD265FAB2C99ADE600B84FBD0F5355FFD3550E",
    "7C56DDD37495037BC822F7A90F77A5D6EFAACEFF0975B65DD5F9576A3D7C42CD276B9521F3D52C00F7A9F761A2EA7DBACA813DD47DDDA0B2E0B3B2C8",
    "7DEA835DA9F5BBAAF37F429D6D5775FE955A0F9F50F3C95A65C87C350BC07DEA7D98A6FA9EAE72602F756F37A82CF89C2C729FFA58576AFDAEEAFC9F",
    "5067DB559D7FA5D6C3A7D48CF2DF2A3BEE513301DCA3DE8569AAEFE92A07F654F77783CA82CFC822F7A90F75A5D6EFAACEBF52EB1FA93D566AFDAEEA",
    "FC2BB51E3EA56694FF56D9718F9A09E01EF52E4C523D4F56197086BACFE92A077E5F16B94F7DA42BB57E5775FE955AFF48EDB152EB7755E75FA9F5F0",
    "4935A7FCAD32E33E351BC07CF51E4C523D4F56197096BAD7E92A077E5716B94F7DA02BB57E5775FE955AFF48EDB152EB7755E75FA9F5F04935A7FCAD",
    "32E33E351BC07CF51E4C50BD4E573970A6BADFE92A077E4F16B94F7D9C2BB57E5775FE955AFF48EDB152EB7755E75FA9F5F06935ABF85EF9773523C0",
    "5CF50E4C50BD4E573970B6BAE71B5416BC5F16B94F7D942BB57E5775FE955AFF48EDB152EB7755E75FA9F5B0839AD7DB554EDCAB660498ABDE81D355",
    "9FD3550ECC50F77D83CA82F7CA22F7A90F72A5D6EFAACEBF52EB1FA93D566AFDAEEAFC2BB51E7650F37AB3CA086A568079EAFB3F5DF5395DE5C03C75",
    "F7D3550EBC4F16B94F7D8C2BB57E5775FE955AFF48EDB152EB7755E75FA9F5B08B9AD95B553E50B302CC53DFFFC9AAC7E92A07E6AA1998AE72E03DB2",
    "C87DEA43BC4DE5F248ED719BCA057651337BA3CA06FE523303CC51DFFDC9AAC7E92A07E6AB5998AE72E0F5B2C87DEA23BC4DE5F248ED719BCA057652",
    "737B93CA04FE53CD0E70BEFADE4F563D4E5739708F9A89E92A075E2B8BDCA73EC0DB542E8FD41EB7A95C603735BBB7A83CA0D4FC00E7AAEFFC64D5E3",
    "649501F7AA1999AC32E075B2C89DEA03BC45E5F11DB5D72D2A0FD851CDEF0D2A0B78A4E608384F7DDF27AB1E27AB0CA06665BACA819FCB2277AA0FEF",
    "1695C777D45EB7A83C605735C3935506F01D354FC039EABB3E59F5385965007FA99999AE72E067B2C8BDEAC39BAE727846ED395DE500BBAB599EA87A",
    "8767D45C01FBABEFF964D5E3649501FCA79A9DE92A07FE5C16B95B7D785355FF7FA2F69EAAFA8753D44C4F523DC39FAA1903F653DFEFE9AACFC92A03",
    "58A9199AAE72E0CF6411EAC39BA6FAFE89FA8D69AA6F3851CDF7E9AA4FF8A99A35601FF5DD9EAEFA9CAC3280EFA8799AAC32E07959847F551FE0A9AA",
    "BF77A8DF3E55F50713D4BC9FA87A8357ABD9033EA7BED3D3559FD3550EF08C9AABC92A039E934500B845FD07E304D50BBC5BCD22F07BEABB9CA07A9D",
    "AE72803F51F3355DE5C0F76411006E53FFC1D8519D1D3EA1E61378BDFAFE26A99EA7AB1CE0276ACEA6AB1CF85A1601E066F51F8D4FAA33C24E6A6E81",
    "3F57DFD944D5FB649501BC52CDDD6495018F651100F8A7FA0FC76FA8B3C0296AA681B5FA8EA6AB1C26AB0CE01D6AFE26AB0C58CB2200F058FD27E44F",
    "D4DE30557D037093FA2E6E54D94C5619C03BD51C4E5619D0B20800000000CC914500000000608E2C02000000007364110000000098238B00000000C0",
    "1C590400000000E6C82200000000304716010000008039B20800000000CC914500000000608E2C02000000007364110000000098238B00000000C01C",
    "590400000000E6C82200000000304716010000008039B20800000000CC914500000000608E2C02000000007364110000000098238B00000000C01C59",
    "0400000000E6C82200000000304716010000008039B20800000000CC914500000000608E2C02000000007364110000000098238B00000000C01C5904",
    "00000000E6C82200000000304716010000008039B20800000000CC914500000000608E2C02000000007364110000000098238B00000000C01C590400",
    "000000E6C82200000000304716010000008039B20800000000CC914500000000608E2C02000000007364110000000098238B00000000C01C59040000",
    "0000E6C82200000000304716010000008039B20800000000CC914500000000608E2C02000000007364110000000098238B00000000C01C5904000000",
    "00E6C82200000000304716010000008039B20800000000CC914500000000608E2C02000000007364110000000098238B00000000C01C590400000000",
    "E6C82200000000304716010000008039B20800000000CC914500000000608E2C02000000007364110000000098238B00000000C01C590400000000E6",
    "C82200000000304716010000008039B20800000000CC914500000000608E2C02000000007364110000000098238B00000000C01C590400000000E6C8",
    "2200000000304716010000008039B20800000000CC914500000000608E2C02000000007364110000000098238B00000000C01C590400000000E6C822",
    "00000000304716010000008039B20800000000CC914500000000608E2C02000000007364110000000098238B00000000C01C590400000000E6C82200",
    "000000304716010000008039B20800000000CC914500000000608E2C02000000007364110000000098238B00000000C01C590400000000E6C8220000",
    "0000304716010000008039B20800000000CC914500000000608E2C02000000007364110000000098238B00000000C01C590400000000E6C822000000",
    "00304716010000008039B20800000000CC914500000000608E2C02000000007364110000000098238B00000000C014FFF3BFFE7F21F271C59D264C71",
    "0000000049454E44AE426082",
    0
};



const char *VGX_BUILTIN_IMAGE_unlocked_png[] = {
    "89504E470D0A1A0A0000000D4948445200000020000000200806000000737A7AF4000000F449444154584763641860C038C0F63350CB0101408FC403",
    "B102101BA079EA01907F01883702F102740F53EA0001A081F38118E4006200C8218E40FC01A6985207AC27C172989D07A08E00F329714002D4F7C4F8",
    "1C5D4D222C3A287100BAEF41C10B32184423030720A71E8841340C6C003202290D81FB400314900C05C52D2878B101903A907A1800A501414A1DF01F",
    "CD2642A189553D214D383C04161E75C06808502D040AA0F91454AC520A0A81064C20C510502E780FC4D4B01C642F3C7F13EB089003D0839258BDB8D4",
    "9194B5471D301A02A321301A02A321301A02C32E04C8AA8E410D927E4AEB60685B6022906E20C52C0085953721FA5F26D20000000049454E44AE4260",
    "82",
    0
};






static vgx_server_artifact_t VGX_SERVER_ARTIFACTS[] = {
  // admin
  { .name = "/admin", 
    .namehash = 0, 
    .MediaType = MEDIA_TYPE__text_html, 
    .raw = { .data = VGX_BUILTIN_HTML_admin }, 
    .servable = { .bytes = 0, .sz = -1, .public = false }
  },
  // console
  { .name = "/console", 
    .namehash = 0, 
    .MediaType = MEDIA_TYPE__text_html, 
    .raw = { .data = VGX_BUILTIN_HTML_console }, 
    .servable = { .bytes = 0, .sz = -1, .public = false }
  },
  // footer
  { .name = "/footer", 
    .namehash = 0, 
    .MediaType = MEDIA_TYPE__text_html, 
    .raw = { .data = VGX_BUILTIN_HTML_footer }, 
    .servable = { .bytes = 0, .sz = -1, .public = true }
  },
  // header
  { .name = "/header", 
    .namehash = 0, 
    .MediaType = MEDIA_TYPE__text_html, 
    .raw = { .data = VGX_BUILTIN_HTML_header }, 
    .servable = { .bytes = 0, .sz = -1, .public = true }
  },
  // index
  { .name = "/index", 
    .namehash = 0, 
    .MediaType = MEDIA_TYPE__text_html, 
    .raw = { .data = VGX_BUILTIN_HTML_index }, 
    .servable = { .bytes = 0, .sz = -1, .public = false }
  },
  // plugin
  { .name = "/plugin", 
    .namehash = 0, 
    .MediaType = MEDIA_TYPE__text_html, 
    .raw = { .data = VGX_BUILTIN_HTML_plugin }, 
    .servable = { .bytes = 0, .sz = -1, .public = false }
  },
  // search
  { .name = "/search", 
    .namehash = 0, 
    .MediaType = MEDIA_TYPE__text_html, 
    .raw = { .data = VGX_BUILTIN_HTML_search }, 
    .servable = { .bytes = 0, .sz = -1, .public = false }
  },
  // status
  { .name = "/status", 
    .namehash = 0, 
    .MediaType = MEDIA_TYPE__text_html, 
    .raw = { .data = VGX_BUILTIN_HTML_status }, 
    .servable = { .bytes = 0, .sz = -1, .public = false }
  },
  // system
  { .name = "/system", 
    .namehash = 0, 
    .MediaType = MEDIA_TYPE__text_html, 
    .raw = { .data = VGX_BUILTIN_HTML_system }, 
    .servable = { .bytes = 0, .sz = -1, .public = false }
  },
  // vgx.css
  { .name = "/vgx.css", 
    .namehash = 0, 
    .MediaType = MEDIA_TYPE__text_css, 
    .raw = { .data = VGX_BUILTIN_CSS_vgx }, 
    .servable = { .bytes = 0, .sz = -1, .public = true }
  },
  // boxstate.js
  { .name = "/boxstate.js", 
    .namehash = 0, 
    .MediaType = MEDIA_TYPE__application_javascript, 
    .raw = { .data = VGX_BUILTIN_JS_boxstate_js }, 
    .servable = { .bytes = 0, .sz = -1, .public = true }
  },
  // clock.js
  { .name = "/clock.js", 
    .namehash = 0, 
    .MediaType = MEDIA_TYPE__application_javascript, 
    .raw = { .data = VGX_BUILTIN_JS_clock_js }, 
    .servable = { .bytes = 0, .sz = -1, .public = true }
  },
  // digest.js
  { .name = "/digest.js", 
    .namehash = 0, 
    .MediaType = MEDIA_TYPE__application_javascript, 
    .raw = { .data = VGX_BUILTIN_JS_digest_js }, 
    .servable = { .bytes = 0, .sz = -1, .public = true }
  },
  // header.js
  { .name = "/header.js", 
    .namehash = 0, 
    .MediaType = MEDIA_TYPE__application_javascript, 
    .raw = { .data = VGX_BUILTIN_JS_header_js }, 
    .servable = { .bytes = 0, .sz = -1, .public = true }
  },
  // jquery.js
  { .name = "/jquery.js", 
    .namehash = 0, 
    .MediaType = MEDIA_TYPE__application_javascript, 
    .raw = { .data = VGX_BUILTIN_JS_jquery_3_6_0_min_js }, 
    .servable = { .bytes = 0, .sz = -1, .public = true }
  },
  // uptime.js
  { .name = "/uptime.js", 
    .namehash = 0, 
    .MediaType = MEDIA_TYPE__application_javascript, 
    .raw = { .data = VGX_BUILTIN_JS_uptime_js }, 
    .servable = { .bytes = 0, .sz = -1, .public = true }
  },
  // favicon.ico
  { .name = "/favicon.ico", 
    .namehash = 0, 
    .MediaType = MEDIA_TYPE__image_ico, 
    .raw = { .data = VGX_BUILTIN_IMAGE_favicon_ico }, 
    .servable = { .bytes = 0, .sz = -1, .public = true }
  },
  // loader.gif
  { .name = "/loader.gif", 
    .namehash = 0, 
    .MediaType = MEDIA_TYPE__image_gif, 
    .raw = { .data = VGX_BUILTIN_IMAGE_loader_gif }, 
    .servable = { .bytes = 0, .sz = -1, .public = true }
  },
  // logo_b-w.png
  { .name = "/logo_b-w.png", 
    .namehash = 0, 
    .MediaType = MEDIA_TYPE__image_png, 
    .raw = { .data = VGX_BUILTIN_IMAGE_logo_b_w_png }, 
    .servable = { .bytes = 0, .sz = -1, .public = true }
  },
  // logo_b-x.png
  { .name = "/logo_b-x.png", 
    .namehash = 0, 
    .MediaType = MEDIA_TYPE__image_png, 
    .raw = { .data = VGX_BUILTIN_IMAGE_logo_b_x_png }, 
    .servable = { .bytes = 0, .sz = -1, .public = true }
  },
  // logo_w-b.png
  { .name = "/logo_w-b.png", 
    .namehash = 0, 
    .MediaType = MEDIA_TYPE__image_png, 
    .raw = { .data = VGX_BUILTIN_IMAGE_logo_w_b_png }, 
    .servable = { .bytes = 0, .sz = -1, .public = true }
  },
  // logo_w-x.png
  { .name = "/logo_w-x.png", 
    .namehash = 0, 
    .MediaType = MEDIA_TYPE__image_png, 
    .raw = { .data = VGX_BUILTIN_IMAGE_logo_w_x_png }, 
    .servable = { .bytes = 0, .sz = -1, .public = true }
  },
  // unlocked.png
  { .name = "/unlocked.png", 
    .namehash = 0, 
    .MediaType = MEDIA_TYPE__image_png, 
    .raw = { .data = VGX_BUILTIN_IMAGE_unlocked_png }, 
    .servable = { .bytes = 0, .sz = -1, .public = true }
  },
  
  0
};



#endif

